[[A-tricks-to-succeed]]
[appendix]
== Tips to succeed in the test!

In addition to validating important Java language concepts, the certification exam will also require you to be aware of specific details in the codes of each question. Without the help of the IDE, you will be the compiler.

Here are some simple examples that are obvious but can trick you into marking the right answer.

=== Scenario 1

[source,java]
----
class Duke {
  static int version = 6;

  public static void main(String[] args){
    System.out.println("Java" + version)
    version = version + 2;
  }
}
----
. Compile and print "Java6"
. Compile and print "Java8"
. Not compile
. Compiles, but an error occurs while running

Without thinking too much the answer would be _option 1_, right? Wrong. Looking more closely at the code, you can see that the first line of the `main` method is missing a `;` (semicolon). This little detail shows that the right option is 3.

[TIP]
--
Whenever there is a response saying _code does not compile_, double-check the compilation rules before testing the code's behavior and its possible answer.

.Mental checklist to validate a build
* Semicolon
* Visibility
* Scope of variables
* Method names and parameters
* ...
--

- - -
_Answer: 3_

=== Scenario 2

[source,java]
----
class Duke {
  static int version = 6;

  public static void main(String[] version) {
    version = 8;
    System.out.println("Java" + version);
  }
}
----
. The code compiles and runs, printing "Java8".
. The code does not compile.
. The code compiles and runs, printing "Java6".
. The code compiles but gives error in execution.

If you chose option 1, you got it wrong... This example has another catch with the concept of _shadowing_. The same variable name is used but with a different scope. Initially the `int` type misleads its response but this code does not compile when trying to assign an `int` value to a `String[]` variable.

- - -
_Answer: 2_

=== Scenario 3

[source,java]
----
class Duke {

  public static void main(String[] args) {
    boolean dukeClones = new boolean[100];
    System.out.println(dukeClones[10]);
  }
}
----
. Print `1`
. Print `0`
. Print false
. Print `true`
. Print `null`
. Execution Error
. Not compile

The most common choice would be option 3, where it confirms that the default value of each position of an array of type _boolean_ is _false_. This option would be right if it wasn't a catch. This code actually *does not compile*. The right option would be number 7. That's because the _dukeClones_ variable is a simple _boolean_ trying to get an array of type _boolean_.

[TIP]
--
In an implicit initialization as a member of a class, or each position of an array, etc., the variable gets the default value respecting the following rule:

* _boolean_ -> *_false_*
* _char_ -> *empty*, equivalent to 0
* Integer Numeric Primitives -> *0*
* Floating-point numeric primitives -> *0.0*
* References (Objects) -> *_null_*
--

- - -
_Answer: 7_
