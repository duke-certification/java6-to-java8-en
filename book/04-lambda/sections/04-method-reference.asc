
:java-package: src/org/j6toj8/lambda
:section-java-package: ../../../{java-package}

=== Method Reference

.Objective
--------------------------------------------------
Develop code that uses a method reference, including refactoring a lambda expression to a method reference.
--------------------------------------------------

The reference syntax for a method is new to Java 8. With it you can reference specific methods on four different occasions:

* Static Method References -> `String::valueOf`
* Method references of an object -> `instanceString::isEmpty`
* References to methods of an object type (of a class, interface, etc.) -> `String::isEmpty`
* Constructor References -> `String::new`

It is essential to remember Functional Interfaces, Lambda Expression syntax variations, and Built-in Interfaces definitions. If necessary, review the sections in this chapter.

You can think of method references as another way to write a lambda expression if the only thing your lambda expression does is call another method.

The following are the occasions when method references are used.

. Calls to static methods in lambda expressions can become a reference to the method.
+
[source,java,indent=0]
.{java-package}/methodreference/MethodReference_Static.java
----
include::{section-java-package}/methodreference/MethodReference_Static.java[tag=code]
----
+
.console output
[source,console]
----
5
5
----
+
In this case the only thing the lambda expression does is take an `x` argument and pass it to the `String` `valueOf` method. To simplify this, Java 8 allows you to write this same lambda function as presented on the following line: `String::valueOf`.
+
You can only represent the first lambda expression in the form of a _method reference_ because:
+
* The implementation of `String.valueOf` satisfies the `Function` functional interface (takes an argument and returns a value).
* The input argument of the lambda `x` expression is exactly the same as that passed to the `String.valueOf(x)` method.
* The lambda expression is simple: it only has one method call.

. Method calls from a specific instance can also be represented as a reference to a method.
+
[source,java,indent=0]
.{java-package}/methodreference/MethodReference_Instance.java
----
include::{section-java-package}/methodreference/MethodReference_Instance.java[tag=code]
----
+
.console output
[source,console]
----
5 - 8
5 - 8
----
+
You can only represent the first lambda expression in the form of a _method reference_ because:
+
* The implementation of `Converter.convert(Integer, Integer)` satisfies the `BiFunction` functional interface (takes two arguments and returns a value).
* The input arguments of the lambda expression `x` and `y` are exactly the same as those passed to the `Converter.convert(Integer, Integer)` method.
* The lambda expression is simple: it only has one method call.

. Calls to methods of a class, without specifying the specific instance, can also be represented as a reference to a method.
+
[source,java,indent=0]
.{java-package}/methodreference/MethodReference_Type.java
----
include::{section-java-package}/methodreference/MethodReference_Type.java[tag=code]
----
+
.console output
[source,console]
----
8.0
8.0
----
+
In this example, reference is being made to the `doubleValue` method of `Integer` *type*. You can only represent the first lambda expression in the form of a _method reference_ because:
+
* Our lambda expression satisfies the `Function` functional interface (takes an `x` argument and returns a `double` value).
* The lambda expression takes an `x` argument of `Integer` type, which has the `doubleValue` method that takes no parameters.
* The lambda expression is simple: it only has one method call.

. You can also use the method reference of a type, as in the previous example, even if the method receives parameters.
+
[source,java,indent=0]
.{java-package}/methodreference/MethodReference_TypeWithParam.java
----
include::{section-java-package}/methodreference/MethodReference_TypeWithParam.java[tag=code]
----
+
.console output
[source,console]
----
-1
-1
----
+
In this example the compiler "discovers" even more things than in the previous examples. By writing only the method reference, the compiler understands that the `x` variable, which comes first, will be the instance of `Integer` where the `compareTo` method will be called. And that `y` is the instance of `Integer` that will be passed as an argument to the `compareTo` method.

. Calls to a constructor can also be represented as a reference to a method.
+
[source,java,indent=0]
.{java-package}/methodreference/MethodReference_Constructor.java
----
include::{section-java-package}/methodreference/MethodReference_Constructor.java[tag=code]
----
+
.console output
[source,console]
----
1
1
----
+
This example is very similar to the previous one, with the only difference being that the referenced method is a constructor. Note that the constructor also gets a parameter and, as in the previous example, the compiler understands that the lambda function argument must be passed to the called constructor.

. Complex lambda expressions cannot be converted to method references, like the expression below:
+
[source,java,indent=0]
.{java-package}/methodreference/MethodReference_Complex.java
----
include::{section-java-package}/methodreference/MethodReference_Complex.java[tag=code]
----
+
Since in this case we have another `String` `+ "2"` being added to the constructor, there is no way to represent this with a simple reference to the constructor.

. You can use _method reference_ also with your own classes. See the following example for types created by our code and equivalent lambda expressions with and without reference to methods.
+
[source,java,indent=0]
.{java-package}/methodreference/MethodReference_CustomType.java
----
include::{section-java-package}/methodreference/MethodReference_CustomType.java[tag=code]
----
+
Note the difference between lambda expressions:
+
* One part implements the `Function` functional interface, as they take an argument and return a value.
+
* The latter implements the `Supplier` functional interface, as it does not take an argument, but returns a value.
+
If in doubt, refer back to the types of functional interfaces in the other sections of this chapter.

. The variety of ways to represent the same lambda expression can be large, so be careful not to get confused.
+
[source,java,indent=0]
.{java-package}/methodreference/MethodReference_Variaty.java
----
include::{section-java-package}/methodreference/MethodReference_Variaty.java[tag=code]	
----
+
You have seen all the ways to create a lambda expression, from the most complete to the simplest. Make sure you know all these variations for the certification exam.

.References
****

* Using Method References
+
Boyarsky, Jeanne; Selikoff, Scott. OCP: Oracle Certified Professional Java SE 8 Programmer II Study Guide (p. 152). Wiley. Kindle Edition.

* https://www.baeldung.com/java-method-references[Method References in Java.]

* https://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html[Method References.] The Javaâ„¢ Tutorials.

****
