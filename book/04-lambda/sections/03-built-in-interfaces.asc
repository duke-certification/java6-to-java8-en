:java-package: src/org/j6toj8/lambda
:section-java-package: ../../../{java-package}

=== Built-in Interfaces

.Objective
--------------------------------------------------
Develop code that uses the built-in interfaces included in the java.util.function package, such as Function, Consumer, Supplier, UnaryOperator, Predicate, and Optional APIs, including the primitive and binary variations of the interfaces
--------------------------------------------------

==== Functional Interfaces

Java 8 has some Functional Interfaces already created. They will probably be enough for most scenarios where it is usual to use lambda expressions, so it should not be routine for you to create a new one.

It is critical to understand these examples to master the use of lambda expressions and to understand the next section on method references.

===== Supplier

. `Supplier` is a functional interface that takes no input parameters but returns a value. Its definition in JDK is as follows:
+
[source,java]
.java.util.function.Supplier<T>
----
@FunctionalInterface
public interface Supplier<T> {
    T get();
}
----

. A possible implementation for a `Supplier` is a current date generator:
+
[source,java,indent=0]
.{java-package}/builtininterfaces/BuiltInInterfaces_SupplierExample.java
----
include::{section-java-package}/builtininterfaces/BuiltInInterfaces_SupplierExample.java[tag=code]
----
+
.console output
[source,console]
----
2019-07-08
----
+
The console output will print the current date this code was written.
+
Note that the lambda expression is simplified, without `{}` or `return` braces. If you have questions about this, go back again to the section on lambda expressions.

. A `Supplier` can be used to provide a costly processing function to be called only if needed:
+
[source,java,indent=0]
.{java-package}/builtininterfaces/BuiltInInterfaces_SupplierUseCase.java
----
include::{section-java-package}/builtininterfaces/BuiltInInterfaces_SupplierUseCase.java[tag=code]
----
+
.console output
[source,console]
----
Under age!
Major age! Validation performed at 2019-07-09T00:21:35.488
----
+
Note that in this case, the supplier only needed to be called at the second time, avoiding unnecessary execution of the lambda expression.

. There are `Supplier` interfaces for handling primitive types: `BooleanSupplier`, `IntSupplier`, `LongSupplier` and `DoubleSupplier`.
+
[source,java,indent=0]
.{java-package}/builtininterfaces/BuiltInInterfaces_SupplierPrimitive.java
----
include::{section-java-package}/builtininterfaces/BuiltInInterfaces_SupplierPrimitive.java[tag=code]
----
+
The result in the console will be to print the randomly generated primitive `int`.

===== Consumer and BiConsumer

. `Consumer` is a functional interface that takes an input parameter, and returns no value. Its definition in JDK is as follows:
+
[source,java]
.java.util.function.Supplier<T>
----
@FunctionalInterface
public interface Consumer<T> {
    void accept(T t);
}
----
 
. `BiConsumer` is a functional interface that takes two input parameters, and returns no value. Its definition in JDK is as follows:
+
[source,java]
.java.util.function.Consumer<T>
----
@FunctionalInterface
public interface BiConsumer<T, U> {
    void accept(T t, U u);
}
----

. Possible implementations for `Consumer` or` BiConsumer` are functions that print information to the console:
+
[source,java,indent=0]
.{java-package}/builtininterfaces/BuiltInInterfaces_ConsumerExample.java
----
include::{section-java-package}/builtininterfaces/BuiltInInterfaces_ConsumerExample.java[tag=code]
----
+
.console output
[source,console]
----
2019-07-08
2019-07-08
22:37:39.229
----

. There are `Consumer` interfaces to handle primitive types: `DoubleConsumer`, `IntConsumer`, `LongConsumer`, `ObjDoubleConsumer`, `ObjIntConsumer` and `ObjLongConsumer`.
+
[source,java,indent=0]
.{java-package}/builtininterfaces/BuiltInInterfaces_ConsumerPrimitive.java
----
include::{section-java-package}/builtininterfaces/BuiltInInterfaces_ConsumerPrimitive.java[tag=code]
----

===== Predicate and BiPredicate

. `Predicate` is a functional interface that takes an input parameter and returns a boolean value. Its definition in JDK is as follows:
+
[source,java]
.java.util.function.Predicate<T>
----
@FunctionalInterface
public interface Predicate<T> {
    boolean test(T t);
}
----
 
. `BiPredicate` is a functional interface that takes two input parameters and returns a boolean value. Its definition in JDK is as follows:
+
[source,java]
.java.util.function.BiPredicate<T>
----
@FunctionalInterface
public interface BiPredicate<T, U> {
    boolean test(T t, U u);
}
----

. Possible implementations for `Predicate` or `BiPredicate` are functions that check whether the input value is equal to the raffled value:
+
[source,java,indent=0]
.{java-package}/builtininterfaces/BuiltInInterfaces_PredicateExample.java
----
include::{section-java-package}/builtininterfaces/BuiltInInterfaces_PredicateExample.java[tag=code]
----
+
The output on the console is random as it depends on the amount raffled. A possible value would be `false` and `true`.

. There are `Predicate` interfaces for handling primitive types: `DoublePredicate`, `IntPredicate` and `LongPredicate`.
+
[source,java,indent=0]
.{java-package}/builtininterfaces/BuiltInInterfaces_PredicatePrimitive.java
----
include::{section-java-package}/builtininterfaces/BuiltInInterfaces_PredicatePrimitive.java[tag=code]
----

===== Function and BiFunction

. `Function` is a functional interface that takes an input parameter and returns a value. Its definition in JDK is as follows:
+
[source,java]
.java.util.function.Function<T, R>
----
@FunctionalInterface
public interface Function<T, R> {
    R apply(T t);
}
----
 
. `BiFunction` is a functional interface that takes two input parameters and returns a value. Its definition in JDK is as follows:
+
[source,java]
.java.util.function.BiFunction<T>
----
@FunctionalInterface
public interface BiFunction<T, U, R> {
    R apply(T t, U u);
}
----

. Possible implementations for `Function` or `BiFunction` are functions that multiply the given values:
+
[source,java,indent=0]
.{java-package}/builtininterfaces/BuiltInInterfaces_FunctionExample.java
----
include::{section-java-package}/builtininterfaces/BuiltInInterfaces_FunctionExample.java[tag=code]
----
+
.console output
[source,console]
----
7.5
30.0
----

. There are several `Function` interfaces for handling primitive types: `DoubleFunction`, `DoubleToIntFunction`, `DoubleToLongFunction`, `IntFunction`, `IntToDoubleFunction`, `IntToLongFunction`, `LongFunction`, `LongToDoubleFunction`, `LongToIntFunction`, `ToDoubleBiFunction`, `ToDoubleFunction`, `ToIntBiFunction`, `ToIntFunction`, `ToLongBiFunction`, `ToLongFunction`.
+
[source,java,indent=0]
.{java-package}/builtininterfaces/BuiltInInterfaces_FunctionPrimitive.java
----
include::{section-java-package}/builtininterfaces/BuiltInInterfaces_FunctionPrimitive.java[tag=code]
----
+
.console output
[source,console]
----
7.5
30.0
----

===== UnaryOperator and BinaryOperator

. `UnaryOperator` is a functional interface that takes an input parameter and returns a value of the same type as the input. Its definition in JDK is as follows:
+
[source,java]
.java.util.function.Function<T, R>
----
@FunctionalInterface
public interface UnaryOperator<T> extends Function<T, T> {

}
----
+
Note that there is no declared abstract method as it only extends the existing `Function` interface.
 
. `BinaryOperator` is a functional interface that takes two input parameters of the same type, and returns a value of the same type as the inputs. Its definition in JDK is as follows:
+
[source,java]
.java.util.function.BiFunction<T>
----
@FunctionalInterface
public interface BinaryOperator<T> extends BiFunction<T,T,T> {

}
----
+
Note that there is no declared abstract method as it only extends the existing `BiFunction` interface.

. Possible implementations for `UnaryOperator` or `BinaryOperator` are functions that add a fixed number or add one number to another:
+
[source,java,indent=0]
.{java-package}/builtininterfaces/BuiltInInterfaces_OperatorExample.java
----
include::{section-java-package}/builtininterfaces/BuiltInInterfaces_OperatorExample.java[tag=code]
----
+
.console output
[source,console]
----
9
6
----

. There are `Operator` interfaces to handle primitive types: `DoubleBinaryOperator`, `DoubleUnaryOperator`, `IntBinaryOperator`, `IntUnaryOperator`, `LongBinaryOperator`, `LongUnaryOperator`.
+
[source,java,indent=0]
.{java-package}/builtininterfaces/BuiltInInterfaces_OperatorPrimitive.java
----
include::{section-java-package}/builtininterfaces/BuiltInInterfaces_OperatorPrimitive.java[tag=code]
----
+
.console output
[source,console]
----
9
6
----

==== Optional

Java 8 has a specific type to represent values that may not have been entered, which is the `Optional` class. Starting with Java 8, it is often a better option than returning or storing `null`, as its methods help in many situations.

. You can create an instance of `Optional` with value through the `of` method.
. You can create a worthless instance of `Optional` using the `empty` method.
. You can check if an instance of `Optional` has a value through the `isPresent` method.
. You can retrieve the value of an instance of `Optional` through the `get` method.
+
[source,java,indent=0]
.{java-package}/builtininterfaces/BuiltInInterfaces_OptionalCreation.java
----
include::{section-java-package}/builtininterfaces/BuiltInInterfaces_OptionalCreation.java[tag=code]
----

. It is not possible to call the `of` method by passing `null` as an argument. For this there is the `ofNullable` method.
+
[source,java,indent=0]
.{java-package}/builtininterfaces/BuiltInInterfaces_OptionalNullable.java
----
include::{section-java-package}/builtininterfaces/BuiltInInterfaces_OptionalNullable.java[tag=code]
----
+
.console output
[source,console]
----
java.lang.NullPointerException
	at java.util.Objects.requireNonNull(Objects.java:203)
	at java.util.Optional.<init>(Optional.java:96)
	at java.util.Optional.of(Optional.java:108)
	at org.j6toj8.lambda.builtininterfaces.BuiltInInterfaces_OptionalNullable.main(BuiltInInterfaces_OptionalNullable.java:11)
false
----

. With the `ifPresent` method you can execute a lambda expression only if `Optional` has value.
+
[source,java,indent=0]
.{java-package}/builtininterfaces/BuiltInInterfaces_OptionalIfPresent.java
----
include::{section-java-package}/builtininterfaces/BuiltInInterfaces_OptionalIfPresent.java[tag=code]
----
+
.console output
[source,console]
----
With Value: value
----

. You can retrieve a default value if `Optional` is empty. The `orElse` method returns a value directly, and `orElseGet` returns via a lambda expression.
+
[source,java,indent=0]
.{java-package}/builtininterfaces/BuiltInInterfaces_OptionalOrElse.java
----
include::{section-java-package}/builtininterfaces/BuiltInInterfaces_OptionalOrElse.java[tag=code]
----
+
.console output
[source,console]
----
default value
default value
value
value
----
+
TIP: Note that this is a great case for remembering a benefit of lambda expressions. When using `orElseGet` the lambda expression is only executed if `Optional` is empty. In the case of the example, as it is only the return of a `String`, it makes no difference. However, if it were a heavier operation, you would only actually perform it if `Optional` was empty. If there was value, the lambda expression would not even be executed, avoiding the processing cost.

. You can also throw an exception if a value is not present in `Optional` using the `orElseThrow` method.
+
[source,java,indent=0]
.{java-package}/builtininterfaces/BuiltInInterfaces_OptionalOrElseThrow.java
----
include::{section-java-package}/builtininterfaces/BuiltInInterfaces_OptionalOrElseThrow.java[tag=code]
----
+
.console output
[source,console]
----
value
Exception in thread "main" java.lang.RuntimeException
	at org.j6toj8.lambda.builtininterfaces.BuiltInInterfaces_OptionalOrElseThrow.lambda$main$1(BuiltInInterfaces_OptionalOrElseThrow.java:17)
	at java.util.Optional.orElseThrow(Optional.java:290)
	at org.j6toj8.lambda.builtininterfaces.BuiltInInterfaces_OptionalOrElseThrow.main(BuiltInInterfaces_OptionalOrElseThrow.java:17)
----

. An exception will be thrown when calling the `get` method on an empty `Optional`.
+
[source,java,indent=0]
.{java-package}/builtininterfaces/BuiltInInterfaces_OptionalGetEmpty.java
----
include::{section-java-package}/builtininterfaces/BuiltInInterfaces_OptionalGetEmpty.java[tag=code]
----
+
.console output
[source,console]
----
value
Exception in thread "main" java.util.NoSuchElementException: No value present
	at java.util.Optional.get(Optional.java:135)
	at org.j6toj8.lambda.builtininterfaces.BuiltInInterfaces_OptionalGetEmpty.main(BuiltInInterfaces_OptionalGetEmpty.java:13)
----

. There are some classes for dealing with optional value of primitive variables, as they cannot be used with `generics`: `OptionalInt`, `OptionalDouble`, `OptionalLong`.
+
[source,java,indent=0]
.{java-package}/builtininterfaces/BuiltInInterfaces_OptionalPrimitive.java
----
include::{section-java-package}/builtininterfaces/BuiltInInterfaces_OptionalPrimitive.java[tag=code]
----
+
.console output
[source,console]
----
5
----

.References
****

* Working with Built-In Functional Interfaces
+
Boyarsky, Jeanne; Selikoff, Scott. OCP: Oracle Certified Professional Java SE 8 Programmer II Study Guide (p. 173). Wiley. Kindle Edition.

* https://www.baeldung.com/java-8-functional-interfaces[Functional Interfaces in Java 8.]

* https://www.baeldung.com/java-optional[Guide To Java 8 Optional.]

* https://docs.oracle.com/javase/8/docs/api/java/util/function/package-summary.html[Package java.util.function.] Java Plataform SE 8.

* https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html[Class Optional<T>.] Java Plataform SE 8.

* http://eherrera.net/ocpj8-notes/04-lambda-built-in-functional-interfaces[Lambda Built-in Functional Interfaces.]

****
