:java-package: src/org/j6toj8/streams
:section-java-package: ../../../{java-package}

=== Streams Paralelos

.Objetivo
--------------------------------------------------
Develop code that uses parallel streams, including decomposition operation and reduction operation in streams
-
Desenvolver código que usa Streams Paralelos, incluindo operação de decomposição e operação de redução em Streams
--------------------------------------------------

_Streams_ podem ser sequenciais ou paralelos. Os sequencias foram vistos na seção anterior, enquanto os paralelos serão apresentados nesta seção. _Streams_ paralelos são executados por mais de uma _Thread_, geralmente uma quantidade igual à quantidade de núcleos do processador onde a aplicação está sendo executada. Apesar disso, nem sempre é útil utilizá-los. Seu ganho real é em _Streams_ com grande volumes de dados. Em um _Stream_ pequeno, transformá-lo em paralelo pode até causar uma perda de performance.

Ao utilizar qualquer tipo de _Stream_, é recomendável não executar funções lambdas que causem efeitos colaterais, como mudanças no estado de objetos. Em _Streams_ paralelos essa recomendação é ainda mais importante.

. É possível transformar qualquer _Stream_ em paralelo utilizando o método `parallel`.
+
[source,java,indent=0]
.{java-package}/parallelstreams/Streams_Parallel.java
----
include::{section-java-package}/parallelstreams/Streams_Parallel.java[tag=code]
----

. É possível criar _Streams_ paralelos diretamente em Coleções através do método `parallelStream`.
+
[source,java,indent=0]
.{java-package}/parallelstreams/Streams_ParallelStream.java
----
include::{section-java-package}/parallelstreams/Streams_ParallelStream.java[tag=code]
----

. Ao utilizar a operação `forEach` em um _Stream_ paralelo, a ordem de execução não é garantida.
+
[source,java,indent=0]
.{java-package}/parallelstreams/Streams_ParallelForEach.java
----
include::{section-java-package}/parallelstreams/Streams_ParallelForEach.java[tag=code]
----
+
.Saída no console
[source,console]
----
Sequencial: 
A
B
C
Paralelo: 
B
C
A
----
+
O _Stream_ paralelo poderia ter impresso em qualquer ordem, pois não há nenhuma garantia na ordem em que os elementos serão tratados.

. A operação `forEachOrdered` garante que a ordem será mantida mesmo em _Streams_ paralelos.
+
[source,java,indent=0]
.{java-package}/parallelstreams/Streams_ParallelForEachOrdered.java
----
include::{section-java-package}/parallelstreams/Streams_ParallelForEachOrdered.java[tag=code]
----
+
.Saída no console
[source,console]
----
Sequencial: 
A
B
C
Paralelo: 
A
B
C
----

. Em coleções com muitos objetos pode haver um ganho considerável de performance.
+
[source,java,indent=0]
.{java-package}/parallelstreams/Streams_ParallelPerformance.java
----
include::{section-java-package}/parallelstreams/Streams_ParallelPerformance.java[tag=code]
----
+
.Saída no console
[source,console]
----
Tempo stream sequencial: 9863
Tempo stream paralelo: 1479
----
+
Perceba que na máquina onde o código foi executado, a execução em paralelo demorou apenas 15% do tempo da execução sequencial. Esse não é um teste minucioso, mas mostra o potencial de _Streams_ paralelos.

. Operações intermediárias que alteram o estado de objetos podem gerar resultados inesperados ao serem executadas em paralelo.
+
[source,java,indent=0]
.{java-package}/parallelstreams/Streams_ParallelStatefulOperation.java
----
include::{section-java-package}/parallelstreams/Streams_ParallelStatefulOperation.java[tag=code]
----
+
.Saída no console
[source,console]
----
Ordem no forEachOrdered: 
A
B
C
Ordem na synchronizedList: 
A
C
B
----
+
Perceba que a ordem foi respeitada na última operação do _Stream_, o `forEachOrdered`, mas não foi respeitada na execução da operação intermediária `map`. Isso ocorre porque essa operação intermediária não precisa seguir a ordem dos itens do stream.

. Diferente da execução em um _Stream_ sequencial, a operação `findAny` traz resultados realmente aleatórios ao ser executada em um _Stream_ paralelo.
+
[source,java,indent=0]
.{java-package}/parallelstreams/Streams_ParallelFindAny.java
----
include::{section-java-package}/parallelstreams/Streams_ParallelFindAny.java[tag=code]
----
+
.Saída no console
[source,console]
----
findAny Sequencial: 7
findAny Paralelo: 9
----

. Ao realizar uma operação de reduce não há problema caso o acumulador seja associativo.
+
[source,java,indent=0]
.{java-package}/parallelstreams/Streams_ParallelReduceAssociative.java
----
include::{section-java-package}/parallelstreams/Streams_ParallelReduceAssociative.java[tag=code]
----
+
.Saída no console
[source,console]
----
13440
13440
----
+
Perceba que o resultado com o Stream sequencial é idêntico ao paralelo. Isso ocorre porque a operação de multiplicação é associativa, ou seja, fazer `(2 x 2) x (3 x 3)` é o mesmo que fazer `(2 x 2 x 3) x 3`, ou até mesmo `2 x (2 x 3) x 3`.

. Ao realizar uma operação de reduce acumuladores não-associativos irá gerar resultados inesperados.
+
[source,java,indent=0]
.{java-package}/parallelstreams/Streams_ParallelReduceNonAssociative.java
----
include::{section-java-package}/parallelstreams/Streams_ParallelReduceNonAssociative.java[tag=code]
----
+
.Saída no console
[source,console]
----
-18
8
----
+
Isso ocorre pois a operação de subtração não é associativa, então o resultado pode variar conforme o _Stream_ for "fatiado" para ser executado em paralelo. Ou seja, fazer `1 - 2 - 3 - 4` não é o mesmo que fazer `(1 - 2) - (3 - 4)`.    

. Para coletar o resultado de um _Stream_ paralelo em um mapa, utilize a operação `toConcurrentMap`.
+
[source,java,indent=0]
.{java-package}/parallelstreams/Streams_ParallelToConcurrentMap.java
----
include::{section-java-package}/parallelstreams/Streams_ParallelToConcurrentMap.java[tag=code]
----
+
.Saída no console
[source,console]
----
toMap: {Roseany=7, Amélia=6, Rodrigo=7, Rinaldo=7, Luiz=4}
toConcurrentMap: {Amélia=6, Roseany=7, Rodrigo=7, Rinaldo=7, Luiz=4}
----
+
Perceba que o resultados das operações pode ser diferente. Ao utilizar o _Collector_ `toConcurrentMap` em um _Stream_ paralelo, as operações podem ser executadas em qualquer ordem e não há necessidade de criar múltiplos `Map's` para serem combinados posteriormente. Em grandes _Streams_, isso pode ocasionar em um ganho de performance.

. Para coletar o resultado de um Stream paralelo utilize _groupingByConcurrent_ ao invés de _groupingBy_.
+
[source,java,indent=0]
.{java-package}/parallelstreams/Streams_ParallelGroupingByConcurrent.java
----
include::{section-java-package}/parallelstreams/Streams_ParallelGroupingByConcurrent.java[tag=code]
----
+
.Saída no console
[source,console]
----
{4=[Luiz], 6=[Amélia], 7=[Rinaldo, Rodrigo, Roseany]}
{4=[Luiz], 6=[Amélia], 7=[Roseany, Rodrigo, Rinaldo]}
----
+
Pelo mesmo motivo do exemplo anterior, a ordem pode variar ao utilizar o `groupingByConcurrent`, porém pode haver ganho de performance em grandes _Streams_ paralelos, pois a ordem não é necessariamente seguida e não há necessidade de criar múltiplos mapas. 

.Referências
****

* Working with Parallel Streams
+
Boyarsky, Jeanne; Selikoff, Scott. OCP: Oracle Certified Professional Java SE 8 Programmer II Study Guide (p. 366). Wiley. Edição do Kindle. 

* https://www.baeldung.com/java-8-streams[The Java 8 Stream API Tutorial.]

* https://docs.oracle.com/javase/tutorial/collections/streams/parallelism.html[Parallelism.] The Java™ Tutorials.

* https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html[Package java.util.stream.] Java Plataform SE 8.

* https://docs.oracle.com/javase/8/docs/api/?java/util/stream/Stream.html[Interface Stream<T>.] Java Plataform SE 8.

****