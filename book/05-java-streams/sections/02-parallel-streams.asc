:java-package: src/org/j6toj8/streams
:section-java-package: ../../../{java-package}

=== Parallel Streams

.Objective
--------------------------------------------------
Develop code that uses parallel streams, including decomposition operation and reduction operation in streams
--------------------------------------------------

_Streams_ can be sequential or parallel. Sequential was seen in the previous section, while parallels will be presented in this section. Parallel _Streams_ are executed by more than one _Thread_, usually equal to the number of processor cores where the application is running. Nevertheless, it is not always useful to use them. Your actual gain is _Streams_ using large volumes of data. In a small _Stream_, turning it parallel can even cause a loss of performance.

When using any kind _Stream_, it is recommended not to perform Lambda functions that cause side effects, such as changes in the state of objects. In parallel _Streams_, this recommendation is even more important.

. You can make any _Stream_ parallel using the `parallel` method.
+
[source,java,indent=0]
.{java-package}/parallelstreams/Streams_Parallel.java
----
include::{section-java-package}/parallelstreams/Streams_Parallel.java[tag=code]
----

. You can create parallel _Streams_ directly in Collections through the `parallelStream` method.
+
[source,java,indent=0]
.{java-package}/parallelstreams/Streams_ParallelStream.java
----
include::{section-java-package}/parallelstreams/Streams_ParallelStream.java[tag=code]
----

. When using the `forEach` operation on a parallel _Stream_, the order of execution is not guaranteed.
+
[source,java,indent=0]
.{java-package}/parallelstreams/Streams_ParallelForEach.java
----
include::{section-java-package}/parallelstreams/Streams_ParallelForEach.java[tag=code]
----
+
.console output
[source,console]
----
Sequential:
A
B
C
Parallel:
B
C
A
----
+
The parallel _Stream_ could have printed in any order as there is no guarantee in the order in which the elements will be handled.

. The `forEachOrdered` operation ensures that order will be maintained even in parallel _Streams_.
+
[source,java,indent=0]
.{java-package}/parallelstreams/Streams_ParallelForEachOrdered.java
----
include::{section-java-package}/parallelstreams/Streams_ParallelForEachOrdered.java[tag=code]
----
+
.console output
[source,console]
----
Sequential:
A
B
C
Parallel:
A
B
C
----

. In collections with many objects, there can be a considerable performance gain.
+
[source,java,indent=0]
.{java-package}/parallelstreams/Streams_ParallelPerformance.java
----
include::{section-java-package}/parallelstreams/Streams_ParallelPerformance.java[tag=code]
----
+
.console output
[source,console]
----
Sequential Stream time: 9863
Parallel Stream time: 1479
----
+
Note that on the machine where the code was executed, parallel execution took only 15% of the sequential execution time. This is not a thorough test, but it does show the potential of parallel _Streams_.

. Intermediate operations that change the state of objects can produce unexpected results when executed in parallel.
+
[source,java,indent=0]
.{java-package}/parallelstreams/Streams_ParallelStatefulOperation.java
----
include::{section-java-package}/parallelstreams/Streams_ParallelStatefulOperation.java[tag=code]
----
+
.console output
[source,console]
----
Order on forEachOrdered:
A
B
C
Order on synchronizedList:
A
C
B
----
+
Note that the order was respected in the last _Stream_ operation, `forEachOrdered`, but was not respected when performing the `map` intermediate operation. This is because this intermediate operation does not have to follow the order of stream items.

. Unlike running in a sequential _Stream_, the `findAny` operation brings really random results when executed in a parallel _Stream_.
+
[source,java,indent=0]
.{java-package}/parallelstreams/Streams_ParallelFindAny.java
----
include::{section-java-package}/parallelstreams/Streams_ParallelFindAny.java[tag=code]
----
+
.console output
[source,console]
----
findAny Sequential: 7
findAny Parallel: 9
----

. When performing a reduce operation there is no problem if the accumulator is associative.
+
[source,java,indent=0]
.{java-package}/parallelstreams/Streams_ParallelReduceAssociative.java
----
include::{section-java-package}/parallelstreams/Streams_ParallelReduceAssociative.java[tag=code]
----
+
.console output
[source,console]
----
13440
13440
----
+
Note that the result with sequential Stream is identical to parallel. This is because the multiplication operation is associative, i.e., doing `(2 x 2) x (3 x 3)` is the same as doing `(2 x 2 x 3) x 3`, or even `2 x (2x3) x3`.

. Performing a reduce non-associative accumulator operation will produce unexpected results.
+
[source,java,indent=0]
.{java-package}/parallelstreams/Streams_ParallelReduceNonAssociative.java
----
include::{section-java-package}/parallelstreams/Streams_ParallelReduceNonAssociative.java[tag=code]
----
+
.console output
[source,console]
----
-18
8
----
+
This is because the subtraction operation is not associative, so the result may vary as _Stream_ is "sliced" to run in parallel. That is, doing `1 - 2 - 3 - 4` is not the same as doing `(1 - 2) - (3 - 4)`.

. To collect the result of a parallel _Stream_ on a map, use the `toConcurrentMap` operation.
+
[source,java,indent=0]
.{java-package}/parallelstreams/Streams_ParallelToConcurrentMap.java
----
include::{section-java-package}/parallelstreams/Streams_ParallelToConcurrentMap.java[tag=code]
----
+
.console output
[source,console]
----
toMap: {Roseany=7, Amélia=6, Rodrigo=7, Rinaldo=7, Luiz=4}
toConcurrentMap: {Amélia=6, Roseany=7, Rodrigo=7, Rinaldo=7, Luiz=4}
----
+
Note that the results of operations may differ. By using _Collector_ `toConcurrentMap` in a parallel _Stream_, operations can be performed in any order and there is no need to create multiple `Map's` to be combined later. In large _Streams_, this can lead to a performance gain.

. To collect the result of a parallel stream use _groupingByConcurrent_ instead of _groupingBy_.
+
[source,java,indent=0]
.{java-package}/parallelstreams/Streams_ParallelGroupingByConcurrent.java
----
include::{section-java-package}/parallelstreams/Streams_ParallelGroupingByConcurrent.java[tag=code]
----
+
.console output
[source,console]
----
{4=[Luiz], 6=[Amélia], 7=[Rinaldo, Rodrigo, Roseany]}
{4=[Luiz], 6=[Amélia], 7=[Roseany, Rodrigo, Rinaldo]}
----
+
For the same reason as in the previous example, the order may vary when using `groupingByConcurrent`, but there may be performance gains on large parallel _Streams_ as the order is not necessarily followed and there is no need to create multiple maps.

.References
****

* Working with Parallel Streams
+
Boyarsky, Jeanne; Selikoff, Scott. OCP: Oracle Certified Professional Java SE 8 Programmer II Study Guide (p. 366). Wiley. Kindle Edition.

* https://www.baeldung.com/java-8-streams[The Java 8 Stream API Tutorial.]

* https://docs.oracle.com/javase/tutorial/collections/streams/parallelism.html[Parallelism.] The Java™ Tutorials.

* https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html[Package java.util.stream.] Java Plataform SE 8.

* https://docs.oracle.com/javase/8/docs/api/?java/util/stream/Stream.html[Interface Stream<T>.] Java Plataform SE 8.

****
