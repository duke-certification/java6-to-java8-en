:java-package: src/org/j6toj8/streams
:section-java-package: ../../../{java-package}

=== Utilizando Streams

.Objetivo
--------------------------------------------------
Describe the Stream interface and pipelines; create a stream by using the Arrays.stream() and IntStream.range() methods; identify the lambda operations that are lazy.
-
Descrever a interface e pipelines de Stream; criar um stream utilizando os métodos Arrays.stream() e IntStream.range(); identificar quais operações lambda executam sob demanda (_lazy_).
--------------------------------------------------

Uma das maiores novidades do Java 8 são os _Streams_. Um _Stream_ é basicamente um fluxo de dados.
Os dados podem ser _Strings_, números, ou qualquer outro objeto.  Esses dados passam por uma série de operações, e o conjunto dessas operações é chamado de _pipeline_. Essas operações são quase sempre representadas por expressões lambda, então é muito importante ter dominado todo o capítulo sobre *lambda*, pois todos aqueles conceitos serão utilizados agora para formar um _Stream_.

A partir dos exemplos a seguir, essa explicação ficará mais clara.

==== Criando um _Stream_

Geralmente, um _Stream_ é criado a partir de um conjunto de dados, como uma lista ou outro tipo de coleção. O objeteivo da certificação deixa explícito que é necessário conhecer os métodos `Arrays.stream()` e `IntStream.range()`. Mas, além dessas, serão apresentadas também algumas outras formas comuns de criar um _Stream_.

. É possível criar um Stream a partir de um `Array` utilizando o método `Arrays.stream()`.
+
[source,java,indent=0]
.{java-package}/usingstreams/Stream_ArraysStream.java
----
include::{section-java-package}/usingstreams/Streams_ArraysStream.java[tag=code]
----
+
.Saída no console
[source,console]
----
A
B
C
----

. É possível criar um Stream a partir de uma faixa de números utilizando o método `IntStream.range()`.
+
[source,java,indent=0]
.{java-package}/usingstreams/Stream_IntRangeStream.java
----
include::{section-java-package}/usingstreams/Streams_IntRangeStream.java[tag=code]
----
+
.Saída no console
[source,console]
----
0
1
2
3
----
+
Perceba que o primeiro argumento (número 0) é inclusivo, enquanto o segundo argumento (número 4) é exclusivo. Por isso a saída no console apresenta apenas os números 0 a 3.

. É possível criar um _Stream_ a partir de uma lista.
+
[source,java,indent=0]
.{java-package}/usingstreams/Streams_ListStream.java
----
include::{section-java-package}/usingstreams/Streams_ListStream.java[tag=code]
----
+
.Saída no console
[source,console]
----
A
B
C
----

. É possível criar um _Stream_ a partir de elementos específicos utilizando o método `Stream.of`.
+
[source,java,indent=0]
.{java-package}/usingstreams/Streams_Of.java
----
include::{section-java-package}/usingstreams/Streams_Of.java[tag=code]
----
+
.Saída no console
[source,console]
----
A
B
1
2
3.0
4.0
----
+
Nesse caso foi criado um _Stream_ que contém: `String`, `Character`, `Integer`, `Long`, `Float` e `Double`.

==== Operações em _Streams_

As operações feitas em um _Stream_ irão formar seu _pipeline_. As operações que podem ser realizadas em um Stream são divididas em *operações intermediárias* e **operações finais**. O _Stream_ pode conter inúmeras operações intermediárias, porém somente uma final. Nos exemplos anteriores a única operação utilizada foi o `forEach`, que é uma operação final. A seguir serão apresentadas outras operações.

===== Operações intermediárias

. É possível ignorar elementos de um stream com a operaçao `skip`.
+
[source,java,indent=0]
.{java-package}/usingstreams/Stream_Skip.java
----
include::{section-java-package}/usingstreams/Streams_Skip.java[tag=code]
----
+
.Saída no console
[source,console]
----
2
3
----
+
Perceba que nesse caso os elementos 0 e 1 foram ignorados, pois são os dois primeiros elementos do _Stream_. Isso ocorreu pela existência da operação `skip`.

. É possível limitar a quantidade de elementos que serão processados utilizando a operação `limit`.
+
[source,java,indent=0]
.{java-package}/usingstreams/Streams_Limit.java
----
include::{section-java-package}/usingstreams/Streams_Limit.java[tag=code]
----
+
.Saída no console
[source,console]
----
0
1
----
+
Nesse caso apenas os 2 primeiros elementos foram impressos no console, pois a operação `limit` limitou a quantidade de elementos a serem processados.

. É possível filtrar elementos do `Stream` utilizando a operação `filter`.
+
[source,java,indent=0]
.{java-package}/usingstreams/Streams_Filter.java
----
include::{section-java-package}/usingstreams/Streams_Filter.java[tag=code]
----
+
.Saída no console
[source,console]
----
0
2
----
+
Nesse caso apenas os elementos pares foram impressos, pois a operação `filter` limitou àqueles que possuem resto da divisão por 2 igual a 0.

. É possível filtrar elementos repetidos do _Stream_ utilizando a operação `distinct`.
+
[source,java,indent=0]
.{java-package}/usingstreams/Streams_Distinct.java
----
include::{section-java-package}/usingstreams/Streams_Distinct.java[tag=code]
----
+
.Saída no console
[source,console]
----
A
B
C
F
----
+
Perceba que nesse caso os elementos repetidos do stream (`"A"` e `"B"`) foram ignorados, sendo apresentados apenas uma vez.
+
A operação `distinct` utiliza os método `equals` e `hashCode`, então tenha certeza de que eles estão implementados corretamente caso esteja utilizando um tipo de objeto criado por você. No exemplo foram utilizados objetos do tipo `String`, que já possuem essa implementação por padrão.

. É possível aplicar uma transformação nos elementos do Stream utilizando a operação `map`.
+
[source,java,indent=0]
.{java-package}/usingstreams/Streams_Map.java
----
include::{section-java-package}/usingstreams/Streams_Map.java[tag=code]
----
+
.Saída no console
[source,console]
----
0
2
4
6
----
+
Perceba que nesse caso os elementos sofreram uma transformação, que foi a multiplicação por 2, antes de serem impressos no console.

. É possível ordenar os elementos de um Stream utilizando a operação `sorted`.
+
[source,java,indent=0]
.{java-package}/usingstreams/Streams_Sorted.java
----
include::{section-java-package}/usingstreams/Streams_Sorted.java[tag=code]
----
+
.Saída no console
[source,console]
----
A
A
B
B
C
F
G
T
Y
----
+
Nesse caso todos os elementos são ordenados utilizando a ordem natural dos objetos `String`, pois eles já implementam a interface `Comparable`, sendo apresentados em ordem alfabética. Também existe uma versão do método `sort` que recebe como argumento uma implementação de `Comparator`, caso deseje ordenar de outra forma.

. É possível observar os elementos que passam por um _Stream_ utilizando a operação `peek`.
+
[source,java,indent=0]
.{java-package}/usingstreams/Streams_Peek.java
----
include::{section-java-package}/usingstreams/Streams_Peek.java[tag=code]
----
+
.Saída no console
[source,console]
----
Peek: G
ForEach: G
Peek: T
ForEach: T
Peek: Y
ForEach: Y
Peek: A
ForEach: A
----
+
A operação `peek` funciona apenas para observar o que está passando pelo _Stream_. Pode ser muito útil para realizar _debug_ ou _log_. Nesse caso os elementos estão sendo impressos duas vezes no console, pois o método `peek` e o `forEach` estão ambos realizando essa mesma ação. Porém, em aplicações reais, geralmente a operação final *não* será um `forEach`, de tal forma que fará sentido utilizar o `peek`.

. É possível transformar um _Stream_ de vários `Arrays` em um único _Stream_ *contínuo* utilizando o método `flatMap`.
+
[source,java,indent=0]
.{java-package}/usingstreams/Streams_FlatMap.java
----
include::{section-java-package}/usingstreams/Streams_FlatMap.java[tag=code]
----
+
.Saída no console
[source,console]
----
A
B
C
D
E
F
G
H
I
----
+
Perceba que nesse caso existem 3 `Arrays` distintos. Então cria-se um _Stream_ contendo 3 `Arrays`. O cenário comum seria um que cada elemento do _Stream_ fosse um objeto do tipo `Array`. Porém, ao utilizar a operação `flatMap`, é criado um _Stream_ para cada um desses `Arrays`, que são unidos e formam um único _Stream_ contínuo.

===== Operações finais

. É possível executar uma ação final para cada elemento do _Stream_ utilizando a operação `forEach`, conforme demonstrado nos exemplos anteriores.

. É possível recuperar o maior e o menor valor de um _Stream_ utilizando as operações finais `max` e `min`. E também é possível recuperar a quantidade de elementos de um _Stream_ utilizando a operação final `count`.
+
[source,java,indent=0]
.{java-package}/usingstreams/Streams_MaxMinCount.java
----
include::{section-java-package}/usingstreams/Streams_MaxMinCount.java[tag=code]
----
+
.Saída no console
[source,console]
----
Max: 9
Min: 1
Count: 8
----
+
No caso das operações `max` e `min`, é necessário passar como argumento qual comparador será utilizado. Como os números possuem uma ordem natural, isto é, implementam a interface `Comparable`, é possível utilizar um comparador que usa essa ordem natural, que é o `Comparator.naturalOrder()`. Caso seja um tipo de objeto que não possui uma ordem natural, é necessário passar como argumento uma outra implementação de `Comparator`.
+
As operações `max` e `min` retornam `Optional` pois, caso o _Stream_ esteja vazio, será um `Optional` vazio. Desde o Java 8, com a adição da classe `Optional`, isso tem sido preferido ao invés de retornar `null`, pois facilita a programação funcional. A operação `count` não precisa de um `Optional`, pois mesmo com um _Stream_ vazio irá retornar `0`.

. É possível pegar o primeiro elemento do Stream utilizando a operação final `findFirst`, ou um elemento qualquer com `findAny`.
+
[source,java,indent=0]
.{java-package}/usingstreams/Streams_FindFirstAny.java
----
include::{section-java-package}/usingstreams/Streams_FindFirstAny.java[tag=code]
----
+
.Saída no console
[source,console]
----
First: 7
Any: 7
----
+
Nesse caso, como o _Stream_ é sequencial e não paralelo, os dois resultados são iguais. Em _Streams_ paralelos, que serão apresentados em uma próxima seção, a operação `findAny` pode trazer resultados diferentes.
+
Assim como as operações `max` e `min` apresentadas anteriormente, `findAny` e `findFirst` retornam um `Optional` vazio caso o _Stream_ esteja vazio.

. É possível verificar se os elementos do _Stream_ atendem a alguma validação utilizando as operações finais `allMatch`, `anyMatch` e `noneMatch`.
+
[source,java,indent=0]
.{java-package}/usingstreams/Streams_Match.java
----
include::{section-java-package}/usingstreams/Streams_Match.java[tag=code]
----
+
.Saída no console
[source,console]
----
anyMatch: true
allMatch: false
noneMatch: false
----
+
Perceba que na primeira operação é verificado se *qualquer* elemento é maior do que 5. Na segunda, se *todos* os elementos são maiores do que 5. E na terceira, se *nenhum* elemento é maior do que 5.

. Não é possível chamar mais de uma operação final no mesmo _Stream_.
+
[source,java,indent=0]
.{java-package}/usingstreams/Streams_ReuseStream.java
----
include::{section-java-package}/usingstreams/Streams_ReuseStream.java[tag=code]
----
+
.Saída no console
[source,console]
----
7
2
1
Exception in thread "main" java.lang.IllegalStateException: stream has already been operated upon or closed
	at java.util.stream.AbstractPipeline.sourceStageSpliterator(AbstractPipeline.java:279)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at org.j6toj8.streams.usingstreams.Streams_ReuseStream.main(Streams_ReuseStream.java:11)
----

===== Pipeline

. É possível criar um _pipeline_ com várias operações em um único _Stream_.
+
[source,java,indent=0]
.{java-package}/usingstreams/Streams_Pipeline.java
----
include::{section-java-package}/usingstreams/Streams_Pipeline.java[tag=code]
----
+
.Saída no console
[source,console]
----
8
12
----
+
Para entender todas as operações realizadas nesse pipeline, é necessário entender passo a passo:
+
.. Foi criado um _Stream_ contendo todos os números de 0 a 9
.. Foi aplicado um filtro mantendo apenas os números pares: 0, 2, 4, 6 e 8
.. Foram ignorados os dois primeiros números, mantendo apenas: 4, 6 e 8
.. Foi limitado o processamento aos dois primeiros números: 4 e 6
.. Foi aplicada uma multiplicação por 2 em cada elemento, resultando em: 8 e 12
.. Os dois elementos foram impressos no console.

. O Stream só será criado de fato depois que alguma operação for executada nele.
+
[source,java,indent=0]
.{java-package}/usingstreams/Streams_ChangeBackingList.java
----
include::{section-java-package}/usingstreams/Streams_ChangeBackingList.java[tag=code]
----
+
.Saída no console
[source,console]
----
1
2
3
4
----
+
Perceba que, mesmo que o _Stream_ aparentemente tenha sido criado antes de adicionar o número 4 na lista, ele imprime esse número no console. Isso acontece porque o _Stream_ só foi criado de fato quando alguma operação foi feita nele, ou seja, quando o `forEach` foi invocado.

. É possível encadear a operação final do _Stream_ utilizando expressões lambda na classe `Optional`.
+
[source,java,indent=0]
.{java-package}/usingstreams/Streams_Optional.java
----
include::{section-java-package}/usingstreams/Streams_Optional.java[tag=code]
----
+
Perceba que o método `ifPresent` é da classe `Optional`, mesmo que no segundo exemplo possa parecer que ele faz parte do _Stream_. Em outras palavras, a operação final é `max`, e `ifPresent` é uma chamada em `Optional` e não mais no _Stream_.

===== Execução sob-demanda (_lazy_)

As operações intermediárias de um _Stream_ só são executadas quando necessário. Ou seja, mesmo que a operação esteja presente no _pipeline_, não é certeza de que ela será executada.

. Nada será feito se o _Stream_ não contiver uma operação final.
+
[source,java,indent=0]
.{java-package}/usingstreams/Streams_LazyNoFinal.java
----
include::{section-java-package}/usingstreams/Streams_LazyNoFinal.java[tag=code]
----
+
Nesse caso nada é impresso no console, pois *nenhuma* operação *final* foi aplicada no _Stream_. Ou seja, se não há nada consumindo o resultado desse _Stream_, o Java nem precisa executar o _pipeline_ criado.

. Outras operações intermediárias também não costumam ser executadas se não for necessário.
+
[source,java,indent=0]
.{java-package}/usingstreams/Streams_LazyMap.java
----
include::{section-java-package}/usingstreams/Streams_LazyMap.java[tag=code]
----
+
.Saída no console
[source,console]
----
Peek: 0
ForEach: 0
Peek: 1
ForEach: 1
Peek: 2
ForEach: 2
----
+
Perceba que, mesmo que a operação `peek` esteja antes da operação `limit`, ela não é executada para todos os elementos do `Stream`, apenas para aqueles que serão realmente utilizados.

==== Streams primitivos

Existem Streams específicos para alguns tipos primitivos como `double`, `int` e `long`. Eles possuem a vantagem de evitar o _Boxing_ e _Unboxing_, fornecendo alguns métodos mais especializados como demonstrado a seguir.

. É possível criar _Streams_ de tipos primitivos com as classes: `DoubleStream`, `IntStream` e `LongStream`.
+
[source,java,indent=0]
.{java-package}/usingstreams/primitives/Streams_Primitives.java
----
include::{section-java-package}/usingstreams/primitives/Streams_Primitives.java[tag=code]
----
+
.Saída no console
[source,console]
----
 DoubleStream
1.12.23.3
 IntStream
123
123
 LongStream
123
123
----

. É possível transformar um _Stream_ comum em um _Stream_ de primitivos utilizando as operações `mapTo*`.
+
[source,java,indent=0]
.{java-package}/usingstreams/primitives/Streams_MapTo.java
----
include::{section-java-package}/usingstreams/primitives/Streams_MapTo.java[tag=code]
----
+
.Saída no console
[source,console]
----
 Stream para IntStream
1234
 Stream para LongStream
1234
 Stream para DoubleStream
1.02.03.04.0
----

. É possível gerar Streams infinitos com o método `generate`. 
+
[source,java,indent=0]
.{java-package}/usingstreams/primitives/Streams_Generate.java
----
include::{section-java-package}/usingstreams/primitives/Streams_Generate.java[tag=code]
----
+
.Saída no console
[source,console]
----
 IntStream infinito de números aleatórios
2111846625
-1692075394
122693397

 DoubleStream infinito de números aleatórios
0.913037010633669
0.23669861350384735
0.32655918031847697
----
+
Nesse caso os _Streams_ são realmente infinitos. Só foram apresentados 3 números de cada pois existe a operação `limit`, caso contrário a execução do programa também seria sem fim.

. É possível utilizar a operação `rangeClosed` ao invés de `range`, deixando o código mais legível.
+
[source,java,indent=0]
.{java-package}/usingstreams/primitives/Streams_RangeClosed.java
----
include::{section-java-package}/usingstreams/primitives/Streams_RangeClosed.java[tag=code]
----
+
.Saída no console
[source,console]
----
123
1234
----
+
Perceba que na chamada utilizando `range`, o último número é exclusivo (não faz parte do _Stream_). No `rangeClosed`, tanto o primeiro quanto o último número são inclusivos (fazem parte do _Stream_).

. É possível gerar várias estatísticas de _Streams_ utilizando a operação `summaryStatistics`.
+
[source,java,indent=0]
.{java-package}/usingstreams/primitives/Streams_Statistics.java
----
include::{section-java-package}/usingstreams/primitives/Streams_Statistics.java[tag=code]
----
+
.Saída no console
[source,console]
----
Quantidade: 10
Maior: 9
Menor: 0
Soma: 45
Média: 4.5
----

==== _Reduce_ e _Collectors_

===== Reduce

_Reduce_ é uma das principais operações final que podem ser feitas em um _Stream_. _Reduce_ é uma operação que transforma os vários valores do _Stream_ em um único valor. Várias operações apresentadas anteriormente são um tipo de _Reduce_, como: `max`, `min` e `summaryStatistics`. Porém, nem sempre essas operações são suficientes, e por isso existem os métodos `reduce`. Eles permitem a implementação de operações personalizadas de _Reduce_.

. É possível criar uma operação de Reduce personalizada com o método `reduce()` que recebe 1 argumento.
+
[source,java,indent=0]
.{java-package}/usingstreams/primitives/Streams_Reduce.java
----
include::{section-java-package}/usingstreams/reduce/Streams_Reduce.java[tag=code]
----
+
.Saída no console
[source,console]
----
336
----
+
Nesse caso está sendo feito um _Reduce_ onde o resultado da operação anterior é passado para a próxima execução. Ou seja, primeiro é feita a multiplicação de 7 * 2, que é 14. Então a função é chamada novamente passando como argumento o resultado anterior (14) e o próximo número do Stream (3). O resultado é 42. Então a função é chamada uma última vez passando o resultado anterior (42) e o próximo número do Stream (8), o que dá o resultado de 336.

. É possível criar uma operação de _Reduce_ informando o valor de identidade.
+
[source,java,indent=0]
.{java-package}/usingstreams/primitives/Streams_ReduceIdentity.java
----
include::{section-java-package}/usingstreams/reduce/Streams_ReduceIdentity.java[tag=code]
----
+
.Saída no console
[source,console]
----
336
----
+
Nesse caso é possível informar o valor de identidade da função. O conceito de valor ou função de identidade são um pouco mais complexos, mas para a certificação apenas compreenda que ele representa um valor neutro. Ou seja, para a operação de multiplicação, o valor de identidade é 1, pois qualquer valor multiplicado por 1 resulta nele mesmo. Caso fosse uma operação de soma, o valor de identidade seria 0, pois qualquer valor somado a 0 resulta nele mesmo. 
+
Além disso, se o _Stream_ estiver vazio, o valor de identidade será retornado. Por isso, diferente do exemplo anterior, não é necessário retornar um `Optional`.

. É possível criar uma operação de _Reduce_ que pode ser executada em várias _Threads_ e depois combinada em um único valor.
+
[source,java,indent=0]
.{java-package}/usingstreams/primitives/Streams_ReduceCombiner.java
----
include::{section-java-package}/usingstreams/reduce/Streams_ReduceCombiner.java[tag=code]
----
+
.Saída no console
[source,console]
----
336
----
+
Nesse caso é passado um argumento adicional. Ele é a função de combinação. Essa função é utilizada quando o _Stream_ é paralelo, ou seja, utiliza mais de uma _thread_. Ela pega o valor retornado por 2 ou mais _threads_ e combina-os em um único valor. Em uma operação de multiplicação, a combinação também é uma multiplicação. Ou seja, caso a primeira _thread_ multiplique 7 e 2, resultando em 14, e a segunda multiplique 3 e 8, resultando em 24, a função de combinação só precisa multiplicar 14 por 24 para chegar ao valor de 336. Sendo assim, a função de combinação só faz sentido em um _Stream_ paralelo, que será apresentado no próximo capítulo.

===== Collect

A operação final `collect` também é um tipo de _Reduce_, porém é utilizada para objetos mutáveis. Ou seja, ao invés de utilizar a operação `reduce` com `String`, provavelmente seria mais eficiente utilizar a operação `collect` com a classe `StringBuilder`, para evitar a criação de vários objetos do tipo `String`. Como Java utiliza muitos objetos mutáveis, incluindo listas e mapas, geralmente a operação `collect` será mais eficiente do que a `reduce`.

Por serem muito comuns, existem vários _Collectors_ já implementados no Java, disponíveis na classe `Collectors`.

. É possível utilizar um `Collector` que junta várias `Strings`.
+
[source,java,indent=0]
.{java-package}/usingstreams/primitives/Streams_CollectorJoining.java
----
include::{section-java-package}/usingstreams/collect/Streams_CollectorJoining.java[tag=code]
----
+
.Saída no console
[source,console]
----
ABC
----

. É possível utilizar um `Collector` para representar cada elemento como um número e calcular a média entre eles.
+
[source,java,indent=0]
.{java-package}/usingstreams/primitives/Streams_CollectorAveragingInt.java
----
include::{section-java-package}/usingstreams/collect/Streams_CollectorAveragingInt.java[tag=code]
----
+
.Saída no console
[source,console]
----
6.2
----

. É possível utilizar um `Collector` para armazenar os elementos de um _Stream_ em uma nova coleção.
+
[source,java,indent=0]
.{java-package}/usingstreams/primitives/Streams_CollectorToCollect.java
----
include::{section-java-package}/usingstreams/collect/Streams_CollectorToCollect.java[tag=code]
----
+
.Saída no console
[source,console]
----
ArrayList: [1, 2, 3, 4]
HashSet: [1, 2, 3, 4]
LinkedList: [1, 2, 3, 4]
TreeSet: [1, 2, 3, 4]
----

. É possível utilizar um `Collector` para armazenar os elementos de um _Stream_ em um mapa.
+
[source,java,indent=0]
.{java-package}/usingstreams/primitives/Streams_CollectorToMap.java
----
include::{section-java-package}/usingstreams/collect/Streams_CollectorToMap.java[tag=code]
----
+
.Saída no console
[source,console]
----
{Roseany=7, Amélia=6, Rodrigo=7, Rinaldo=7, Luiz=4}
----

. Também é possível armazenar em um mapa para casos em que a chave for se repetir. O terceiro argumento do método `toMap` define a regra de mesclagem dos valores para chaves iguais.
+
[source,java,indent=0]
.{java-package}/usingstreams/primitives/Streams_CollectorToMapDuplicateKey.java
----
include::{section-java-package}/usingstreams/collect/Streams_CollectorToMapDuplicateKey.java[tag=code]
----
+
.Saída no console
[source,console]
----
{4=Luiz, 6=Amélia, 7=Rinaldo,Rodrigo,Roseany}
----

. É possível utilizar um `Collector` que cria um mapa agrupando valores que tem a mesma chave em uma lista.
+
[source,java,indent=0]
.{java-package}/usingstreams/primitives/Streams_CollectorGroupingBy.java
----
include::{section-java-package}/usingstreams/collect/Streams_CollectorGroupingBy.java[tag=code]
----
+
.Saída no console
[source,console]
----
{4=[Luiz], 6=[Amélia], 7=[Rinaldo, Rodrigo, Roseany]}
----

. Também é possível personalizar a maneira que o valores com chaves iguais serão combinados.
+
[source,java,indent=0]
.{java-package}/usingstreams/primitives/Streams_CollectorGroupingByDownstream.java
----
include::{section-java-package}/usingstreams/collect/Streams_CollectorGroupingByDownstream.java[tag=code]
----
+
.Saída no console
[source,console]
----
{4=Luiz, 6=Amélia, 7=Rinaldo,Rodrigo,Roseany}
----
+
Perceba que nesse caso os valores foram combinados utilizando outro _Collector_, que agrupou os nomes separando com vírgula.

. Também é possível definir qual tipo de mapa será utilizado para agrupar.
+
[source,java,indent=0]
.{java-package}/usingstreams/primitives/Streams_CollectorGroupingByMapFactory.java
----
include::{section-java-package}/usingstreams/collect/Streams_CollectorGroupingByMapFactory.java[tag=code]
----
+
.Saída no console
[source,console]
----
{4=Luiz, 6=Amélia, 7=Rinaldo,Rodrigo,Roseany}
----
+
Perceba que o resultado desse exemplo é idêntico ao anterior, porém foi passado um argumento a mais, que é o construtor do mapa que deveria ser utilizado.

. É possível utilizar um `Collector` que particiona valores em `True` ou `False` a partir de um função do tipo `Predicate`.
+
[source,java,indent=0]
.{java-package}/usingstreams/primitives/Streams_CollectorPartitioningBy.java
----
include::{section-java-package}/usingstreams/collect/Streams_CollectorPartitioningBy.java[tag=code]
----
+
.Saída no console
[source,console]
----
{false=[Luiz, Amélia], true=[Rinaldo, Rodrigo, Roseany]}
----
+
Perceba que nesse caso a regra de particionamento são os nomes que iniciam-se por `R`.

. Também é possível personalizar como a combinação dos valores particionados será feita.
+
[source,java,indent=0]
.{java-package}/usingstreams/primitives/Streams_CollectorPartitioningByDownstream.java
----
include::{section-java-package}/usingstreams/collect/Streams_CollectorPartitioningByDownstream.java[tag=code]
----
+
.Saída no console
[source,console]
----
{false=Luiz,Amélia, true=Rinaldo,Rodrigo,Roseany}
----
+
Perceba que nesse caso os valores foram combinados utilizando um outro `Collector`, que juntou os valores daquela mesma chave em uma única `String` separados por vírgula.

. É possível adicionar uma camada a mais de transformação ao utilizar um `Collector`, utilizando o método `mapping`.
+
[source,java,indent=0]
.{java-package}/usingstreams/primitives/Streams_CollectorMapping.java
----
include::{section-java-package}/usingstreams/collect/Streams_CollectorMapping.java[tag=code]
----
+
.Saída no console
[source,console]
----
{4=LUIZ, 6=AMÉLIA, 7=RINALDO,RODRIGO,ROSEANY}
----
+
Esse tipo de código, apesar de complexo, pode aparecer no exame de certificação. É recomendado praticar esses exemplos com uma IDE para entender de fato seus comportamentos. Acesse os códigos de exemplo deste livro para facilitar seus estudos.

.Referências
****

* Using Streams
+
Boyarsky, Jeanne; Selikoff, Scott. OCP: Oracle Certified Professional Java SE 8 Programmer II Study Guide (p. 185). Wiley. Edição do Kindle. 

* https://www.baeldung.com/java-8-streams[The Java 8 Stream API Tutorial.]

* https://docs.oracle.com/javase/tutorial/collections/streams/index.html[Lesson: Aggregate Operations.] The Java™ Tutorials.

* https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html[Package java.util.stream.] Java Plataform SE 8.

* https://docs.oracle.com/javase/8/docs/api/?java/util/stream/Stream.html[Interface Stream<T>.] Java Plataform SE 8.

****