:java-package: src/org/j6toj8/streams
:section-java-package: ../../../{java-package}

=== Using Streams

.Objective
--------------------------------------------------
Describe the Stream interface and pipelines; create a stream by using the Arrays.stream() and IntStream.range() methods; identify the lambda operations that are lazy.
--------------------------------------------------

One of the biggest things about Java 8 is _Streams_. A _Stream_ is a data stream. The data can be _Strings_, numbers, or any other object. This data goes through a series of operations, and the set of these operations is called _pipeline_. Lambda expressions almost always represent these operations. So it is essential to have mastered the whole chapter on *lambda*, as all those concepts will now be used to form a _Stream_.

From the following examples, this explanation will become more evident.

==== Creating a _Stream_

Typically, a _Stream_ is created from a dataset, such as a list or other collection type. The purpose of the certification makes explicit that it is necessary to know the `Arrays.stream()` and `IntStream.range()` methods. But in addition to these, some other common ways to create a _Stream_ will be presented.

. You can create a stream from an `Array` using the `Arrays.stream()` method.
+
[source,java,indent=0]
.{java-package}/usingstreams/Stream_ArraysStream.java
----
include::{section-java-package}/usingstreams/Streams_ArraysStream.java[tag=code]
----
+
.console output
[source,console]
----
A
B
C
----

. You can create a stream from a number range using the `IntStream.range()` method.
+
[source,java,indent=0]
.{java-package}/usingstreams/Stream_IntRangeStream.java
----
include::{section-java-package}/usingstreams/Streams_IntRangeStream.java[tag=code]
----
+
.console output
[source,console]
----
0
1
2
3
----
+
Note that the first argument (number 0) is inclusive, while the second argument (number 4) is exclusive. Therefore the console output has only the numbers 0 to 3.

. You can create a _Stream_ from a list.
+
[source,java,indent=0]
.{java-package}/usingstreams/Streams_ListStream.java
----
include::{section-java-package}/usingstreams/Streams_ListStream.java[tag=code]
----
+
.console output
[source,console]
----
A
B
C
----

. You can create a _Stream_ from specific elements using the `Stream.of` method.
+
[source,java,indent=0]
.{java-package}/usingstreams/Streams_Of.java
----
include::{section-java-package}/usingstreams/Streams_Of.java[tag=code]
----
+
.console output
[source,console]
----
A
B
1
2
3.0
4.0
----
+
In this case a _Stream_ was created that contains: `String`, `Character`, `Integer`,`Long`, `Float` and `Double`.

==== _Streams_ operations

Operations done on a _Stream_ will form its _pipeline_. Operations that can be performed on a Stream are divided into *Intermediate Operations* and *Final Operations*. _Stream_ can contain numerous intermediate operations, but only one final operation. In the previous examples the only operation used was `forEach`, which is a final operation. Other operations will be presented below.

===== Intermediate Operations

. You can ignore elements of a stream with the `skip` operation.
+
[source,java,indent=0]
.{java-package}/usingstreams/Stream_Skip.java
----
include::{section-java-package}/usingstreams/Streams_Skip.java[tag=code]
----
+
.console output
[source,console]
----
2
3
----
+
Note that in this case elements 0 and 1 were ignored, as they are the first two elements of _Stream_. This was due to the existence of the `skip` operation.

. You can limit the amount of elements that will be processed using the `limit` operation.
+
[source,java,indent=0]
.{java-package}/usingstreams/Streams_Limit.java
----
include::{section-java-package}/usingstreams/Streams_Limit.java[tag=code]
----
+
.console output
[source,console]
----
0
1
----
+
In this case only the first 2 elements were printed on the console because the `limit` operation limited the amount of elements to be processed.

. You can filter `Stream` elements using the `filter` operation.
+
[source,java,indent=0]
.{java-package}/usingstreams/Streams_Filter.java
----
include::{section-java-package}/usingstreams/Streams_Filter.java[tag=code]
----
+
.console output
[source,console]
----
0
2
----
+
In this case only the even elements were printed, as the `filter` operation limited to those that have remainder division by 2 equal to 0.

. You can filter out repeated _Stream_ elements using the `distinct` operation.
+
[source,java,indent=0]
.{java-package}/usingstreams/Streams_Distinct.java
----
include::{section-java-package}/usingstreams/Streams_Distinct.java[tag=code]
----
+
.console output
[source,console]
----
A
B
C
F
----
+
Note that in this case the repeated stream elements (`"A"` and `"B"`) were ignored and only presented once.
+
The `distinct` operation uses the `equals` and `hashCode` methods, so make sure they are implemented correctly if you are using an object type that you create. In the example were used objects of type `String`, which already have this implementation by default.

. You can apply a transformation to Stream elements using the `map` operation.
+
[source,java,indent=0]
.{java-package}/usingstreams/Streams_Map.java
----
include::{section-java-package}/usingstreams/Streams_Map.java[tag=code]
----
+
.console output
[source,console]
----
0
2
4
6
----
+
Note that in this case, the elements underwent a transformation, which was multiplication by 2 before being printed on the console.

. You can sort the elements of a Stream using the `sorted` operation.
+
[source,java,indent=0]
.{java-package}/usingstreams/Streams_Sorted.java
----
include::{section-java-package}/usingstreams/Streams_Sorted.java[tag=code]
----
+
.console output
[source,console]
----
A
A
B
B
C
F
G
T
Y
----
+
In this case, all elements are sorted using the natural order of the `String` objects, as they already implement the `Comparable` interface and are presented in alphabetical order. There is also a version of the `sort` method that takes as its argument an implementation of `Comparator` if you want to sort it otherwise.

. You can observe the elements passing through a _Stream_ using the `peek` operation.
+
[source,java,indent=0]
.{java-package}/usingstreams/Streams_Peek.java
----
include::{section-java-package}/usingstreams/Streams_Peek.java[tag=code]
----
+
.console output
[source,console]
----
Peek: G
ForEach: G
Peek: T
ForEach: T
Peek: Y
ForEach: Y
Peek: A
ForEach: A
----
+
The `peek` operation works only to observe what is going through _Stream_. It can be very useful for performing _debug_ or _log_. In this case, the elements are being printed twice on the console because the `peek` and `forEach` methods are both doing the same action. However, in real applications, usually the final operation *will not* be a `forEach`, so it will make sense to use `peek`.

. You can transform a _Stream_ from multiple `Arrays` into a single *continuous* _Stream_ using the `flatMap` method.
+
[source,java,indent=0]
.{java-package}/usingstreams/Streams_FlatMap.java
----
include::{section-java-package}/usingstreams/Streams_FlatMap.java[tag=code]
----
+
.console output
[source,console]
----
A
B
C
D
E
F
G
H
I
----
+
Note that in this case there are 3 distinct `Arrays`. Then create a _Stream_ containing 3 `Arrays`. The typical scenario would be that each _Stream_ element was an `Array` object. However, using the `flatMap` operation, a _Stream_ is created for each of these `Arrays`, which are joined and form a single continuous _Stream_.

===== Final operations

. You can perform a final action for each _Stream_ element using the `forEach` operation, as shown in the previous examples.

. You can retrieve the largest and smallest value of a _Stream_ using the `max` and `min` final operations. And it is also possible to retrieve the number of elements of a _Stream_ using the `count` final operation.
+
[source,java,indent=0]
.{java-package}/usingstreams/Streams_MaxMinCount.java
----
include::{section-java-package}/usingstreams/Streams_MaxMinCount.java[tag=code]
----
+
.console output
[source,console]
----
Max: 9
Min: 1
Count: 8
----
+
For `max` and `min` operations, it is necessary to pass as an argument which comparator will be used. Since numbers have a natural order, that is, they implement the `Comparable` interface, it is possible to use a comparator that uses that natural order, which is `Comparator.naturalOrder()`. If it is a type of object that does not have a natural order, it is necessary to pass another implementation of `Comparator` as an argument.
+
The `max` and `min` operations return `Optional` because if _Stream_ is empty it will be empty `Optional`. Since Java 8, with the addition of the `Optional` class, this has been preferred over returning `null` as it facilitates functional programming. The `count` operation does not need an `Optional`, because even with an empty _Stream_ will return `0`.

. You can get the first element of the Stream using the final `findFirst` operation, or any element with `findAny`.
+
[source,java,indent=0]
.{java-package}/usingstreams/Streams_FindFirstAny.java
----
include::{section-java-package}/usingstreams/Streams_FindFirstAny.java[tag=code]
----
+
.console output
[source,console]
----
First: 7
Any: 7
----
+
In this case, because _Stream_ is sequential and not parallel, both results are equal. In parallel _Streams_, which will be presented in another section, the `findAny` operation may yield different results.
+
Like the `max` and `min` operations presented earlier, `findAny` and `findFirst` return an empty `Optional` if _Stream_ is empty.

. You can verify that _Stream_ elements meet some validation by using the `allMatch`, `anyMatch`, and `noneMatch` final operations.
+
[source,java,indent=0]
.{java-package}/usingstreams/Streams_Match.java
----
include::{section-java-package}/usingstreams/Streams_Match.java[tag=code]
----
+
.console output
[source,console]
----
anyMatch: true
allMatch: false
noneMatch: false
----
+
Note that in the first operation it is checked that *any* element is greater than 5. In the second, if *all* elements are greater than 5. And in the third, if *no* element is greater than 5.

. You cannot call more than one final operation on the same _Stream_.
+
[source,java,indent=0]
.{java-package}/usingstreams/Streams_ReuseStream.java
----
include::{section-java-package}/usingstreams/Streams_ReuseStream.java[tag=code]
----
+
.console output
[source,console]
----
7
2
1
Exception in thread "main" java.lang.IllegalStateException: stream has already been operated upon or closed
	at java.util.stream.AbstractPipeline.sourceStageSpliterator(AbstractPipeline.java:279)
	at java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)
	at org.j6toj8.streams.usingstreams.Streams_ReuseStream.main(Streams_ReuseStream.java:11)
----

===== Pipeline

. You can create a _pipeline_ with multiple operations in a single _Stream_.
+
[source,java,indent=0]
.{java-package}/usingstreams/Streams_Pipeline.java
----
include::{section-java-package}/usingstreams/Streams_Pipeline.java[tag=code]
----
+
.console output
[source,console]
----
8
12
----
+
To understand all operations performed in this pipeline, you must understand step by step:
+
.. A _Stream_ was created containing all numbers from 0 to 9.
.. A filter was applied keeping only the even numbers: 0, 2, 4, 6 and 8.
.. The first two numbers were ignored, keeping only: 4, 6 and 8.
.. Processing was limited to the first two numbers: 4 and 6.
.. Multiplication by 2 was applied to each element, resulting in 8 and 12.
.. Both elements were printed on the console.

. The Stream will only actually be created after any operation has been performed on it.
+
[source,java,indent=0]
.{java-package}/usingstreams/Streams_ChangeBackingList.java
----
include::{section-java-package}/usingstreams/Streams_ChangeBackingList.java[tag=code]
----
+
.console output
[source,console]
----
1
2
3
4
----
+
Note that even though _Stream_ was apparently created before adding number 4 to the list, it prints this number on the console. This is because _Stream_ was only created when some operation was done on it, i.e., when `forEach` was invoked.

. You can chain the final _Stream_ operation using lambda expressions in the `Optional` class.
+
[source,java,indent=0]
.{java-package}/usingstreams/Streams_Optional.java
----
include::{section-java-package}/usingstreams/Streams_Optional.java[tag=code]
----
+
Note that the `ifPresent` method is from the `Optional` class, even though in the second example, it might look like it is part of _Stream_. In other words, the final operation is `max`, and `ifPresent` is a called in `Optional` and no longer in _Stream_

===== Lazy Invocation

Intermediate operations of a _Stream_ are only performed when necessary. That is, even if the operation is present in _pipeline_, it is not certain that it will be executed.

. Nothing will be done if _Stream_ does not contain a final operation.
+
[source,java,indent=0]
.{java-package}/usingstreams/Streams_LazyNoFinal.java
----
include::{section-java-package}/usingstreams/Streams_LazyNoFinal.java[tag=code]
----
+
In this case nothing is printed on the console because *no final operations* were applied to _Stream_. That is, if there is nothing consuming the result of this _Stream_, Java does not have to execute the created _pipeline_.

. Other intermediate operations are also not usually performed if not required.
+
[source,java,indent=0]
.{java-package}/usingstreams/Streams_LazyMap.java
----
include::{section-java-package}/usingstreams/Streams_LazyMap.java[tag=code]
----
+
.console output
[source,console]
----
Peek: 0
ForEach: 0
Peek: 1
ForEach: 1
Peek: 2
ForEach: 2
----
+
Note that even if the `peek` operation is before the `limit` operation, it is not performed for all `Stream` elements, only for those that will actually be used.

==== Primitive Streams

There are specific streams for some primitive types like `double`, `int` and `long`. They have the advantage of avoiding _Boxing_ and _Unboxing_ by providing some more specialized methods as shown below.

. You can create _Streams_ of primitive types with the classes: `DoubleStream`, `IntStream` and `LongStream`.
+
[source,java,indent=0]
.{java-package}/usingstreams/primitives/Streams_Primitives.java
----
include::{section-java-package}/usingstreams/primitives/Streams_Primitives.java[tag=code]
----
+
.console output
[source,console]
----
 DoubleStream
1.12.23.3
 IntStream
123
123
 LongStream
123
123
----

. You can transform a common _Stream_ into a _Stream_ of primitives using `mapTo*` operations.
+
[source,java,indent=0]
.{java-package}/usingstreams/primitives/Streams_MapTo.java
----
include::{section-java-package}/usingstreams/primitives/Streams_MapTo.java[tag=code]
----
+
.console output
[source,console]
----
 Stream to IntStream
1234
 Stream to LongStream
1234
 Stream to DoubleStream
1.02.03.04.0
----

. You can generate infinite Streams with the `generate` method.
+
[source,java,indent=0]
.{java-package}/usingstreams/primitives/Streams_Generate.java
----
include::{section-java-package}/usingstreams/primitives/Streams_Generate.java[tag=code]
----
+
.console output
[source,console]
----
 infinity IntStream of random numbers
2111846625
-1692075394
122693397

 infinity DoubleStream of random numbers
0.913037010633669
0.23669861350384735
0.32655918031847697
----
+
In this case the _Streams_ are really infinite. Only 3 numbers of each were displayed as there is the `limit` operation, otherwise program execution would also be endless.

. You can use the `rangeClosed` operation instead of `range`, making the code more readable.
+
[source,java,indent=0]
.{java-package}/usingstreams/primitives/Streams_RangeClosed.java
----
include::{section-java-package}/usingstreams/primitives/Streams_RangeClosed.java[tag=code]
----
+
.console output
[source,console]
----
123
1234
----
+
Note that in the call using `range`, the last number is unique (not part of _Stream_). In `rangeClosed`, both the first and last numbers are inclusive (they are part of _Stream_).

. You can generate various _Streams_ statistics using the `summaryStatistics` operation.
+
[source,java,indent=0]
.{java-package}/usingstreams/primitives/Streams_Statistics.java
----
include::{section-java-package}/usingstreams/primitives/Streams_Statistics.java[tag=code]
----
+
.console output
[source,console]
----
Count: 10
Max: 9
Min: 0
Sum: 45
Average: 4.5
----

==== _Reduce_ and _Collectors_

===== Reduce

_Reduce_ is one of the main final operations that can be done on a _Stream_. It is an operation that transforms multiple _Stream_ values into a single value. Several operations previously presented are a type of _Reduce_, such as: `max`, `min` and `summaryStatistics`. However, these operations are not always sufficient, so there are `reduce` methods. They allow the implementation of _Reduce_ custom operations.

. You can create a custom Reduce operation with the `reduce()` method that takes 1 argument.
+
[source,java,indent=0]
.{java-package}/usingstreams/primitives/Streams_Reduce.java
----
include::{section-java-package}/usingstreams/reduce/Streams_Reduce.java[tag=code]
----
+
.console output
[source,console]
----
336
----
+
In this case a _Reduce_ is being made where the result of the previous operation is passed to the next execution. That is, first we multiply 7 * 2, which is 14. Then the function is called again passing as argument the previous result (14) and the next Stream number (3). The result is 42. Then the function is called one last time passing the previous result (42) and the next Stream number (8), which gives the result of 336.

. You can create a _Reduce_ operation by entering the identity value.
+
[source,java,indent=0]
.{java-package}/usingstreams/primitives/Streams_ReduceIdentity.java
----
include::{section-java-package}/usingstreams/reduce/Streams_ReduceIdentity.java[tag=code]
----
+
.console output
[source,console]
----
336
----
+
In this case you can enter the identity value of the role. The concept of value or identity function is a bit more complex, but for certification just understand that it represents a neutral value. That is, for the multiplication operation, the identity value is 1, because any value multiplied by 1 results in itself. If it were a sum operation, the identity value would be 0 because any value added to 0 results in itself.
+
Also, if _Stream_ is empty, the identity value is returned. Therefore, unlike the previous example, it is not necessary to return an `Optional`.

. You can create a _Reduce_ operation that can be performed on multiple _Threads_ and then combined into a single value.
+
[source,java,indent=0]
.{java-package}/usingstreams/primitives/Streams_ReduceCombiner.java
----
include::{section-java-package}/usingstreams/reduce/Streams_ReduceCombiner.java[tag=code]
----
+
.console output
[source,console]
----
336
----
+
In this case, an additional argument is passed. It is the combination function. This function is used when _Stream_ is parallel, in other words, it uses more than one _thread_. It takes the value returned by 2 or more _threads_ and combines them into a single value. In a multiplication operation, the combination is also a multiplication. That is, if the first _thread_ multiplies 7 and 2, resulting in 14, and the second _thread_ multiplies 3 and 8, resulting in 24, the combination function only needs to multiply 14 by 24 to reach the value of 336. Thus, the function combination only makes sense in a parallel _Stream_, which will be presented in the next chapter.

===== Collect

The `collect` final operation is also a type of _Reduce_ but is used for mutable objects. That is, instead of using the `reduce` operation with `String`, it would probably be more efficient to use the `collect` operation with the `StringBuilder` class to avoid creating multiple `String` objects. Because Java uses many mutable objects, including lists and maps, generally the `collect` operation will be more efficient than `reduce`.

Because they are very common, there are several _Collectors_ already implemented in Java, available in the `Collectors` class.

. It is possible to use a `Collector` that joins several `Strings`.
+
[source,java,indent=0]
.{java-package}/usingstreams/primitives/Streams_CollectorJoining.java
----
include::{section-java-package}/usingstreams/collect/Streams_CollectorJoining.java[tag=code]
----
+
.console output
[source,console]
----
ABC
----

. You can use a `Collector` to represent each element as a number and average them.
+
[source,java,indent=0]
.{java-package}/usingstreams/primitives/Streams_CollectorAveragingInt.java
----
include::{section-java-package}/usingstreams/collect/Streams_CollectorAveragingInt.java[tag=code]
----
+
.console output
[source,console]
----
6.2
----

. You can use a `Collector` to store the elements of a _Stream_ in a new collection.
+
[source,java,indent=0]
.{java-package}/usingstreams/primitives/Streams_CollectorToCollect.java
----
include::{section-java-package}/usingstreams/collect/Streams_CollectorToCollect.java[tag=code]
----
+
.console output
[source,console]
----
ArrayList: [1, 2, 3, 4]
HashSet: [1, 2, 3, 4]
LinkedList: [1, 2, 3, 4]
TreeSet: [1, 2, 3, 4]
----

. You can use a `Collector` to store the elements of a _Stream_ in a map.
+
[source,java,indent=0]
.{java-package}/usingstreams/primitives/Streams_CollectorToMap.java
----
include::{section-java-package}/usingstreams/collect/Streams_CollectorToMap.java[tag=code]
----
+
.console output
[source,console]
----
{Roseany=7, Amélia=6, Rodrigo=7, Rinaldo=7, Luiz=4}
----

. It is also possible to store in a map in cases where the key will be repeated. The third argument of the `toMap` method defines the rule to merge values to equal keys.
+
[source,java,indent=0]
.{java-package}/usingstreams/primitives/Streams_CollectorToMapDuplicateKey.java
----
include::{section-java-package}/usingstreams/collect/Streams_CollectorToMapDuplicateKey.java[tag=code]
----
+
.console output
[source,console]
----
{4=Luiz, 6=Amélia, 7=Rinaldo,Rodrigo,Roseany}
----

. You can use a `Collector` that creates a map by grouping values that have the same key in a list.
+
[source,java,indent=0]
.{java-package}/usingstreams/primitives/Streams_CollectorGroupingBy.java
----
include::{section-java-package}/usingstreams/collect/Streams_CollectorGroupingBy.java[tag=code]
----
+
.console output
[source,console]
----
{4=[Luiz], 6=[Amélia], 7=[Rinaldo, Rodrigo, Roseany]}
----

. You can also customize the way that values with equal keys will be combined.
+
[source,java,indent=0]
.{java-package}/usingstreams/primitives/Streams_CollectorGroupingByDownstream.java
----
include::{section-java-package}/usingstreams/collect/Streams_CollectorGroupingByDownstream.java[tag=code]
----
+
.console output
[source,console]
----
{4=Luiz, 6=Amélia, 7=Rinaldo,Rodrigo,Roseany}
----
+
Note that in this case the values were combined using another _Collector_, which grouped the names separating with commas.

. You can also define which type of map will be used for grouping.
+
[source,java,indent=0]
.{java-package}/usingstreams/primitives/Streams_CollectorGroupingByMapFactory.java
----
include::{section-java-package}/usingstreams/collect/Streams_CollectorGroupingByMapFactory.java[tag=code]
----
+
.console output
[source,console]
----
{4=Luiz, 6=Amélia, 7=Rinaldo,Rodrigo,Roseany}
----
+
Note that the result of this example is identical to the previous one, but one more argument was passed, which is the map constructor that should be used.

. You can use a `Collector` that partitions values in `True` or `False` from a function of type `Predicate`.
+
[source,java,indent=0]
.{java-package}/usingstreams/primitives/Streams_CollectorPartitioningBy.java
----
include::{section-java-package}/usingstreams/collect/Streams_CollectorPartitioningBy.java[tag=code]
----
+
.console output
[source,console]
----
{false=[Luiz, Amélia], true=[Rinaldo, Rodrigo, Roseany]}
----
+
Note that in this case the partitioning rule is the names beginning with `R`.

. You can also customize how the combination of partitioned values will be done.
+
[source,java,indent=0]
.{java-package}/usingstreams/primitives/Streams_CollectorPartitioningByDownstream.java
----
include::{section-java-package}/usingstreams/collect/Streams_CollectorPartitioningByDownstream.java[tag=code]
----
+
.console output
[source,console]
----
{false=Luiz,Amélia, true=Rinaldo,Rodrigo,Roseany}
----
+
Note that in this case the values were combined using another `Collector`, which merged the values of that same key into a single `String` separated by commas.

. You can add one more layer of transformation using a `Collector` using the `mapping` method.
+
[source,java,indent=0]
.{java-package}/usingstreams/primitives/Streams_CollectorMapping.java
----
include::{section-java-package}/usingstreams/collect/Streams_CollectorMapping.java[tag=code]
----
+
.console output
[source,console]
----
{4=LUIZ, 6=AMÉLIA, 7=RINALDO,RODRIGO,ROSEANY}
----
+
This type of code, while complex, may appear on the certification exam. It is recommended to practice these examples with an IDE to really understand their behaviors. Access the sample codes in this book to facilitate your study.

.References
****

* Using Streams
+
Boyarsky, Jeanne; Selikoff, Scott. OCP: Oracle Certified Professional Java SE 8 Programmer II Study Guide (p. 185). Wiley. Kindle Edition.

* https://www.baeldung.com/java-8-streams[The Java 8 Stream API Tutorial.]

* https://docs.oracle.com/javase/tutorial/collections/streams/index.html[Lesson: Aggregate Operations.] The Java™ Tutorials.

* https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html[Package java.util.stream.] Java Plataform SE 8.

* https://docs.oracle.com/javase/8/docs/api/?java/util/stream/Stream.html[Interface Stream<T>.] Java Plataform SE 8.

****
