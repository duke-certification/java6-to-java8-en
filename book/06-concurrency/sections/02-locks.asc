:java-package: src/org/j6toj8/concurrency
:section-java-package: ../../../{java-package}

=== Locks

.Objetivo
--------------------------------------------------
Use Lock, ReadWriteLock, and ReentrantLock classes in the java.util.concurrent.locks and java.util.concurrent.atomic packages to support lock-free thread-safe programming on single variables
-
Usar classes dos tipos Lock, ReadWriteLock, e ReentrantLock dos pacotes java.util.concurrent.locks e java.util.concurrent.atomic para suportar programação sem bloqueio e multi-thread em variáveis únicas
--------------------------------------------------

As classes e interfaces `Lock`, `ReadWriteLock` e `ReentrantLock` permitem obter diferentes tipos de _Locks_ (em tradução livre: bloqueios ou travas). Esses _Locks_ são utilizados para que um número limitado de _threads_ tenham acesso a mesma variável em um determinado momento, ou para que apenas uma delas possa alterar seu valor.

Nesta seção serão apresentados exemplos utilizando essas classes e interfaces. Assim como em outras seções deste capítulo, os exemplos podem ser grandes quando for necessário a criação de __threads__. Dedique um tempo maior para entendê-los completamente.

==== Reentrant Lock

. É possível adquirir um _Lock_ utilizando a classe ``ReentrantLock``.
+
[source,java,indent=0]
.{java-package}/locks/Locks_ReentrantLock.java
----
include::{section-java-package}/locks/Locks_ReentrantLock.java[tag=code]
----
+
.Saída no console
[source,console]
----
ABC
----
+
Perceba que o _lock_ é removido dentro de um bloco ``finally``. Isso garante que uma _thread_ não irá ficar com um _lock_ indeterminadamente.

. Chamar o método unlock sem ter obtido um lock anteriormente irá lançar uma exceção.
+
[source,java,indent=0]
.{java-package}/locks/Locks_UnlockWithoutLock.java
----
include::{section-java-package}/locks/Locks_UnlockWithoutLock.java[tag=code]
----
+
.Saída no console
[source,console]
----
ABC
Exception in thread "main" java.lang.IllegalMonitorStateException
	at java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(ReentrantLock.java:151)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer.release(AbstractQueuedSynchronizer.java:1261)
	at java.util.concurrent.locks.ReentrantLock.unlock(ReentrantLock.java:457)
	at org.j6toj8.concurrency.locks.Locks_UnlockWithoutLock.main(Locks_UnlockWithoutLock.java:14)
----

. É possível tentar obter um _lock_ imediatamente utilizando o método ``tryLock``.
+
[source,java,indent=0]
.{java-package}/locks/Locks_TryLock.java
----
include::{section-java-package}/locks/Locks_TryLock.java[tag=code]
----
+
.Saída no console
[source,console]
----
ABC
----

. Também é possível tentar obter um _lock_ definindo um tempo de espera máximo.
+
[source,java,indent=0]
.{java-package}/locks/Locks_TryLockTimeout.java
----
include::{section-java-package}/locks/Locks_TryLockTimeout.java[tag=code]
----
+
.Saída no console
[source,console]
----
ABC
----

. Em um cenário com várias __threads__, é possível que apenas uma delas consiga obter um __lock__.
+
[source,java,indent=0]
.{java-package}/locks/Locks_TryLockMultithread.java
----
include::{section-java-package}/locks/Locks_TryLockMultithread.java[tag=code]
----
+
.Saída no console
[source,console]
----
Thread-0: Conseguiu o Lock
Thread-2: Conseguiu o Lock
----
+
Nesta execução com 3 __threads__, apenas duas conseguiram obter o _lock_ imediatamente e imprimir no console. Porém o resultado é imprevisível. Podem existir execuções onde todas obterão o __lock__, e outras em que apenas uma thread conseguirá.

. Uma _thread_ pode obter mais de um _lock_ no mesmo objeto ``Lock``, mas deve desfazer o _lock_ múltiplas vezes também.
+
[source,java,indent=0]
.{java-package}/locks/Locks_LockTwice.java
----
include::{section-java-package}/locks/Locks_LockTwice.java[tag=code]
----
+
.Saída no console
[source,console]
----
ABC
----
+
Como a _thread_ chamou `lock` duas vezes, caso ela não houvesse chamado `unlock` duas vezes, outra _thread_ não seria capaz de obter o __lock__.

. É possível garantir uma distribuição mais "justa" de _locks_ passando `true` como argumento para o ``ReentrantLock``.
+
[source,java,indent=0]
.{java-package}/locks/Locks_Fair.java
----
include::{section-java-package}/locks/Locks_Fair.java[tag=code]
----
+
Ao passar o argumento ``true``, quando várias _threads_ estiverem esperando pelo mesmo __lock__, ele será dado àquela _thread_ que está aguardando a mais tempo.

==== ReentrantReadWriteLock

. É possível separar _locks_ de leitura e escrita utilizando a classe ``ReadWriteLock``. _Locks_ de leitura podem ser obtidos por múltiplas _threads_, porém _locks_ de escrita não.
+
[source,java,indent=0]
.{java-package}/locks/Locks_ReadWriteLock.java
----
include::{section-java-package}/locks/Locks_ReadWriteLock.java[tag=code]
----
+
.Saída no console
[source,console]
----
Thread-0: Conseguiu o Lock de leitura
Thread-2: Conseguiu o Lock de leitura
Thread-1: Conseguiu o Lock de leitura
Thread-1: Conseguiu o Lock de escrita
----
+
Perceba que todas as _threads_ conseguiram obter o _lock_ de leitura, porém apenas uma conseguiu obter o _lock_ de escrita.

. Se uma _thread_ já possuir o _lock_ de escrita, outras não conseguirão obter nem mesmo o _lock_ de leitura.
+
[source,java,indent=0]
.{java-package}/locks/Locks_ReadWriteLockInverted.java
----
include::{section-java-package}/locks/Locks_ReadWriteLockInverted.java[tag=code]
----
+
.Saída no console
[source,console]
----
Thread-0: Conseguiu o Lock de escrita
Thread-0: Conseguiu o Lock de leitura
----
+
Perceba que neste exemplo o _lock_ de escrita está sendo obtido *antes* do de leitura, de tal forma que apenas a primeira _thread_ que foi executada conseguiu obter os dois __locks__.

****

* Applying Locks
+
Boyarsky, Jeanne; Selikoff, Scott. OCP: Oracle Certified Professional Java SE 8 Programmer II Study Guide (p. 607). Wiley. Edição do Kindle. 

* https://www.baeldung.com/java-concurrent-locks[Guide to java.util.concurrent.Locks.]

* https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/locks/package-summary.html[Package java.util.concurrent.locks.] Java Plataform SE 8.

****