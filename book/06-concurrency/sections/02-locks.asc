:java-package: src/org/j6toj8/concurrency
:section-java-package: ../../../{java-package}

=== Locks

.Objective
--------------------------------------------------
Use Lock, ReadWriteLock, and ReentrantLock classes in the java.util.concurrent.locks and java.util.concurrent.atomic packages to support lock-free thread-safe programming on single variables
--------------------------------------------------

The `Lock`, `ReadWriteLock` and `ReentrantLock` classes and interfaces allow for different types of _Locks_. These _Locks_ are used so that a limited number of _threads_ have access to the same variable at any given time, or so that only one of them can change its value.

In this section examples will be presented using these classes and interfaces. As in other sections of this chapter, examples can be large when creating _threads_ is required. Take more time to fully understand them.

==== Reentrant Lock

. You can get a _Lock_ using the `ReentrantLock` class.
+
[source,java,indent=0]
.{java-package}/locks/Locks_ReentrantLock.java
----
include::{section-java-package}/locks/Locks_ReentrantLock.java[tag=code]
----
+
.console output
[source,console]
----
ABC
----
+
Note that _lock_ is removed within a `finally` block. This ensures that a _thread_ will not have an _lock_ indefinitely.

. Calling the unlock method without previously locking will throw an exception.
+
[source,java,indent=0]
.{java-package}/locks/Locks_UnlockWithoutLock.java
----
include::{section-java-package}/locks/Locks_UnlockWithoutLock.java[tag=code]
----
+
.console output
[source,console]
----
ABC
Exception in thread "main" java.lang.IllegalMonitorStateException
	at java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(ReentrantLock.java:151)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer.release(AbstractQueuedSynchronizer.java:1261)
	at java.util.concurrent.locks.ReentrantLock.unlock(ReentrantLock.java:457)
	at org.j6toj8.concurrency.locks.Locks_UnlockWithoutLock.main(Locks_UnlockWithoutLock.java:14)
----

. You can try to get a _lock_ immediately using the `tryLock` method.
+
[source,java,indent=0]
.{java-package}/locks/Locks_TryLock.java
----
include::{section-java-package}/locks/Locks_TryLock.java[tag=code]
----
+
.console output
[source,console]
----
ABC
----

. You can also try to get a _lock_ by setting a maximum wait time.
+
[source,java,indent=0]
.{java-package}/locks/Locks_TryLockTimeout.java
----
include::{section-java-package}/locks/Locks_TryLockTimeout.java[tag=code]
----
+
.console output
[source,console]
----
ABC
----

. In a scenario with multiple _threads_, only one of them may be able to obtain a _lock_.
+
[source,java,indent=0]
.{java-package}/locks/Locks_TryLockMultithread.java
----
include::{section-java-package}/locks/Locks_TryLockMultithread.java[tag=code]
----
+
.console output
[source,console]
----
Thread-0: Got the Lock
Thread-2: Got the Lock
----
+
In this 3 _threads_ run, only two were able to get _lock_ immediately and print to the console. But the result is unpredictable. There may be executions where all will get the _lock_, and others where only one thread will succeed.

. A _thread_ can get more than one _lock_ on the same `Lock` object, but must undo _lock_ multiple times as well.
+
[source,java,indent=0]
.{java-package}/locks/Locks_LockTwice.java
----
include::{section-java-package}/locks/Locks_LockTwice.java[tag=code]
----
+
.console output
[source,console]
----
ABC
----
+
Since the _thread_ called the `lock` twice, if it had not called `unlock` twice, another _thread_ would not be able to get the _lock_.

. You can ensure a more "fair" distribution of _locks_ by passing `true` as an argument to `ReentrantLock`.
+
[source,java,indent=0]
.{java-package}/locks/Locks_Fair.java
----
include::{section-java-package}/locks/Locks_Fair.java[tag=code]
----
+
When passing the `true` argument, when multiple _threads_ are waiting for the same _lock_, it will be given to that _thread_ that has been waiting the longest.

==== ReentrantReadWriteLock

. You can separate read and write _locks_ using the `ReadWriteLock` class. Read _Locks_ can be obtained by multiple _threads_, but write _locks_ cannot.
+
[source,java,indent=0]
.{java-package}/locks/Locks_ReadWriteLock.java
----
include::{section-java-package}/locks/Locks_ReadWriteLock.java[tag=code]
----
+
.console output
[source,console]
----
Thread-0: Got the read Lock
Thread-2: Got the read Lock
Thread-1: Got the read Lock
Thread-1: Got the write Lock
----
+
Note that all _threads_ were able to get read _lock_, but only one could get write _lock_.

. If one _thread_ already has write _lock_, others will not be able to get even read _lock_.
+
[source,java,indent=0]
.{java-package}/locks/Locks_ReadWriteLockInverted.java
----
include::{section-java-package}/locks/Locks_ReadWriteLockInverted.java[tag=code]
----
+
.console output
[source,console]
----
Thread-0: Got the write Lock
Thread-0: Got the read Lock
----
+
Note that in this example the write _lock_ is being obtained *before* read, so that only the first _thread_ that was executed was able to get both _locks_.

.References
****

* Applying Locks
+
Boyarsky, Jeanne; Selikoff, Scott. OCP: Oracle Certified Professional Java SE 8 Programmer II Study Guide (p. 607). Wiley. Kindle Edition.

* https://www.baeldung.com/java-concurrent-locks[Guide to java.util.concurrent.Locks.]

* https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/locks/package-summary.html[Package java.util.concurrent.locks.] Java Plataform SE 8.

****
