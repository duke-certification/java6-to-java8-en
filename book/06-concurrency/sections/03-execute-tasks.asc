:java-package: src/org/j6toj8/concurrency
:section-java-package: ../../../{java-package}

=== Executando tarefas com ExecutorService

.Objetivo
--------------------------------------------------
Use Executor, ExecutorService, Executors, Callable, and Future to execute tasks using thread pools
-
Usar Executor, ExecutorService, Executors, Callable, e Future para executar tarefas usando um conjunto de threads
--------------------------------------------------

A classe `ExecutorService` é utilizada para a criação e execução de __threads__. Geralmente é utilizado um conjunto, ou repositório, de __threads__. A classe `Executors` contém métodos utilitários para a criação desses executores. Serão apresentados os principais usos de ``ExecutorService``.

. É possível executar uma tarefa em uma _thread_ separada utilizando o método ``newSingleThreadExecutor``.
+
[source,java,indent=0]
.{java-package}/executetasks/Tasks_SingleThread.java
----
include::{section-java-package}/executetasks/Tasks_SingleThread.java[tag=code]
----
+
.Saída no console
[source,console]
----
Thread Principal: main
Thread do Executor: pool-1-thread-1
----
+
O método execute recebe uma instância de ``Runnable``, que nestes exemplos serão criadas na forma de uma expressão lambda.
+
Perceba que a _thread_ utilizada pelo executor é diferente da _thread_ principal. 
+
Perceba também que é boa prática chamar o método `shutdown` dentro de um bloco `finally`, buscando não deixar _threads_ pendentes. Fique atento, pois chamar o método `shutdown` *não* garante que a _threads_ foram finalizadas.
+
Em um programa real, talvez você não queira que a tarefa seja finalizada logo após a sua criação, como nos exemplos aqui apresentados. Logo, pode ser necessário invocar o `shutdown` em algum ponto do sistema, ou quando a aplicação for encerrada. Apenas lembre-se de invocar o método `shutdown` para que sua aplicação possa ser encerrada corretamente, caso contrário o processo poderá ficar travado impedindo que o programe encerre corretamente..

. É possível executar várias tarefas em uma mesma _thread_ separada utilizando o mesmo método ``newSingleThreadExecutor``.
+
[source,java,indent=0]
.{java-package}/executetasks/Tasks_SingleThreadManyTasks.java
----
include::{section-java-package}/executetasks/Tasks_SingleThreadManyTasks.java[tag=code]
----
+
.Saída no console
[source,console]
----
Tarefa 1 - Thread do Executor: pool-1-thread-1
Tarefa 2 - Thread do Executor: pool-1-thread-1
Thread Principal: main
Tarefa 3 - Thread do Executor: pool-1-thread-1
----
+
Perceba que todas as tarefas foram executadas pela mesma __thread__, que é diferente e paralela à _thread_ principal.

. É possível chamar `shutdownNow` para *tentar* encerrar todas as _threads_ imediatamente.
+
[source,java,indent=0]
.{java-package}/executetasks/Tasks_ShutdownNow.java
----
include::{section-java-package}/executetasks/Tasks_ShutdownNow.java[tag=code]
----
+
.Saída no console
[source,console]
----
Thread Principal: main
Thread do Executor: pool-1-thread-1
----

. É possível utilizar o método `submit` para ter informações sobre a tarefa que está sendo executada.
+
[source,java,indent=0]
.{java-package}/executetasks/Tasks_SingleThreadSubmit.java
----
include::{section-java-package}/executetasks/Tasks_SingleThreadSubmit.java[tag=code]
----
+
.Saída no console
[source,console]
----
Tarefa já finalizada? false
Thread do Executor: pool-1-thread-1
Tarefa já finalizada? false
Tarefa já finalizada? true
Tarefa já finalizada? true
----
+
A instância de `Future` representa um valor que será retornado no futuro. Nesse caso é um valor que representa a própria tarefa submetida.
+
Veja que a tarefa inicialmente ainda não havia sido finalizada, mas nas duas últimas impressões no console já havia sido. 
+
O resultado desse exemplo irá ser diferente para cada execução, tendo em vista a utilização de mais de uma _thread_: a principal e uma paralela.

. Também é possível ver outras informações sobre a tarefa ou tentar cancelar sua execução.
+
[source,java,indent=0]
.{java-package}/executetasks/Tasks_SingleThreadFuture.java
----
include::{section-java-package}/executetasks/Tasks_SingleThreadFuture.java[tag=code]
----
+
.Saída no console
[source,console]
----
Tarefa já finalizada? false
Tentando cancelar a tarefa. Conseguiu? true
Tarefa executando
Tarefa foi cancelada? true
----
+
Perceba como foi possível cancelar a tarefa mesmo após ela já ter impresso no console.
+
O resultado desse exemplo também será diferente para cada execução.


. É possível retornar um valor da tarefa utilizando o método `submit` que recebe uma instância de `Callable`.
+
[source,java,indent=0]
.{java-package}/executetasks/Tasks_SingleThreadCallable.java
----
include::{section-java-package}/executetasks/Tasks_SingleThreadCallable.java[tag=code]
----
+
.Saída no console
[source,console]
----
Retorno da tarefa: String que será retornada
----
+
Nesse caso a instância de `Future` representa o valor retornado pela tarefa, uma ``String``.
+
É necessário o bloco `catch` para capturar as exeções que podem ser lançadas pelo método `get` da classe `Future`.

. É possível passar uma lista de tarefas para serem executadas utilizando o método ``invokeAll``.
+
[source,java,indent=0]
.{java-package}/executetasks/Tasks_SingleThreadInvokeAll.java
----
include::{section-java-package}/executetasks/Tasks_SingleThreadInvokeAll.java[tag=code]
----
+
.Saída no console
[source,console]
----
Retorno da tarefa: Tarefa 1 executando na thread pool-1-thread-1
Retorno da tarefa: Tarefa 2 executando na thread pool-1-thread-1
Retorno da tarefa: Tarefa 3 executando na thread pool-1-thread-1
----

. É possível passar uma lista de tarefas onde apenas uma será concluída utilizando o método `invokeAny`.
+
[source,java,indent=0]
.{java-package}/executetasks/Tasks_SingleThreadInvokeAny.java
----
include::{section-java-package}/executetasks/Tasks_SingleThreadInvokeAny.java[tag=code]
----
+
.Saída no console
[source,console]
----
Retorno da tarefa: Tarefa 1 executada na thread pool-1-thread-1
----
+
As outras tarefas são interrompidas ou, como neste caso só temos uma __thread__, nem são executadas.
+
Em um exemplo com inúmeras __threads__, é possível que qualquer uma das 3 tarefas finalize primeiro e interrompa as outras duas.

. `Runnable` não possui retorno nem pode lançar exceção checada, enquanto `Callable` possui retorno e pode lançar execeção checada. É importante saber diferenciar qual versão do método `submit` está sendo chamado.
+
[source,java,indent=0]
.{java-package}/executetasks/Tasks_RunnableCallable.java
----
include::{section-java-package}/executetasks/Tasks_RunnableCallable.java[tag=code]
----
+
Lembre-se que `Thread.sleep()` lança uma exceção checada.

. É possível esperar as tarefas finalizarem sua execução por um tempo específico com o método `awaitTermination`.
+
[source,java,indent=0]
.{java-package}/executetasks/Tasks_SingleThreadAwaitTermination.java
----
include::{section-java-package}/executetasks/Tasks_SingleThreadAwaitTermination.java[tag=code]
----
+
.Saída no console
[source,console]
----
Tarefa 1 - Thread do Executor: pool-1-thread-1
Tarefa 2 - Thread do Executor: pool-1-thread-1
Tarefas finalizadas? false
Tarefa 3 - Thread do Executor: pool-1-thread-1
Tarefas finalizadas? true
----
+
Caso as tarefas não tenham terminado depois de 1 segundo, a execução teria continuado normalmente. Não há exceção neste caso. A única diferença seria a saída no console, pois nas duas vezes seria impresso `false`.

==== Tarefas agendadas

. É possível agendar tarefas com as classes de `ScheduledExecutorService`.
+
[source,java,indent=0]
.{java-package}/executetasks/Schedule_SingleThread.java
----
include::{section-java-package}/executetasks/Schedule_SingleThread.java[tag=code]
----
+
.Saída no console
[source,console]
----
Agora: 16:05:25.978
Execução: 16:05:28.984
----
+
Perceba que a tarefa foi executada aproximadamente 3 segundos após o agendamento.
+
O método schedule utilizado neste exemplo recebe um _Runnable_, por isso não há retorno na expressão lambda.
+
Ao agendar uma tarefa, o programa só encerra após a execução, cancelamento ou interrupção da tarefa.

. É possível agendar uma tarefa com retorno passando uma instância de `Callable`.
+
[source,java,indent=0]
.{java-package}/executetasks/Schedule_SingleThreadCallable.java
----
include::{section-java-package}/executetasks/Schedule_SingleThreadCallable.java[tag=code]
----
+
.Saída no console
[source,console]
----
Antes do agendamento: 16:10:48.898
Depois do agendamento: 16:10:48.903
Execução: 16:10:51.904
Depois da execução: 16:10:51.904
----

. É possível agendar uma tarefa para ser executada a cada X tempo usando o método `scheduleAtFixedRate`.
+
[source,java,indent=0]
.{java-package}/executetasks/Schedule_SingleThreadFixedRate.java
----
include::{section-java-package}/executetasks/Schedule_SingleThreadFixedRate.java[tag=code]
----
+
.Saída no console
[source,console]
----
Antes do agendamento: 16:16:54.511
Após do agendamento: 16:16:54.517
Execução: 16:16:57.517
Execução: 16:16:58.517
Execução: 16:16:59.517
Execução: 16:17:00.517
Execução: 16:17:01.517
Execução: 16:17:02.517
Execução: 16:17:03.517
Execução: 16:17:04.517
Após o sleep de 10 segundos: 16:17:04.517
Invocando shutdown no executor.
----
+
Neste exemplos a execução demora 3 segundos para começar, e é repetida a cada 1 segundo, até o `shutdown` ser chamado. Por isso existe um `sleep` no final do bloco `try`, para garantir que enxergaríamos a execução da tarefa por algumas vezes antes de invocar o `shutdown`.

. É possível agendar uma tarefa para ser executada X tempo após o término da tarefa anterior usando o método `scheduleWithFixedDelay`.
+
[source,java,indent=0]
.{java-package}/executetasks/Schedule_SingleThreadFixedDelay.java
----
include::{section-java-package}/executetasks/Schedule_SingleThreadFixedDelay.java[tag=code]
----
+
.Saída no console
[source,console]
----
Antes do agendamento: 16:20:46.717
Após do agendamento: 16:20:46.727
Execução: 16:20:49.728
Execução: 16:20:50.729
Execução: 16:20:51.729
Execução: 16:20:52.730
Execução: 16:20:53.731
Execução: 16:20:54.732
Execução: 16:20:55.732
Após o sleep de 10 segundos: 16:20:56.728
Invocando shutdown no executor.
----
+
Este exemplo é muito parecido com o anterior, porém há uma diferença importante: a nova tarefa só começa a executar 1 segundo depois do *término* da anterior. No exemplo acima a tarefa era executada a *cada* 1 segundo, independente do término da anterior. Perceba as diferenças nos milissegundos.

==== Múltiplas Threads

Todos os exemplos até agora utilizaram apenas uma _thread_ adicional. Em todos eles, seria possível utilizar construtores de `Executors` que fornecem mais de uma _thread_.

. É possível criar um Executor que cria _threads_ conforme o necessário, e as reutiliza quando possível, utilizando o método `newCachedThreadPool`.
+
[source,java,indent=0]
.{java-package}/executetasks/TasksMulti_CachedThreadPool.java
----
include::{section-java-package}/executetasks/TasksMulti_CachedThreadPool.java[tag=code]
----
+
.Saída no console
[source,console]
----
Tarefa 1 - Thread do Executor: pool-1-thread-1
Tarefa 2 - Thread do Executor: pool-1-thread-2
Tarefa 3 - Thread do Executor: pool-1-thread-3
Tarefa 4 - Thread do Executor: pool-1-thread-3
Tarefa 5 - Thread do Executor: pool-1-thread-3
----
+
Perceba que foram criadas 3 _threads_, e a terceira foi utilizada 3 vezes.

. É possível criar um Executor com um número delimitado de _threads_ utilizando o método `newFixedThreadPool`.
+
[source,java,indent=0]
.{java-package}/executetasks/TasksMulti_FixedThreadPool.java
----
include::{section-java-package}/executetasks/TasksMulti_FixedThreadPool.java[tag=code]
----
+
.Saída no console
[source,console]
----
Tarefa 1 - Thread do Executor: pool-1-thread-1
Tarefa 2 - Thread do Executor: pool-1-thread-2
Tarefa 3 - Thread do Executor: pool-1-thread-1
Tarefa 4 - Thread do Executor: pool-1-thread-2
Tarefa 5 - Thread do Executor: pool-1-thread-1
----

. É possível criar um Executor de agendamento com um número delimitado de _threads_ utilizando o método `newScheduledThreadPool`.
+
[source,java,indent=0]
.{java-package}/executetasks/TasksMulti_ScheduledThreadPool.java
----
include::{section-java-package}/executetasks/TasksMulti_ScheduledThreadPool.java[tag=code]
----
+
.Saída no console
[source,console]
----
Agora: 16:33:36.825
Execução 1: pool-1-thread-1 - 16:33:39.834
Execução 2: pool-1-thread-2 - 16:33:39.836
Execução 3: pool-1-thread-1 - 16:33:39.837
Execução 4: pool-1-thread-1 - 16:33:39.838
Execução 5: pool-1-thread-2 - 16:33:39.838
----
+
Duas _threads_ e _delay_ de 3 segundos em todos os agendamentos.

****

* Creating Threads with the ExecutorService
+
Boyarsky, Jeanne; Selikoff, Scott. OCP: Oracle Certified Professional Java SE 8 Programmer II Study Guide (p. 335). Wiley. Edição do Kindle. 

* https://www.baeldung.com/thread-pool-java-and-guava[Introduction to Thread Pools in Java.]

* https://www.baeldung.com/java-executor-service-tutorial[A Guide to the Java ExecutorService.]

* hhttps://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ExecutorService.html[Interface ExecutorService.] Java Plataform SE 7.

****