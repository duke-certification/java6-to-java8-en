:java-package: src/org/j6toj8/concurrency
:section-java-package: ../../../{java-package}

=== Execute tasks with ExecutorService

.Objective
--------------------------------------------------
Use Executor, ExecutorService, Executors, Callable, and Future to execute tasks using thread pools
--------------------------------------------------

The `ExecutorService` class is used for creating and executing _threads_. Usually a set or repository of _threads_ is used. The `Executors` class contains utility methods for creating these executors. The main uses of `ExecutorService` will be presented.

. You can execute a task in a separate _thread_ using the `newSingleThreadExecutor` method.
+
[source,java,indent=0]
.{java-package}/executetasks/Tasks_SingleThread.java
----
include::{section-java-package}/executetasks/Tasks_SingleThread.java[tag=code]
----
+
.console output
[source,console]
----
Main Thread: main
Executor Thread: pool-1-thread-1
----
+
The execute method receives an instance of `Runnable`, which in these examples will be created as a lambda expression.
+
Note that the _thread_ used by the performer is different from the main _thread_.
+
Also note that it is good practice to call the `shutdown` method inside a `finally` block, trying not to leave _threads_ pending. Be aware that calling the `shutdown` *method does not* guarantee that _threads_ has been terminated.
+
In a real application, you may not want the task to be completed soon after its creation, as in the examples presented here. Therefore, it may be necessary to invoke `shutdown` somewhere in the system, or when the application terminates. Just remember to invoke the `shutdown` method so that your application can terminate properly, otherwise the process might get stuck preventing the program from terminating properly.

. You can perform multiple tasks on the same separate _thread_ using the same `newSingleThreadExecutor` method.
+
[source,java,indent=0]
.{java-package}/executetasks/Tasks_SingleThreadManyTasks.java
----
include::{section-java-package}/executetasks/Tasks_SingleThreadManyTasks.java[tag=code]
----
+
.console output
[source,console]
----
Task 1 - Executor Thread: pool-1-thread-1
Task 2 - Executor Thread: pool-1-thread-1
Main Thread: main
Task 3 - Executor Thread: pool-1-thread-1
----
+
Note that all tasks were performed by the same _thread_, which is different and parallel to the main _thread_.

. You can call `shutdownNow` to *try* to terminate all _threads_ immediately.
+
[source,java,indent=0]
.{java-package}/executetasks/Tasks_ShutdownNow.java
----
include::{section-java-package}/executetasks/Tasks_ShutdownNow.java[tag=code]
----
+
.console output
[source,console]
----
Main Thread: main
Executor Thread: pool-1-thread-1
----

. You can use the `submit` method to get information about the task being performed.
+
[source,java,indent=0]
.{java-package}/executetasks/Tasks_SingleThreadSubmit.java
----
include::{section-java-package}/executetasks/Tasks_SingleThreadSubmit.java[tag=code]
----
+
.console output
[source,console]
----
Task already completed? false
Executor Thread: pool-1-thread-1
Task already completed? false
Task already completed? true
Task already completed? true
----
+
The instance of `Future` represents a value that will be returned in the future. In this case it is a value that represents the submitted task itself.
+
Note that the task initially had not yet been completed, but in the last two impressions on the console had already been.
+
The result of this example will be different for each execution, as it uses more than one _thread_: the main one and a parallel one.

. You can also view other information about the task or try to cancel its execution.
+
[source,java,indent=0]
.{java-package}/executetasks/Tasks_SingleThreadFuture.java
----
include::{section-java-package}/executetasks/Tasks_SingleThreadFuture.java[tag=code]
----
+
.console output
[source,console]
----
Task already completed? false
Trying to cancel the task. Got it? true
Task running
Task was canceled? true
----
+
Note how you could cancel the job even after it has already printed to the console.
+
The result of this example will also differ for each execution.


. You can return a task value using the `submit` method that receives an instance of `Callable`.
+
[source,java,indent=0]
.{java-package}/executetasks/Tasks_SingleThreadCallable.java
----
include::{section-java-package}/executetasks/Tasks_SingleThreadCallable.java[tag=code]
----
+
.console output
[source,console]
----
Task Return: String to be returned
----
+
In this case the instance of `Future` represents the value returned by the task, a `String`.
+
The `catch` block is required to catch the exceptions that can be thrown by the `get` method of the `Future` class.

. You can pass a list of tasks to perform using the `invokeAll` method.
+
[source,java,indent=0]
.{java-package}/executetasks/Tasks_SingleThreadInvokeAll.java
----
include::{section-java-package}/executetasks/Tasks_SingleThreadInvokeAll.java[tag=code]
----
+
.console output
[source,console]
----
Task Return: Task 1 Running on Thread pool-1-thread-1
Task Return: Task 2 Running on Thread pool-1-thread-1
Task Return: Task 3 Running on Thread pool-1-thread-1
----

. It is possible to pass a task list where only one will be completed using the `invokeAny` method.
+
[source,java,indent=0]
.{java-package}/executetasks/Tasks_SingleThreadInvokeAny.java
----
include::{section-java-package}/executetasks/Tasks_SingleThreadInvokeAny.java[tag=code]
----
+
.console output
[source,console]
----
Task Return: Task 1 Running on Thread pool-1-thread-1
----
+
The other tasks are interrupted or, as in this case, we only have one _thread_, nor are they executed.
+
In an example with numerous _threads_, it is possible for either of the 3 tasks to finish first and stop the other two.

. `Runnable` has no return and cannot throw checked exception, while `Callable` has returned and can throw checked exception. It is essential to know how to differentiate which version of the `submit` method is being called.
+
[source,java,indent=0]
.{java-package}/executetasks/Tasks_RunnableCallable.java
----
include::{section-java-package}/executetasks/Tasks_RunnableCallable.java[tag=code]
----
+
Remember that `Thread.sleep()` throws a checked exception.

. You can expect tasks to finish executing for a specific time with the `awaitTermination` method.
+
[source,java,indent=0]
.{java-package}/executetasks/Tasks_SingleThreadAwaitTermination.java
----
include::{section-java-package}/executetasks/Tasks_SingleThreadAwaitTermination.java[tag=code]
----
+
.console output
[source,console]
----
Task 1 - Executor Thread: pool-1-thread-1
Task 2 - Executor Thread: pool-1-thread-1
Tasks completed? false
Task 3 - Executor Thread: pool-1-thread-1
Tasks completed? true
----
+
If tasks did not finish after 1 second, execution would have continued normally. There is no exception in this case. The only difference would be the console output, as both times would print `false`.

==== Scheduled Tasks

. You can schedule tasks with the `ScheduledExecutorService` classes.
+
[source,java,indent=0]
.{java-package}/executetasks/Schedule_SingleThread.java
----
include::{section-java-package}/executetasks/Schedule_SingleThread.java[tag=code]
----
+
.console output
[source,console]
----
Now: 16:05:25.978
Execution: 16:05:28.984
----
+
Note that the task ran approximately 3 seconds after scheduling.
+
The schedule method used in this example is given a _Runnable_, so there is no return in the lambda expression.
+
When scheduling a task, the program ends only after the task has been executed, canceled or interrupted.

. You can schedule a return task by passing an instance of `Callable`.
+
[source,java,indent=0]
.{java-package}/executetasks/Schedule_SingleThreadCallable.java
----
include::{section-java-package}/executetasks/Schedule_SingleThreadCallable.java[tag=code]
----
+
.console output
[source,console]
----
Before Scheduling: 16:10:48.898
After Scheduling: 16:10:48.903
Execution: 16:10:51.904
After execution: 16:10:51.904
----

. You can schedule a task to run every X time using the `scheduleAtFixedRate` method.
+
[source,java,indent=0]
.{java-package}/executetasks/Schedule_SingleThreadFixedRate.java
----
include::{section-java-package}/executetasks/Schedule_SingleThreadFixedRate.java[tag=code]
----
+
.console output
[source,console]
----
Before Scheduling: 10:16:00.717
After Scheduling: 10:16:00.727
Execution: 10:16:03.731
Execution: 10:16:04.728
Execution: 10:16:05.727
Execution: 10:16:06.727
Execution: 10:16:07.731
Execution: 10:16:08.733
Execution: 10:16:09.730
After 10 seconds sleep: 10:16:10.732
Invoking shutdown on executor.
----
+
In these examples execution takes 3 seconds to begin, and is repeated every 1 second until `shutdown` is called. So there is a `sleep` at the end of the `try` block, to ensure that we would see the task running a few times before calling `shutdown`.

. You can schedule a task to run X time after the previous task ends using the `scheduleWithFixedDelay` method.
+
[source,java,indent=0]
.{java-package}/executetasks/Schedule_SingleThreadFixedDelay.java
----
include::{section-java-package}/executetasks/Schedule_SingleThreadFixedDelay.java[tag=code]
----
+
.console output
[source,console]
----
Before Scheduling: 10:19:49.955
After Scheduling: 10:19:49.964
Execution: 10:19:52.967
Execution: 10:19:53.964
Execution: 10:19:54.964
Execution: 10:19:55.964
Execution: 10:19:56.965
Execution: 10:19:57.966
Execution: 10:19:58.965
After 10 seconds sleep: 10:19:59.966
Invoking shutdown on executor.
----
+
This example is very similar to the previous one, but there is one important difference: the new task only starts to run 1 second after the *end* of the previous one. In the example above the task was executed *every* 1 second, regardless of the end of the previous one. Note the differences in milliseconds.

==== Multiple Threads

All examples have so far used only one additional _thread_. In all of them, it would be possible to use `Executor` constructors that provide more than one _thread_.

. You can create an Executor that creates _threads_ as needed, and reuses them when possible, using the `newCachedThreadPool` method.
+
[source,java,indent=0]
.{java-package}/executetasks/TasksMulti_CachedThreadPool.java
----
include::{section-java-package}/executetasks/TasksMulti_CachedThreadPool.java[tag=code]
----
+
.console output
[source,console]
----
Task 1 - Executor Thread: pool-1-thread-1
Task 2 - Executor Thread: pool-1-thread-2
Task 3 - Executor Thread: pool-1-thread-3
Task 4 - Executor Thread: pool-1-thread-3
Task 5 - Executor Thread: pool-1-thread-3
----
+
Note that 3 _threads_ were created, and the third was used 3 times.

. You can create an Executor with a delimited number of _threads_ using the `newFixedThreadPool` method.
+
[source,java,indent=0]
.{java-package}/executetasks/TasksMulti_FixedThreadPool.java
----
include::{section-java-package}/executetasks/TasksMulti_FixedThreadPool.java[tag=code]
----
+
.console output
[source,console]
----
Task 1 - Executor Thread: pool-1-thread-1
Task 2 - Executor Thread: pool-1-thread-2
Task 3 - Executor Thread: pool-1-thread-1
Task 4 - Executor Thread: pool-1-thread-2
Task 5 - Executor Thread: pool-1-thread-1
----

. You can create a Scheduler with a delimited number of _threads_ using the `newScheduledThreadPool` method.
+
[source,java,indent=0]
.{java-package}/executetasks/TasksMulti_ScheduledThreadPool.java
----
include::{section-java-package}/executetasks/TasksMulti_ScheduledThreadPool.java[tag=code]
----
+
.console output
[source,console]
----
Now: 16:33:36.825
Execution 1: pool-1-thread-1 - 16:33:39.834
Execution 2: pool-1-thread-2 - 16:33:39.836
Execution 3: pool-1-thread-1 - 16:33:39.837
Execution 4: pool-1-thread-1 - 16:33:39.838
Execution 5: pool-1-thread-2 - 16:33:39.838
----
+
Two _threads_ and _delay_ of 3 seconds on all schedules.

.References
****

* Creating Threads with the ExecutorService
+
Boyarsky, Jeanne; Selikoff, Scott. OCP: Oracle Certified Professional Java SE 8 Programmer II Study Guide (p. 335). Wiley. Kindle Edition.

* https://www.baeldung.com/thread-pool-java-and-guava[Introduction to Thread Pools in Java.]

* https://www.baeldung.com/java-executor-service-tutorial[A Guide to the Java ExecutorService.]

* hhttps://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ExecutorService.html[Interface ExecutorService.] Java Plataform SE 7.

****
