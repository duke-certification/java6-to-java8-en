:java-package: src/org/j6toj8/concurrency
:section-java-package: ../../../{java-package}

=== Pacote `Concurrent`

.Objetivo
--------------------------------------------------
Use classes from the java.util.concurrent package including CyclicBarrier and CopyOnWriteArrayList with a focus on the advantages over and differences from the traditional java.util collections
-
Usar classes do pacote java.util.concurrent, incluindo CyclicBarrier e CopyOnWriteArrayList, com foco nas vantagens e diferenças das Coleções tradicionais do pacote java.util
--------------------------------------------------

O pacote `java.util.concurrent` inclui inúmeras classes para serem utilizadas em aplicações multi-thread. Nesta seção serão apresentadas algumas dessas classes.

Muitas das classes do pacote concurrent são apenas versões das coleções comuns, porém com blocos __syncronized__, garantindo que múltiplas _threads_ poderão acessá-las ao mesmo tempo mantendo sua integridade. As classes __ConcurrentHashMap__, _ConcurrentLinkedQueue_ e _ConcurrentLinkedDeque_ são exemplos disso. Por isso é importante conhecer e lembrar das coleções comuns do Java 6.

Todas as seções deste capítulo podem conter exemplos maiores do que os que foram apresentados até agora, principalmente quando for necessário a criação de mútiplas __Threads__. É importante dedicar um tempo maior para entender cada um desses exemplos.

. É possível criar uma *Fila* que lança uma exceção após um tempo predefinido utilizando a classe ``LinkedBlockingQueue``.
+
[source,java,indent=0]
.{java-package}/concurrentpackage/Concurrency_LinkedBlockingQueue.java
----
include::{section-java-package}/concurrentpackage/Concurrency_LinkedBlockingQueue.java[tag=code]
----

. É possível criar uma *Fila Duplamente Ligada (Deque)* que lança uma exceção após um tempo predefinido utilizando a classe ``LinkedBlockingDeque``.
+
[source,java,indent=0]
.{java-package}/concurrentpackage/Concurrency_LinkedBlockingDeque.java
----
include::{section-java-package}/concurrentpackage/Concurrency_LinkedBlockingDeque.java[tag=code]
----

. É possível criar uma lista que aloca todo o seu conteúdo em um novo _array_ sempre que é modificada utilizando a classe ``CopyOnWriteArrayList``.
+
[source,java,indent=0]
.{java-package}/concurrentpackage/Concurrency_CopyOnWriteArrayList.java
----
include::{section-java-package}/concurrentpackage/Concurrency_CopyOnWriteArrayList.java[tag=code]
----
+
.Saída no console
[source,console]
----
A
B
C
Lista final: [A, B, C, D]
----
+
Perceba que foi possível acrescentar um valor na lista durante a execução do _forEach_. Em uma lista tradicional haveria ocorrido uma ``ConcurrentModificationException``.
+
Perceba também que, mesmo alterando a lista dentro do __forEach__, a letra "D" não aparece no console. Isso ocorre pois, quando a letra "D" foi inserida na lista, um novo _array_ foi alocado internamente contendo todos os novos elementos, e a iteração continuou ocorrendo no _array_ antigo.

. É possível criar versões _syncronized_ de coleções utilizando métodos utilitários da classe ``Collections``.
+
[source,java,indent=0]
.{java-package}/concurrentpackage/Concurrency_CollectionsSyncronized.java
----
include::{section-java-package}/concurrentpackage/Concurrency_CollectionsSyncronized.java[tag=code]
----

. *Não* é possível adicionar ou remover elementos durante o _forEach_ de uma coleção sincronizada que foi criada utilizando o método da classe ``Collections``.
+
[source,java,indent=0]
.{java-package}/concurrentpackage/Concurrency_CollectionsSyncronizedForEach.java
----
include::{section-java-package}/concurrentpackage/Concurrency_CollectionsSyncronizedForEach.java[tag=code]
----
+
.Saída no console
[source,console]
----
Exception in thread "main" java.util.ConcurrentModificationException
	at java.util.HashMap$HashIterator.nextNode(HashMap.java:1445)
	at java.util.HashMap$EntryIterator.next(HashMap.java:1479)
	at java.util.HashMap$EntryIterator.next(HashMap.java:1477)
	at org.j6toj8.concurrency.concurrentpackage.Concurrency_CollectionsSyncronizedForEach.main(Concurrency_CollectionsSyncronizedForEach.java:18)
----
+
Perceba que, apesar do `Map` ter sido transformado em __syncronized__, não é possível alterá-lo durante uma iteração com __forEach__. Isso é possível apenas nas versões _Concurrent_ das coleções.

. É possível sincronizar a execução de várias _threads_ utilizando a classe ``CyclicBarrier``.
+
[source,java,indent=0]
.{java-package}/concurrentpackage/Concurrency_CyclicBarrier.java
----
include::{section-java-package}/concurrentpackage/Concurrency_CyclicBarrier.java[tag=code]
----
+
.Saída no console
[source,console]
----
Thread-2: Primeira Parte
Thread-1: Primeira Parte
Thread-0: Primeira Parte
Thread-1: Segunda Parte
Thread-2: Segunda Parte
Thread-0: Segunda Parte
Thread-0: Terceira Parte
Thread-1: Terceira Parte
Thread-2: Terceira Parte
----
+
Neste exemplo estão sendo criadas 3 __threads__. Todas executam instâncias da classe `Acao` que recebem a mesma instância da classe ``CyclicBarrier``. Toda vez que uma _thread_ faz uma chamada ao método `await` da instância de ``cyclicBarrier``, ela fica suspensa até que todas as outras _threads_ cheguem até aquele mesmo ponto. Por isso todas as _threads_ imprimem no console de forma sincronizada. Se não houvesse sincronização, a saída no console seria completamente imprevisível. Abaixo é o exemplo de uma execução sem a chamada ao método `await`:
+
.Saída no console caso não houvesse CyclicBarrier
[source,console]
----
Thread-0: Primeira Parte
Thread-1: Primeira Parte
Thread-1: Segunda Parte
Thread-1: Terceira Parte
Thread-2: Primeira Parte
Thread-0: Segunda Parte
Thread-2: Segunda Parte
Thread-0: Terceira Parte
Thread-2: Terceira Parte

----

****

* Using Concurrent Collections
+
Boyarsky, Jeanne; Selikoff, Scott. OCP: Oracle Certified Professional Java SE 8 Programmer II Study Guide (p. 358). Wiley. Edição do Kindle. 

* https://www.baeldung.com/java-util-concurrent[Overview of the java.util.concurrent.]

* https://www.baeldung.com/java-cyclic-barrier[CyclicBarrier in Java.]

* https://docs.oracle.com/javase/tutorial/essential/concurrency/collections.html[Concurrent Collections.] The Java™ Tutorials.

* https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/package-summary.html[Package java.util.concurrent.] Java Plataform SE 8.

****