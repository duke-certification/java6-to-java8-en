:java-package: src/org/j6toj8/concurrency
:section-java-package: ../../../{java-package}

=== Concurrent package

.Objective
--------------------------------------------------
Use classes from the java.util.concurrent package including CyclicBarrier and CopyOnWriteArrayList with a focus on the advantages over and differences from the traditional java.util collections
--------------------------------------------------

The `java.util.concurrent` package includes numerous classes for use in multi-threaded applications. In this section, some of these classes will be presented.

Many of the concurrent package classes are just versions of the common collections, but with _synchronized_ blocks, ensuring that multiple _threads_ can access them while maintaining their integrity. The _ConcurrentHashMap_, _ConcurrentLinkedQueue_, and _ConcurrentLinkedDeque_ classes are examples of this. That's why it's important to know and remember the common Java 6 collections.

All sections of this chapter may contain larger examples than presented so far, especially when creating multiple _Threads_ is required. It is important to spend more time understanding each of these examples.

. You can create a *Queue* that throws an exception after a predefined time using the `LinkedBlockingQueue` class.
+
[source,java,indent=0]
.{java-package}/concurrentpackage/Concurrency_LinkedBlockingQueue.java
----
include::{section-java-package}/concurrentpackage/Concurrency_LinkedBlockingQueue.java[tag=code]
----

. You can create a *Double Queue (Deque)* that throws an exception after a preset time using the `LinkedBlockingDeque` class.
+
[source,java,indent=0]
.{java-package}/concurrentpackage/Concurrency_LinkedBlockingDeque.java
----
include::{section-java-package}/concurrentpackage/Concurrency_LinkedBlockingDeque.java[tag=code]
----

. You can create a list that allocates all of its contents to a new _array_ whenever it is modified using the `CopyOnWriteArrayList` class.
+
[source,java,indent=0]
.{java-package}/concurrentpackage/Concurrency_CopyOnWriteArrayList.java
----
include::{section-java-package}/concurrentpackage/Concurrency_CopyOnWriteArrayList.java[tag=code]
----
+
.console output
[source,console]
----
A
B
C
Final list: [A, B, C, D]
----
+
Note that it was possible to add a value to the list during _forEach_ execution. In a traditional list there would have been a `ConcurrentModificationException`.
+
Also note that even if you change the list within _forEach_, the letter "D" does not appear on the console. This is because when the letter "D" was entered in the list, a new _array_ was internally allocated containing all the new elements, and the iteration continued to occur in the old _array_.

. You can create _synchronized_ versions of collections using utility methods of the `Collections` class.
+
[source,java,indent=0]
.{java-package}/concurrentpackage/Concurrency_CollectionsSyncronized.java
----
include::{section-java-package}/concurrentpackage/Concurrency_CollectionsSyncronized.java[tag=code]
----

. *Cannot* add or remove elements during _forEach_ from a synchronized collection that was created using the `Collections` class method.
+
[source,java,indent=0]
.{java-package}/concurrentpackage/Concurrency_CollectionsSyncronizedForEach.java
----
include::{section-java-package}/concurrentpackage/Concurrency_CollectionsSyncronizedForEach.java[tag=code]
----
+
.console output
[source,console]
----
Exception in thread "main" java.util.ConcurrentModificationException
	at java.util.HashMap$HashIterator.nextNode(HashMap.java:1445)
	at java.util.HashMap$EntryIterator.next(HashMap.java:1479)
	at java.util.HashMap$EntryIterator.next(HashMap.java:1477)
	at org.j6toj8.concurrency.concurrentpackage.Concurrency_CollectionsSyncronizedForEach.main(Concurrency_CollectionsSyncronizedForEach.java:18)
----
+
Note that although `Map` has been turned into _synchronized_, it cannot be changed during an iteration with _forEach_. This is only possible in _Concurrent_ versions of collections.

. You can synchronize the execution of multiple _threads_ using the `CyclicBarrier` class.
+
[source,java,indent=0]
.{java-package}/concurrentpackage/Concurrency_CyclicBarrier.java
----
include::{section-java-package}/concurrentpackage/Concurrency_CyclicBarrier.java[tag=code]
----
+
.console output
[source,console]
----
Thread-2: First Part
Thread-1: First Part
Thread-0: First Part
Thread-1: Second Part
Thread-2: Second Part
Thread-0: Second Part
Thread-0: Third Part
Thread-1: Third Part
Thread-2: Third Part
----
+
In this example 3 _threads_ are being created. All run instances of the `Action` class that receive the same instance of the `CyclicBarrier` class. Every time a _thread_ calls the `await` method of the `cyclicBarrier` instance, it is suspended until all other _threads_ reach that same point. That's why all _threads_ print to the console synchronously. If there was no synchronization, the console output would be completely unpredictable. Below is an example of an execution without calling the `await` method:
+
.console output if there was no CyclicBarrier
[source,console]
----
Thread-0: First Part
Thread-1: First Part
Thread-1: Second Part
Thread-1: Third Part
Thread-2: First Part
Thread-0: Second Part
Thread-2: Second Part
Thread-0: Third Part
Thread-2: Third Part
----

.References
****

* Using Concurrent Collections
+
Boyarsky, Jeanne; Selikoff, Scott. OCP: Oracle Certified Professional Java SE 8 Programmer II Study Guide (p. 358). Wiley. Kindle Edition.

* https://www.baeldung.com/java-util-concurrent[Overview of the java.util.concurrent.]

* https://www.baeldung.com/java-cyclic-barrier[CyclicBarrier in Java.]

* https://docs.oracle.com/javase/tutorial/essential/concurrency/collections.html[Concurrent Collections.] The Javaâ„¢ Tutorials.

* https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/package-summary.html[Package java.util.concurrent.] Java Plataform SE 8.

****
