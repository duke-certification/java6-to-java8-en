:java-package: src/org/j6toj8/concurrency
:section-java-package: ../../../{java-package}

=== Framework Fork/Join

.Objetivo
--------------------------------------------------
Use the parallel Fork/Join Framework
-
Usar o Framework Fork/Join de paralelismo
--------------------------------------------------

Com o framework de Fork/Join é possível dividir uma tarefa grande em pedaços menores e executá-los em paralelo. A utilização do framework é simples. A criação de tarefas quebradas em várias partes pode ser um pouco mais complexa. 

Uma tarefa geralmente segue um comportamento padrão:

* Recebe um valor;
* Avalia se o valor é pequeno o suficiente para executar a tarefa com ele;
** Caso positivo, executa a tarefa com aquele valor;
** Caso negativo, quebra em uma ou mais partes e cria novas tarefas menores;
* Segue executando de forma recursiva.

Serão apresentados exemplos utilizando a classe `RecursiveAction`, que não retorna valores, e por isso sua implementação é mais simples. E utilizando a classe `RecursiveTask`, que retorna valores e por isso sua implementação é um pouco mais complexa.

Os exemplos são grandes, pois é necessário implementar toda a classe `RecursiveAction` ou `RecursiveTask` para o exemplo funcionar. Por isso, os passos serão descritos com comentários no código, explicando o funcionamento de cada chamada realizada ao framework.

. É possível implementar uma `RecursiveAction` que divide uma tarefa grande em partes menores.
+
[source,java,indent=0]
.{java-package}/forkjoin/ForkJoin_RecursiveAction.java
----
include::{section-java-package}/forkjoin/ForkJoin_RecursiveAction.java[tag=code]
----
+
.Saída no console
[source,console]
----
ForkJoinPool-1-worker-1 - ABCDEF
ForkJoinPool-1-worker-4 - TUVWXYZ
ForkJoinPool-1-worker-2 - NOPQRS
ForkJoinPool-1-worker-3 - GHIJKLM
----
+
.. Esse exemplo cria uma tarefa do tipo `RecursiveAction` chamada `ImpressaoDeStrings`.
.. Essa `RecursiveAction` recebe uma `String` para imprimir no Console.
.. No método `compute`, a tarefa decide se irá imprimir diretamente no console, ou se irá dividir esse trabalho em duas partes: caso a `String` tenha menos que 10 caracteres, ela imprime diretamente no Console; caso contrário, divide o trabalho em duas novas tarefas.
+
Perceba que cada impressão no console é realizada em uma _thread_ diferente, ficando claro que o trabalho está sendo compartilhado por múltiplas _threads_.
+
Perceba também que o processamento da String não retorna nenhum valor, e por isso foi utilizada a classe `RecursiveAction`.

. Caso seja necessário retornar um valor, é possível implementar uma `RecursiveTask` que divide uma tarefa grande em partes menores.
+
[source,java,indent=0]
.{java-package}/forkjoin/ForkJoin_RecursiveTask.java
----
include::{section-java-package}/forkjoin/ForkJoin_RecursiveTask.java[tag=code]
----
+
.Saída no console
[source,console]
----
ForkJoinPool-1-worker-3 - NOPQRS
ForkJoinPool-1-worker-2 - GHIJKLM
ForkJoinPool-1-worker-4 - ABCDEF
ForkJoinPool-1-worker-1 - TUVWXYZ
Resultado da execução: 26
----
+
.. Esse exemplo cria uma tarefa do tipo `RecursiveTask` chamada `ImpressaoDeStrings`.
.. Essa `RecursiveTask` recebe uma `String` para imprimir no Console.
.. No método `compute`, a tarefa decide se irá imprimir diretamente no console, ou se irá dividir esse trabalho em duas partes: caso a `String` tenha menos que 10 caracteres, ela imprime diretamente no Console; caso contrário, divide o trabalho em duas novas tarefas.
+
Perceba também que o processamento da String retorna quantos caracteres foram impressos, e por isso foi utilizada a classe `RecursiveTask`.


****

* Managing Concurrent Processes
+
Boyarsky, Jeanne; Selikoff, Scott. OCP: Oracle Certified Professional Java SE 8 Programmer II Study Guide (p. 377). Wiley. Edição do Kindle. 

* https://www.baeldung.com/java-fork-join[Guide to the Fork/Join Framework in Java.]

* https://docs.oracle.com/javase/tutorial/essential/concurrency/forkjoin.html[Fork/Join.] The Java™ Tutorials.

****