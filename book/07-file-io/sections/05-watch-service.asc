:java-package: src/org/j6toj8/fileio
:section-java-package: ../../../{java-package}

=== WatchService

.Objetivo
--------------------------------------------------
Observe the changes in a directory by using the WatchService interface
-
Observar as mudanças em um diretório a partir da utilização da Interface WatchService
--------------------------------------------------

O WatchService é uma API para monitorar mudanças em arquivos e diretórios. Serão apresentadas as principais formas de realizar essa monitoração.

Para utilizar a API são necessárias 4 classes principais:

* WatchService -> representa o serviço em si de monitoração;
* StandardWatchEventKinds -> representa os tipos de alteração que se deseja monitorar: criar, apagar ou modificar;
* WatchKey -> representa um retorno do serviço informando que houveram alterações;
* WatchEvent -> representa um evento em si, onde é possível obter informações do que foi alterado.

//-

. É possível observar criações ou deleções de arquivos em um diretório.
+
[source,java,indent=0]
.{java-package}/watchservice/WatchService_CreateDelete.java
----
include::{section-java-package}/watchservice/WatchService_CreateDelete.java[tag=code]
----
+
.Saída no console
[source,console]
----
Path: /home/rinaldo/arquivos
Eventos capturados. Quantidade: 1
Evento ocorrido. Tipo : ENTRY_DELETE. Contexto: arquivo1.txt
Eventos capturados. Quantidade: 1
Evento ocorrido. Tipo : ENTRY_CREATE. Contexto: arquivo1.txt
----
+
Isso é o que seria impresso no console caso o `arquivo1.txt` fosse apagado e depois criado novamente.
+
Perceba os passos que foram feitos:
+
.. Um WatchService foi criado
.. O service foi registrado no `Path` com os eventos desejados
.. Foi criado um _loop_ infinito para realizar a monitoração de forma contínua
.. Foi chamado o método `take`, que aguarda até haver eventos e assim, retorná-los
.. Foi chamado o método `pollEvents` para recuperar os eventos que ocorreram
.. Os eventos foram impressos no console
.. O `WatchKey` foi resetado para que pudesse ser utilizado novamente

+
Esse é o básico de um `WatchService`. Perceba que ele é um recurso que deve ser fechado, por isso está na sintaxe de `try-with-resources`.

. É possível monitorar mudanças em arquivos de um diretório.
+
[source,java,indent=0]
.{java-package}/watchservice/WatchService_Modify.java
----
include::{section-java-package}/watchservice/WatchService_Modify.java[tag=code]
----
+
.Saída no console
[source,console]
----
Path: /home/rinaldo/arquivos
Eventos capturados. Quantidade: 1
Evento ocorrido. Tipo : ENTRY_MODIFY. Contexto: .arquivo1.txt.kate-swp
Eventos capturados. Quantidade: 1
Evento ocorrido. Tipo : ENTRY_MODIFY. Contexto: arquivo1.txt.h26197
Eventos capturados. Quantidade: 1
Evento ocorrido. Tipo : ENTRY_MODIFY. Contexto: arquivo1.txt.h26197
----
+
Esses foram os eventos que ocorreram ao abrir o `arquivo1.txt` com o editor `Kate`, acrescentar um caracter, e salvar o arquivo.

. Não é possível monitorar diretamente um arquivo.
+
[source,java,indent=0]
.{java-package}/watchservice/WatchService_File.java
----
include::{section-java-package}/watchservice/WatchService_File.java[tag=code]
----
+
.Saída no console
[source,console]
----
Path: /home/rinaldo/arquivos/arquivo1.txt
java.nio.file.NotDirectoryException: /home/rinaldo/arquivos/arquivo1.txt
	at sun.nio.fs.LinuxWatchService$Poller.implRegister(LinuxWatchService.java:249)
	at sun.nio.fs.AbstractPoller.processRequests(AbstractPoller.java:260)
	at sun.nio.fs.LinuxWatchService$Poller.run(LinuxWatchService.java:364)
	at java.lang.Thread.run(Thread.java:748)
----
+
Perceba que ocorre exceção ao tentar monitorar diretamente o `arquivo1.txt`.

. É possível recuperar um `WatchKey` imediatamente ou aguardar um período específico com os métodos `poll`.
+
[source,java,indent=0]
.{java-package}/watchservice/WatchService_Poll.java
----
include::{section-java-package}/watchservice/WatchService_Poll.java[tag=code]
----
+
.Saída no console
[source,console]
----
Path: /home/rinaldo/arquivos
Horário antes do poll sem timeout: 14:55:10.298
WatchKey do poll: null
Horário depois do poll sem timeout: 14:55:10.298
Horário antes do poll com timeout: 14:55:10.298
WatchKey do poll com timeout: null
Horário depois do poll com timeout: 14:55:15.300
----
+
Perceba que o primeiro `poll` retorna imediatamente, mesmo que nenhum evento tenha ocorrido. Já o segundo aguarda por 5 segundos para retornar, mesmo que não haja evento.
+
Nos cenários de monitoração, o ideal é utilizar o `take`, caso contrário seria necessário invocar o `poll` inúmeras vezes, enquanto o `take` apenas aguarda indefinidamente até que haja um evento.

****

* Monitoring a Directory for Changes
+
Boyarsky, Jeanne; Selikoff, Scott. OCP: Oracle Certified Professional Java SE 8 Programmer II Study Guide (p. 625). Wiley. Edição do Kindle. 

* https://www.baeldung.com/java-nio2-watchservice[A Guide to WatchService in Java NIO2.]

* https://docs.oracle.com/javase/7/docs/api/java/nio/file/WatchService.html[Class Files.] Java Plataform SE 7.

* https://docs.oracle.com/javase/tutorial/essential/io/notification.html[Watching a Directory for Changes.] The Java™ Tutorials.

****