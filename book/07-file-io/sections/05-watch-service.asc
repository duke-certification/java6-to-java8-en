:java-package: src/org/j6toj8/fileio
:section-java-package: ../../../{java-package}

=== WatchService

.Objective
--------------------------------------------------
Observe the changes in a directory by using the WatchService interface
--------------------------------------------------

WatchService is an API for monitoring file and directory changes. The main ways to carry out this monitoring will be presented.

To use the API you need 4 main classes:

* WatchService -> represents the monitoring service itself;
* StandardWatchEventKinds -> represents the types of changes you want to monitor: create, delete or modify;
* WatchKey -> represents a return of the service informing that there have been changes;
* WatchEvent -> represents an event itself, where you can get information about what has changed.

// -

. You can observe file creations or deletions in a directory.
+
[source,java,indent=0]
.{java-package}/watchservice/WatchService_CreateDelete.java
----
include::{section-java-package}/watchservice/WatchService_CreateDelete.java[tag=code]
----
+
.console output
[source,console]
----
Path: /home/rinaldo/files
Events captured. Quantity: 1
Event occurred. Type: ENTRY_DELETE. Context: file1.txt
Events captured. Quantity: 1
Event occurred. Type: ENTRY_CREATE. Context: file1.txt
----
+
This is what would be printed on the console if `file1.txt` were deleted and then created again.
+
Note the steps that were taken:
+
.. A WatchService has been created.
.. The service has been registered in `Path` with the desired events.
.. An infinite _loop_ has been created to continuously monitor.
.. The `take` method was called, which waits until there are events and thus returns them.
.. The `pollEvents` method was called to retrieve events that occurred.
.. Events were printed on console.
.. WatchKey has been reset so that it can be used again.

+
This is the basics of a `WatchService`. Note that it is a resource that must be closed, so it is in the `try-with-resources` syntax.

. You can monitor changes to files in a directory.
+
[source,java,indent=0]
.{java-package}/watchservice/WatchService_Modify.java
----
include::{section-java-package}/watchservice/WatchService_Modify.java[tag=code]
----
+
.console output
[source,console]
----
Path: /home/rinaldo/files
Events captured. Quantity: 1
Event occurred. Type: ENTRY_MODIFY. Context: .file1.txt.kate-swp
Events captured. Quantity: 1
Event occurred. Type: ENTRY_MODIFY. Context: file1.txt.h26197
Events captured. Quantity: 1
Event occurred. Type: ENTRY_MODIFY. Context: file1.txt.h26197
----
+
These were the events that occurred when opening `file1.txt` with the `Kate` editor, adding a character, and saving the file.

. Unable to monitor a file directly.
+
[source,java,indent=0]
.{java-package}/watchservice/WatchService_File.java
----
include::{section-java-package}/watchservice/WatchService_File.java[tag=code]
----
+
.console output
[source,console]
----
Path: /home/rinaldo/files/file1.txt
java.nio.file.NotDirectoryException: /home/rinaldo/files/file1.txt
	at sun.nio.fs.LinuxWatchService$Poller.implRegister(LinuxWatchService.java:249)
	at sun.nio.fs.AbstractPoller.processRequests(AbstractPoller.java:260)
	at sun.nio.fs.LinuxWatchService$Poller.run(LinuxWatchService.java:364)
	at java.lang.Thread.run(Thread.java:748)
----
+
Note that exception occurs when trying to directly monitor `file1.txt`.

. You can retrieve a `WatchKey` immediately or wait for a specific period with `poll` methods.
+
[source,java,indent=0]
.{java-package}/watchservice/WatchService_Poll.java
----
include::{section-java-package}/watchservice/WatchService_Poll.java[tag=code]
----
+
.console output
[source,console]
----
Path: /home/rinaldo/files
Time before poll without timeout: 14:55:10.298
WatchKey's poll: null
Time after poll without timeout: 14:55:10.298
Time before poll with timeout: 14:55:10.298
WatchKey's poll with timeout: null
Time after poll with timeout: 14:55:15.300
----
+
Note that the first `poll` returns immediately, even if no events have occurred. The second waits for 5 seconds to return, even if there is no event.
+
In monitoring scenarios, it is best to use take, otherwise you would need to invoke poll countless times, while take only waits indefinitely until there is an event.


.References
****

* Monitoring a Directory for Changes
+
Boyarsky, Jeanne; Selikoff, Scott. OCP: Oracle Certified Professional Java SE 8 Programmer II Study Guide (p. 625). Wiley. Kindle Edition.

* https://www.baeldung.com/java-nio2-watchservice[A Guide to WatchService in Java NIO2.]

* https://docs.oracle.com/javase/7/docs/api/java/nio/file/WatchService.html[Class Files.] Java Plataform SE 7.

* https://docs.oracle.com/javase/tutorial/essential/io/notification.html[Watching a Directory for Changes.] The Javaâ„¢ Tutorials.

****
