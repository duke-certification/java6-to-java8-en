:java-package: src/org/j6toj8/fileio
:section-java-package: ../../../{java-package}

=== Files com Streams

.Objetivo
--------------------------------------------------
Find a file by using the PathMatcher interface, and use Java SE 8 I/O improvements, including Files.find(), Files.walk(), and lines() methods
-
Encontrar um arquivo usando a interface PathMatcher, e usar as melhorias de I/O do Java SE 8, incluindo os métodos Files.find(), Files.walk(), and lines()
--------------------------------------------------

Nestão seção serão apresentadas melhorias do Java 8 para encontrar e ler arquivos. São operações que já poderiam ser realizadas com outros métodos antes do Java 8. Porém, com essas melhorias, é possível realizar essas operações utilizando Streams.

. É possível criar um _Stream_ para acessar todos os arquivos, diretórios e subdiretórios de um `Path`.
+
[source,java,indent=0]
.{java-package}/fileimprovements/Improvements_Walk.java
----
include::{section-java-package}/fileimprovements/Improvements_Walk.java[tag=code]
----
+
.Saída no console
[source,console]
----
Path: /home/rinaldo/arquivos

Todos os arquivos e diretórios: 
/home/rinaldo/arquivos
/home/rinaldo/arquivos/arquivo1.txt
/home/rinaldo/arquivos/arquivo3.txt
/home/rinaldo/arquivos/subpasta1
/home/rinaldo/arquivos/subpasta1/subpasta12
/home/rinaldo/arquivos/subpasta1/subpasta12/arquivo122.txt
/home/rinaldo/arquivos/subpasta1/subpasta12/arquivo121.txt
/home/rinaldo/arquivos/subpasta1/arquivo11.txt
/home/rinaldo/arquivos/subpasta1/subpasta11
/home/rinaldo/arquivos/subpasta1/arquivo12.txt
/home/rinaldo/arquivos/subpasta1/arquivo13.txt
/home/rinaldo/arquivos/arquivo2.txt

Os primeiro 5 arquivos e diretórios: 
/home/rinaldo/arquivos
/home/rinaldo/arquivos/arquivo1.txt
/home/rinaldo/arquivos/arquivo3.txt
/home/rinaldo/arquivos/subpasta1
/home/rinaldo/arquivos/subpasta1/subpasta12
----
+
Perceba que a instância criada é realmente um `Stream<Path>`, de tal forma que é possível realizar as operações disponíveis em qualquer __Stream__, como o método `filter`.

. Existe uma versão do método `walk` para definir opções adicionais e limitar a profundidade do acesso aos subdiretórios.
+
[source,java,indent=0]
.{java-package}/fileimprovements/Improvements_WalkDepth.java
----
include::{section-java-package}/fileimprovements/Improvements_WalkDepth.java[tag=code]
----
+
.Saída no console
[source,console]
----
Path: /home/rinaldo/arquivos

Arquivos e Links simbólicos até o segundo nível: 
/home/rinaldo/arquivos
/home/rinaldo/arquivos/arquivo1.txt
/home/rinaldo/arquivos/arquivo3.txt
/home/rinaldo/arquivos/subpasta1
/home/rinaldo/arquivos/subpasta1/subpasta12
/home/rinaldo/arquivos/subpasta1/arquivo11.txt
/home/rinaldo/arquivos/subpasta1/subpasta11
/home/rinaldo/arquivos/subpasta1/arquivo12.txt
/home/rinaldo/arquivos/subpasta1/arquivo13.txt
/home/rinaldo/arquivos/arquivo2.txt
----

. É possível pesquisar por um arquivo utilizando o método `find` e filtrar por atributos.
+
[source,java,indent=0]
.{java-package}/fileimprovements/Improvements_Find.java
----
include::{section-java-package}/fileimprovements/Improvements_Find.java[tag=code]
----
+
.Saída no console
[source,console]
----
Path: /home/rinaldo/arquivos

Todos os arquivos, ignorando diretórios, até o segundo nível: 
/home/rinaldo/arquivos/arquivo1.txt
/home/rinaldo/arquivos/arquivo3.txt
/home/rinaldo/arquivos/subpasta1/arquivo11.txt
/home/rinaldo/arquivos/subpasta1/arquivo12.txt
/home/rinaldo/arquivos/subpasta1/arquivo13.txt
/home/rinaldo/arquivos/arquivo2.txt
----
+
Perceba que ao utilizar o `find` a expressão lambda tem acesso ao `Path` e seus atributos, que é uma instância de `BasicFileAttributes`, permitindo uma maior flexibilidade na busca.

. É possível listar o conteúdo de um `Path` utilizando o método `list`.
+
[source,java,indent=0]
.{java-package}/fileimprovements/Improvements_List.java
----
include::{section-java-package}/fileimprovements/Improvements_List.java[tag=code]
----
+
.Saída no console
[source,console]
----
Path: /home/rinaldo/arquivos

Listagem do diretório: 
/home/rinaldo/arquivos/arquivo1.txt
/home/rinaldo/arquivos/arquivo3.txt
/home/rinaldo/arquivos/subpasta1
/home/rinaldo/arquivos/arquivo2.txt

Listagem do diretório com filtro: 
/home/rinaldo/arquivos/arquivo1.txt
/home/rinaldo/arquivos/arquivo3.txt
/home/rinaldo/arquivos/arquivo2.txt
----
+
Perceba que o `list` não apresenta elementos dos subdiretórios.

. É possível recuperar todas as linhas de um arquivo como um _Stream_ utilizando o método `lines`.
+
[source,java,indent=0]
.{java-package}/fileimprovements/Improvements_Lines.java
----
include::{section-java-package}/fileimprovements/Improvements_Lines.java[tag=code]
----
+
.Saída no console
[source,console]
----
Path: /home/rinaldo/arquivos/subpasta1/arquivo11.txt

Conteúdo do arquivo: 
1
2
3
4
5

Conteúdo do arquivo: 
3
4
5
----


****

* Presenting the New Stream Methods
+
Boyarsky, Jeanne; Selikoff, Scott. OCP: Oracle Certified Professional Java SE 8 Programmer II Study Guide (p. 486). Wiley. Edição do Kindle. 

* https://www.baeldung.com/java-list-directory-files[List Files in a Directory in Java.]

* https://docs.oracle.com/javase/8/docs/api/java/nio/file/Files.html[Class Files.] Java Plataform SE 7.

****