:java-package: src/org/j6toj8/fileio
:section-java-package: ../../../{java-package}

=== DirectoryStream and FileVisitor

.Objective
--------------------------------------------------
Recursively access a directory tree by using the DirectoryStream and FileVisitor interfaces
--------------------------------------------------

In this section we will present two classes for traversing directories: `DirectoryStream` and `FileVisitor`.

. You can check various attributes of a `Path` using the `Files` class.
+
[source,java,indent=0]
.{java-package}/recursiveaccess/Recursive_DirectoryStream.java
----
include::{section-java-package}/recursiveaccess/Recursive_DirectoryStream.java[tag=code]
----
+
.console output
[source,console]
----
Path: /home/rinaldo/files
/home/rinaldo/files/file1.txt
/home/rinaldo/files/file3.txt
/home/rinaldo/files/subfolder1
/home/rinaldo/files/file2.txt
/home/rinaldo/files/file1.txt
/home/rinaldo/files/file3.txt
/home/rinaldo/files/subfolder1
/home/rinaldo/files/file2.txt
----
+
Note that the instance of `DirectoryStream`:
+
* Can be used with try-with-resources.
* Can be iterated with for-each syntax.
* Can be iterated with the `forEach` method that receives a lambda expression.
* Throws exception if the file does not exist.
* Do not list subdirectories recursively, but only the first level.
* Not related to the Java 8 _Streams_ API.

. You can access an entire directory tree using a `FileVisitor`.
+
[source,java,indent=0]
.{java-package}/recursiveaccess/Recursive_SimpleFileVisitor.java
----
include::{section-java-package}/recursiveaccess/Recursive_SimpleFileVisitor.java[tag=code]
----
+
.console output
[source,console]
----
Path: /home/rinaldo/files
Visited file: /home/rinaldo/files/file1.txt. Size: 2
Visited file: /home/rinaldo/files/file3.txt. Size: 10
Visited file: /home/rinaldo/files/subfolder1/subfolder12/file122.txt. Size: 10
Visited file: /home/rinaldo/files/subfolder1/subfolder12/file121.txt. Size: 10
Visited file: /home/rinaldo/files/subfolder1/file11.txt. Size: 10
Visited file: /home/rinaldo/files/subfolder1/file12.txt. Size: 2
Visited file: /home/rinaldo/files/subfolder1/file13.txt. Size: 2
Visited file: /home/rinaldo/files/file2.txt. Size: 2
----
+
Note that all files in the directory and subdirectories were visited and printed on the console by invoking `Files.walkFileTree`. For each file found the `visitFile` method of the instance of `MyFileVisitor` was invoked.
+
Note that `FileVisitResult.CONTINUE` has been returned from the `visitFile` method. This instructs FileVisitor to continue visiting the file tree. You can also return `TERMINATE`, `SKIP_SUBTREE` and `SKIP_SIBLINGS`, which will be shown below.

. You can end the visit when needed by returning `FileVisitResult.TERMINATE`.
+
[source,java,indent=0]
.{java-package}/recursiveaccess/Recursive_VisitorTerminate.java
----
include::{section-java-package}/recursiveaccess/Recursive_VisitorTerminate.java[tag=code]
----
+
.console output
[source,console]
----
Path: /home/rinaldo/files
Visited file: /home/rinaldo/files/file1.txt. Size: 2
Visited file: /home/rinaldo/files/file3.txt. Size: 10
Visited file: /home/rinaldo/files/subfolder1/subfolder12/file122.txt. Size: 10
File found. Terminating.
----

. It is also possible to make decisions before and after visiting directories.
+
[source,java,indent=0]
.{java-package}/recursiveaccess/Recursive_VisitorDirectory.java
----
include::{section-java-package}/recursiveaccess/Recursive_VisitorDirectory.java[tag=code]
----
+
.console output
[source,console]
----
Path: /home/rinaldo/files
Visited file: /home/rinaldo/files/file1.txt. Size: 2
Visited file: /home/rinaldo/files/file3.txt. Size: 10
Visited file: /home/rinaldo/files/subfolder1/file11.txt. Size: 10
Visited file: /home/rinaldo/files/subfolder1/file12.txt. Size: 2
Visited file: /home/rinaldo/files/subfolder1/file13.txt. Size: 2
Visited file: /home/rinaldo/files/file2.txt. Size: 2
----

. You can also ignore all elements that are on the same level as a `Path`.
+
[source,java,indent=0]
.{java-package}/recursiveaccess/Recursive_VisitorIgnoreSiblings.java
----
include::{section-java-package}/recursiveaccess/Recursive_VisitorIgnoreSiblings.java[tag=code]
----
+
.console output
[source,console]
----
Path: /home/rinaldo/files
Visited file: /home/rinaldo/files/file1.txt. Size: 2
Visited file: /home/rinaldo/files/file3.txt. Size: 10
Visited file: /home/rinaldo/files/subfolder1/subfolder12/file122.txt. Size: 10
Visited file: /home/rinaldo/files/subfolder1/subfolder12/file121.txt. Size: 10
Visited file: /home/rinaldo/files/subfolder1/file11.txt. Size: 10
Visited file: /home/rinaldo/files/file2.txt. Size: 2
----

. You can directly implement the `FileVisitor` interface, instead of `SimpleFileVisitor`, and implement all of its methods.
+
[source,java,indent=0]
.{java-package}/recursiveaccess/Recursive_FileVisitor.java
----
include::{section-java-package}/recursiveaccess/Recursive_FileVisitor.java[tag=code]
----
+
.console output
[source,console]
----
Path: /home/rinaldo/files
Before visiting the directory: /home/rinaldo/files
Visited file: /home/rinaldo/files/file1.txt
Visited file: /home/rinaldo/files/file3.txt
Before visiting the directory: /home/rinaldo/files/subfolder1
Before visiting the directory: /home/rinaldo/files/subfolder1/subfolder12
Visited file: /home/rinaldo/files/subfolder1/subfolder12/file122.txt
Visited file: /home/rinaldo/files/subfolder1/subfolder12/file121.txt
After visiting the directory: /home/rinaldo/files/subfolder1/subfolder12
Visited file: /home/rinaldo/files/subfolder1/file11.txt
Before visiting the directory: /home/rinaldo/files/subfolder1/subfolder11
After visiting the directory: /home/rinaldo/files/subfolder1/subfolder11
Visited file: /home/rinaldo/files/subfolder1/file12.txt
Visited file: /home/rinaldo/files/subfolder1/file13.txt
After visiting the directory: /home/rinaldo/files/subfolder1
Visited file: /home/rinaldo/files/file2.txt
After visiting the directory: /home/rinaldo/files
----

. You can set additional options and limit depth using another version of the `walkFileTree` method.
+
[source,java,indent=0]
.{java-package}/recursiveaccess/Recursive_VisitorOptionsAndDepth.java
----
include::{section-java-package}/recursiveaccess/Recursive_VisitorOptionsAndDepth.java[tag=code]
----
+
.console output
[source,console]
----
Path: /home/rinaldo/files
Visited file: /home/rinaldo/files/file1.txt
Visited file: /home/rinaldo/files/file3.txt
Visited file: /home/rinaldo/files/subfolder1/subfolder12
Visited file: /home/rinaldo/files/subfolder1/file11.txt
Visited file: /home/rinaldo/files/subfolder1/subfolder11
Visited file: /home/rinaldo/files/subfolder1/file12.txt
Visited file: /home/rinaldo/files/subfolder1/file13.txt
Visited file: /home/rinaldo/files/file2.txt
----

.References
****

* Working with Directories
+
Boyarsky, Jeanne; Selikoff, Scott. OCP: Oracle Certified Professional Java SE 8 Programmer II Study Guide (p. 617). Wiley. Kindle Edition.

* https://www.baeldung.com/java-list-directory-files[List Files in a Directory in Java.]

* https://www.baeldung.com/java-nio2-file-visitor[A Guide To NIO2 FileVisitor.]

* https://docs.oracle.com/javase/7/docs/api/java/nio/file/DirectoryStream.html[Class DirectoryStream.] Java Plataform SE 7.

* https://docs.oracle.com/javase/7/docs/api/java/nio/file/FileVisitor.html[Class FileVisitor.] Java Plataform SE 7.

* https://docs.oracle.com/javase/tutorial/essential/io/pathOps.html[Path Operations.] The Javaâ„¢ Tutorials.

****
