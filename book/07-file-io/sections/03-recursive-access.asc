:java-package: src/org/j6toj8/fileio
:section-java-package: ../../../{java-package}

=== DirectoryStream e FileVisitor

.Objetivo
--------------------------------------------------
Recursively access a directory tree by using the DirectoryStream and FileVisitor interfaces
-
Acessar recursivamente uma árvore de diretório usando as interfaces DirectoryStream e FileVisitor
--------------------------------------------------

Nestão seção serão apresentadas duas classes para percorrer diretórios: `DirectoryStream` e `FileVisitor`.

. É possível checar vários atributos de um `Path` utilizando a classe `Files`.
+
[source,java,indent=0]
.{java-package}/recursiveaccess/Recursive_DirectoryStream.java
----
include::{section-java-package}/recursiveaccess/Recursive_DirectoryStream.java[tag=code]
----
+
.Saída no console
[source,console]
----
Path: /home/rinaldo/arquivos
/home/rinaldo/arquivos/arquivo1.txt
/home/rinaldo/arquivos/arquivo3.txt
/home/rinaldo/arquivos/subpasta1
/home/rinaldo/arquivos/arquivo2.txt
/home/rinaldo/arquivos/arquivo1.txt
/home/rinaldo/arquivos/arquivo3.txt
/home/rinaldo/arquivos/subpasta1
/home/rinaldo/arquivos/arquivo2.txt
----
+
Perceba que a instância de `DirectoryStream`:
+
* Pode ser utilizada com try-with-resources.
* Pode ser iterada com a sintaxe de for-each.
* Pode ser iterada com o método `forEach` que recebe uma expressão lambda.
* Lança exceção caso o arquivo não exista.
* Não lista os subdiretórios de forma recursiva, mas sim apenas o primeiro nível.
* Não tem relação com a API de _Streams_ do Java 8.

. É possível acessar toda uma árvore de diretórios utilizando um `FileVisitor`.
+
[source,java,indent=0]
.{java-package}/recursiveaccess/Recursive_SimpleFileVisitor.java
----
include::{section-java-package}/recursiveaccess/Recursive_SimpleFileVisitor.java[tag=code]
----
+
.Saída no console
[source,console]
----
Path: /home/rinaldo/arquivos
Arquivo visitado: /home/rinaldo/arquivos/arquivo1.txt. Tamanho: 2
Arquivo visitado: /home/rinaldo/arquivos/arquivo3.txt. Tamanho: 10
Arquivo visitado: /home/rinaldo/arquivos/subpasta1/subpasta12/arquivo122.txt. Tamanho: 10
Arquivo visitado: /home/rinaldo/arquivos/subpasta1/subpasta12/arquivo121.txt. Tamanho: 10
Arquivo visitado: /home/rinaldo/arquivos/subpasta1/arquivo11.txt. Tamanho: 10
Arquivo visitado: /home/rinaldo/arquivos/subpasta1/arquivo12.txt. Tamanho: 2
Arquivo visitado: /home/rinaldo/arquivos/subpasta1/arquivo13.txt. Tamanho: 2
Arquivo visitado: /home/rinaldo/arquivos/arquivo2.txt. Tamanho: 2
----
+
Perceba que todos os arquivos do diretório e subdiretórios foram visitados e impressos no console ao invocar `Files.walkFileTree`. Para cada arquivo encontrado foi invocado o método `visitFile` da instância de `MeuFileVisitor`.
+
Veja que foi retornado `FileVisitResult.CONTINUE` do método `visitFile`. Isso instrui o FileVisitor a continuar visitando a árvore de arquivos. Também é possível retornar `TERMINATE`, `SKIP_SUBTREE` e `SKIP_SIBLINGS`, que serão apresentados a seguir.

. É possível finalizar a visitação quando for necessário retornando `FileVisitResult.TERMINATE`.
+
[source,java,indent=0]
.{java-package}/recursiveaccess/Recursive_VisitorTerminate.java
----
include::{section-java-package}/recursiveaccess/Recursive_VisitorTerminate.java[tag=code]
----
+
.Saída no console
[source,console]
----
Path: /home/rinaldo/arquivos
Arquivo visitado: /home/rinaldo/arquivos/arquivo1.txt. Tamanho: 2
Arquivo visitado: /home/rinaldo/arquivos/arquivo3.txt. Tamanho: 10
Arquivo visitado: /home/rinaldo/arquivos/subpasta1/subpasta12/arquivo122.txt. Tamanho: 10
Arquivo encontrado. Finalizando.
----

. Também é possível tomar decisões antes e depois de visitar diretórios.
+
[source,java,indent=0]
.{java-package}/recursiveaccess/Recursive_VisitorDirectory.java
----
include::{section-java-package}/recursiveaccess/Recursive_VisitorDirectory.java[tag=code]
----
+
.Saída no console
[source,console]
----
Path: /home/rinaldo/arquivos
Arquivo visitado: /home/rinaldo/arquivos/arquivo1.txt. Tamanho: 2
Arquivo visitado: /home/rinaldo/arquivos/arquivo3.txt. Tamanho: 10
Arquivo visitado: /home/rinaldo/arquivos/subpasta1/arquivo11.txt. Tamanho: 10
Arquivo visitado: /home/rinaldo/arquivos/subpasta1/arquivo12.txt. Tamanho: 2
Arquivo visitado: /home/rinaldo/arquivos/subpasta1/arquivo13.txt. Tamanho: 2
Arquivo visitado: /home/rinaldo/arquivos/arquivo2.txt. Tamanho: 2
----

. Também é possível ignorar todos os elementos que estão no mesmo nível de um `Path`.
+
[source,java,indent=0]
.{java-package}/recursiveaccess/Recursive_VisitorIgnoreSiblings.java
----
include::{section-java-package}/recursiveaccess/Recursive_VisitorIgnoreSiblings.java[tag=code]
----
+
.Saída no console
[source,console]
----
Path: /home/rinaldo/arquivos
Arquivo visitado: /home/rinaldo/arquivos/arquivo1.txt. Tamanho: 2
Arquivo visitado: /home/rinaldo/arquivos/arquivo3.txt. Tamanho: 10
Arquivo visitado: /home/rinaldo/arquivos/subpasta1/subpasta12/arquivo122.txt. Tamanho: 10
Arquivo visitado: /home/rinaldo/arquivos/subpasta1/subpasta12/arquivo121.txt. Tamanho: 10
Arquivo visitado: /home/rinaldo/arquivos/subpasta1/arquivo11.txt. Tamanho: 10
Arquivo visitado: /home/rinaldo/arquivos/arquivo2.txt. Tamanho: 2
----

. É possível implementar diretamente a interface `FileVisitor`, ao invés de `SimpleFileVisitor`, e implementar todos os seus métodos.
+
[source,java,indent=0]
.{java-package}/recursiveaccess/Recursive_FileVisitor.java
----
include::{section-java-package}/recursiveaccess/Recursive_FileVisitor.java[tag=code]
----
+
.Saída no console
[source,console]
----
Path: /home/rinaldo/arquivos
Antes de visitar o diretório: /home/rinaldo/arquivos
Arquivo visitado: /home/rinaldo/arquivos/arquivo1.txt
Arquivo visitado: /home/rinaldo/arquivos/arquivo3.txt
Antes de visitar o diretório: /home/rinaldo/arquivos/subpasta1
Antes de visitar o diretório: /home/rinaldo/arquivos/subpasta1/subpasta12
Arquivo visitado: /home/rinaldo/arquivos/subpasta1/subpasta12/arquivo122.txt
Arquivo visitado: /home/rinaldo/arquivos/subpasta1/subpasta12/arquivo121.txt
Após de visitar o diretório: /home/rinaldo/arquivos/subpasta1/subpasta12
Arquivo visitado: /home/rinaldo/arquivos/subpasta1/arquivo11.txt
Antes de visitar o diretório: /home/rinaldo/arquivos/subpasta1/subpasta11
Após de visitar o diretório: /home/rinaldo/arquivos/subpasta1/subpasta11
Arquivo visitado: /home/rinaldo/arquivos/subpasta1/arquivo12.txt
Arquivo visitado: /home/rinaldo/arquivos/subpasta1/arquivo13.txt
Após de visitar o diretório: /home/rinaldo/arquivos/subpasta1
Arquivo visitado: /home/rinaldo/arquivos/arquivo2.txt
Após de visitar o diretório: /home/rinaldo/arquivos
----

. É possível definir opções adicionais e limitar a profundidade utilizando outra versão do método `walkFileTree`.
+
[source,java,indent=0]
.{java-package}/recursiveaccess/Recursive_VisitorOptionsAndDepth.java
----
include::{section-java-package}/recursiveaccess/Recursive_VisitorOptionsAndDepth.java[tag=code]
----
+
.Saída no console
[source,console]
----
Path: /home/rinaldo/arquivos
Arquivo visitado: /home/rinaldo/arquivos/arquivo1.txt
Arquivo visitado: /home/rinaldo/arquivos/arquivo3.txt
Arquivo visitado: /home/rinaldo/arquivos/subpasta1/subpasta12
Arquivo visitado: /home/rinaldo/arquivos/subpasta1/arquivo11.txt
Arquivo visitado: /home/rinaldo/arquivos/subpasta1/subpasta11
Arquivo visitado: /home/rinaldo/arquivos/subpasta1/arquivo12.txt
Arquivo visitado: /home/rinaldo/arquivos/subpasta1/arquivo13.txt
Arquivo visitado: /home/rinaldo/arquivos/arquivo2.txt
----

****

* Working with Directories
+
Boyarsky, Jeanne; Selikoff, Scott. OCP: Oracle Certified Professional Java SE 8 Programmer II Study Guide (p. 617). Wiley. Edição do Kindle. 

* https://www.baeldung.com/java-list-directory-files[List Files in a Directory in Java.]

* https://www.baeldung.com/java-nio2-file-visitor[A Guide To NIO2 FileVisitor.]

* https://docs.oracle.com/javase/7/docs/api/java/nio/file/DirectoryStream.html[Class DirectoryStream.] Java Plataform SE 7.

* https://docs.oracle.com/javase/7/docs/api/java/nio/file/FileVisitor.html[Class FileVisitor.] Java Plataform SE 7.

* https://docs.oracle.com/javase/tutorial/essential/io/pathOps.html[Path Operations.] The Java™ Tutorials.

****