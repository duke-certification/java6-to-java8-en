:java-package: src/org/j6toj8/fileio
:section-java-package: ../../../{java-package}

=== Paths

.Objetivo
--------------------------------------------------
Operate on file and directory paths by using the Paths class
-
Operar em arquivos e diretórios usando a classe Paths
--------------------------------------------------

As classes `Path` e `Paths` são novidades do Java 7.

A classe `Path` representa um arquivo ou um diretório no sistema de arquivos, e a maioria das suas operações não altera diretamente arquivos ou diretórios.

A classe `Paths` contém métodos estáticos para a criação de `Path`.

Para que os exemplos executem independente do sistema, será utilizado o diretório do usuário, que no Java está disponível em uma propriedade da JVM chamada `user.home`.

. Existem inúmeras formas de obter uma instância de `Path`.
+
[source,java,indent=0]
.{java-package}/paths/Paths_Creation.java
----
include::{section-java-package}/paths/Paths_Creation.java[tag=code]
----
+
.Saída no console
[source,console]
----
User home: /home/rinaldo
Path 1: /home/rinaldo
Path 2: /home/rinaldo
Path 3: /home/rinaldo
Path 4: /home/rinaldo/arquivo.txt
Path 5: /home/rinaldo/arquivo.txt
Path 6: C:/users/rinaldo
Path 7: C:/users/rinaldo
Path 8: rinaldo
Path 9: /home/rinaldo/arquivo.txt
Path 10: /home/rinaldo
----

. É possível criar uma instância de `Path` apontando para um diretório ou arquivo que não existe.
+
[source,java,indent=0]
.{java-package}/paths/Paths_CreationDoesntExists.java
----
include::{section-java-package}/paths/Paths_CreationDoesntExists.java[tag=code]
----
+
.Saída no console
[source,console]
----
User home: /home/rinaldo
Path: /home/rinaldo/arquivoQueNaoExiste.txt
----

. É possível converter um `Path` para um `File`.
+
[source,java,indent=0]
.{java-package}/paths/Paths_ToFile.java
----
include::{section-java-package}/paths/Paths_ToFile.java[tag=code]
----
+
.Saída no console
[source,console]
----
User home: /home/rinaldo
Path: /home/rinaldo/arquivoQueNaoExiste.txt
File: /home/rinaldo/arquivoQueNaoExiste.txt
----

. Existem inúmeros método no `Path` para recuperar informações a seu respeito.
+
[source,java,indent=0]
.{java-package}/paths/Paths_Information.java
----
include::{section-java-package}/paths/Paths_Information.java[tag=code]
----
+
.Saída no console
[source,console]
----
User home: /home/rinaldo

Representação em String: /home/rinaldo/arquivos/arquivo.txt
Nome do Arquivo: arquivo.txt
Diretório Superior: /home/rinaldo/arquivos
Diretório Raiz: /
É absoluto? true

Representação em String: home/rinaldo/arquivos
Nome do Arquivo: arquivos
Diretório Superior: home/rinaldo
Diretório Raiz: null
É absoluto? false
----

. É possível recuperar os elementos do `Path` individualmente.
+
[source,java,indent=0]
.{java-package}/paths/Paths_Names.java
----
include::{section-java-package}/paths/Paths_Names.java[tag=code]
----
+
.Saída no console
[source,console]
----
User home: /home/rinaldo

home
rinaldo
arquivos
arquivo.txt
----

. É possível converter um `Path` relativo para um absoluto.
+
[source,java,indent=0]
.{java-package}/paths/Paths_ToAbsolute.java
----
include::{section-java-package}/paths/Paths_ToAbsolute.java[tag=code]
----
+
.Saída no console
[source,console]
----
arquivos
É absoluto? false

/home/rinaldo/Desenvolvimento/git/java6-to-java8/arquivos
É absoluto? true
----
+
Neste caso a saída do console vai depende do diretório onde a aplicação está sendo executada.

. É possível criar _Sub-Paths_ a partir de um `Path`.
+
[source,java,indent=0]
.{java-package}/paths/Paths_SubPath.java
----
include::{section-java-package}/paths/Paths_SubPath.java[tag=code]
----
+
.Saída no console
[source,console]
----
User home: /home/rinaldo
Path: /home/rinaldo/arquivos/arquivo1.txt
home
home/rinaldo
rinaldo/arquivos
arquivos/arquivo1.txt
Exception in thread "main" java.lang.IllegalArgumentException
	at sun.nio.fs.UnixPath.subpath(UnixPath.java:348)
	at sun.nio.fs.UnixPath.subpath(UnixPath.java:43)
	at org.j6toj8.fileio.paths.Paths_SubPath.main(Paths_SubPath.java:28)
----

. É possível remover redundâncias de um `Path` com o método `normalize`.
+
[source,java,indent=0]
.{java-package}/paths/Paths_Normalize.java
----
include::{section-java-package}/paths/Paths_Normalize.java[tag=code]
----
+
.Saída no console
[source,console]
----
User home: /home/rinaldo

Path: /home/rinaldo/arquivos/./arquivo1.txt
Path normalize: /home/rinaldo/arquivos/arquivo1.txt

Path: /home/rinaldo/arquivos/../arquivo1.txt
Path normalize: /home/rinaldo/arquivo1.txt
----

. É possível unir duas instâncias de `Path` com o método `resolve`.
+
[source,java,indent=0]
.{java-package}/paths/Paths_Resolve.java
----
include::{section-java-package}/paths/Paths_Resolve.java[tag=code]
----
+
.Saída no console
[source,console]
----
User home: /home/rinaldo

Absoluto + Relativo: /home/rinaldo/arquivos/arquivo1.txt
Relativo + Absoluto: /home/rinaldo/arquivos
Absoluto + Absoluto: /home/rinaldo/arquivos
Relativo + Relativo: arquivo1.txt/arquivo1.txt
----
+
Perceba que sempre que o argumento é um `Path` absoluto, o resultado final é ele mesmo.
+
Quando o argumento é um `Path` relativo, ele é acrescentado ao original, seja este absoluto ou relativo.

. É possível derivar um `Path` de outro com o método `relativize`.
+
[source,java,indent=0]
.{java-package}/paths/Paths_Relativize.java
----
include::{section-java-package}/paths/Paths_Relativize.java[tag=code]
----
+
.Saída no console
[source,console]
----
User home: /home/rinaldo

Absoluto 1: /home/rinaldo/arquivos
Absoluto 2: /home/rinaldo/arquivos/arquivo1.txt
Relativo 1: arquivo1.txt
Relativo 2: arquivos/arquivo1.txt
Absoluto 1 + Absoluto 2: arquivo1.txt
Absoluto 2 + Absoluto 1: ..
Relativo 1 + Relativo 2: ../arquivos/arquivo1.txt
Relativo 2 + Relativo 1: ../../arquivo1.txt
java.lang.IllegalArgumentException: 'other' is different type of Path
	at sun.nio.fs.UnixPath.relativize(UnixPath.java:416)
	at sun.nio.fs.UnixPath.relativize(UnixPath.java:43)
	at org.j6toj8.fileio.paths.Paths_Relativize.main(Paths_Relativize.java:33)
java.lang.IllegalArgumentException: 'other' is different type of Path
	at sun.nio.fs.UnixPath.relativize(UnixPath.java:416)
	at sun.nio.fs.UnixPath.relativize(UnixPath.java:43)
	at org.j6toj8.fileio.paths.Paths_Relativize.main(Paths_Relativize.java:40)
----
+
Todas essas combinações podem aparecere no exame, então entenda bem como cada uma delas se comporta. Lembre-se principalmente de que não é possível derivar um `Path` absoluto de um relativo, e vice-versa.

. É possível converter um `Path` sintético, que não aponta de fato para um arquivo no sistema de arquivos, em um `Path` real, que aponta para um arquivo ou diretório que existe no sistema de arquivos.
+
[source,java,indent=0]
.{java-package}/paths/Paths_ToRealPath.java
----
include::{section-java-package}/paths/Paths_ToRealPath.java[tag=code]
----
+
.Saída no console
[source,console]
----
User home: /home/rinaldo
realPath: /home/rinaldo/arquivo1.txt
java.nio.file.NoSuchFileException: /home/rinaldo/arquivoQueNaoExiste.txt
	at sun.nio.fs.UnixException.translateToIOException(UnixException.java:86)
	at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:102)
	at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:107)
	at sun.nio.fs.UnixPath.toRealPath(UnixPath.java:837)
	at org.j6toj8.fileio.paths.Paths_ToRealPath.main(Paths_ToRealPath.java:25)
----
+
Perceba que é lançada exceção caso o arquivo realmente não exista no sistema de arquivos.

****

* Introducing NIO.2
+
Boyarsky, Jeanne; Selikoff, Scott. OCP: Oracle Certified Professional Java SE 8 Programmer II Study Guide (p. 454). Wiley. Edição do Kindle. 

* https://www.baeldung.com/java-nio-2-path[Java NIO2 Path API.]

* https://docs.oracle.com/javase/7/docs/api/java/nio/file/Paths.html[Class Paths.] Java Plataform SE 7.

* https://docs.oracle.com/javase/tutorial/essential/io/pathOps.html[Path Operations.] The Java™ Tutorials.

****