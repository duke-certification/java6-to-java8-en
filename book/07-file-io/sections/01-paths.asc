:java-package: src/org/j6toj8/fileio
:section-java-package: ../../../{java-package}

=== Paths

.Objective
--------------------------------------------------
Operate on file and directory paths by using the Paths class
--------------------------------------------------

The `Path` and `Paths` classes are new to Java 7.

The `Path` class represents a file or directory in the file system, and most of its operations do not directly change files or directories.

The `Paths` class contains static methods for creating `Path`.

For the examples to run system-independent, the user directory will be used, which in Java is available in a JVM property called `user.home`.

. There are numerous ways to get an instance of `Path`.
+
[source,java,indent=0]
.{java-package}/paths/Paths_Creation.java
----
include::{section-java-package}/paths/Paths_Creation.java[tag=code]
----
+
.console output
[source,console]
----
User home: /home/rinaldo
Path 1: /home/rinaldo
Path 2: /home/rinaldo
Path 3: /home/rinaldo
Path 4: /home/rinaldo/arquivo.txt
Path 5: /home/rinaldo/arquivo.txt
Path 6: C:/users/rinaldo
Path 7: C:/users/rinaldo
Path 8: rinaldo
Path 9: /home/rinaldo/arquivo.txt
Path 10: /home/rinaldo
----

. You can create an instance of `Path` by pointing to a directory or file that does not exist.
+
[source,java,indent=0]
.{java-package}/paths/Paths_CreationDoesntExists.java
----
include::{section-java-package}/paths/Paths_CreationDoesntExists.java[tag=code]
----
+
.console output
[source,console]
----
User home: /home/rinaldo
Path: /home/rinaldo/fileThatDoesNotExist.txt
----

. It is possible to convert a `Path` to a `File`.
+
[source,java,indent=0]
.{java-package}/paths/Paths_ToFile.java
----
include::{section-java-package}/paths/Paths_ToFile.java[tag=code]
----
+
.console output
[source,console]
----
User home: /home/rinaldo
Path: /home/rinaldo/fileThatDoesNotExist.txt
File: /home/rinaldo/fileThatDoesNotExist.txt
----

. There are numerous methods in `Path` to retrieve information about it.
+
[source,java,indent=0]
.{java-package}/paths/Paths_Information.java
----
include::{section-java-package}/paths/Paths_Information.java[tag=code]
----
+
.console output
[source,console]
----
User home: /home/rinaldo

String representation: /home/rinaldo/files/file.txt
File Name: file.txt
Top Directory: /home/rinaldo/files
Root Directory: /
Is it absolute?: true

String representation: home/rinaldo/files
File Name: files
Top Directory: home/rinaldo
Root Directory: null
Is it absolute?: false
----

. It is possible to retrieve the elements of `Path` individually.
+
[source,java,indent=0]
.{java-package}/paths/Paths_Names.java
----
include::{section-java-package}/paths/Paths_Names.java[tag=code]
----
+
.console output
[source,console]
----
User home: /home/rinaldo

home
rinaldo
files
file.txt
----

. It is possible to convert a relative `Path` to an absolute.
+
[source,java,indent=0]
.{java-package}/paths/Paths_ToAbsolute.java
----
include::{section-java-package}/paths/Paths_ToAbsolute.java[tag=code]
----
+
.console output
[source,console]
----
files
Is it absolute? false

/home/rinaldo/Desenvolvimento/git/java6-to-java8/files
Is it absolute? true
----
+
In this case the console output will depend on the directory where the application is running.

. You can create _Sub-Paths_ from a `Path`.
+
[source,java,indent=0]
.{java-package}/paths/Paths_SubPath.java
----
include::{section-java-package}/paths/Paths_SubPath.java[tag=code]
----
+
.console output
[source,console]
----
User home: /home/rinaldo
Path: /home/rinaldo/arquivos/file1.txt
home
home/rinaldo
rinaldo/files
arquivos/file1.txt
Exception in thread "main" java.lang.IllegalArgumentException
	at sun.nio.fs.UnixPath.subpath(UnixPath.java:348)
	at sun.nio.fs.UnixPath.subpath(UnixPath.java:43)
	at org.j6toj8.fileio.paths.Paths_SubPath.main(Paths_SubPath.java:28)
----

. You can remove redundancies from a `Path` with the `normalize` method.
+
[source,java,indent=0]
.{java-package}/paths/Paths_Normalize.java
----
include::{section-java-package}/paths/Paths_Normalize.java[tag=code]
----
+
.console output
[source,console]
----
User home: /home/rinaldo

Path: /home/rinaldo/files/./file1.txt
Path normalize: /home/rinaldo/files/file1.txt

Path: /home/rinaldo/files/../file1.txt
Path normalize: /home/rinaldo/file1.txt
----

. You can join two instances of `Path` with the `resolve` method.
+
[source,java,indent=0]
.{java-package}/paths/Paths_Resolve.java
----
include::{section-java-package}/paths/Paths_Resolve.java[tag=code]
----
+
.console output
[source,console]
----
User home: /home/rinaldo

Absolute + Relative: /home/rinaldo/files/file1.txt
Relative + Absolute: /home/rinaldo/files
Absolute + Absolute: /home/rinaldo/files
Relative + Relative: file1.txt/file1.txt
----
+
Note that whenever the argument is an absolute `Path`, the end result is itself.
+
When the argument is a relative `Path`, it is appended to the original, either absolute or relative.

. It is possible to derive one `Path` from another with the `relativize` method.
+
[source,java,indent=0]
.{java-package}/paths/Paths_Relativize.java
----
include::{section-java-package}/paths/Paths_Relativize.java[tag=code]
----
+
.console output
[source,console]
----
User home: /home/rinaldo

Absolute 1: /home/rinaldo/files
Absolute 2: /home/rinaldo/files/file1.txt
Relative 1: file1.txt
Relative 2: files/file1.txt
Absolute 1 + Absolute 2: file1.txt
Absolute 2 + Absolute 1: ..
Relative 1 + Relative 2: ../files/file1.txt
Relative 2 + Relative 1: ../../file1.txt
java.lang.IllegalArgumentException: 'other' is different type of Path
	at sun.nio.fs.UnixPath.relativize(UnixPath.java:416)
	at sun.nio.fs.UnixPath.relativize(UnixPath.java:43)
	at org.j6toj8.fileio.paths.Paths_Relativize.main(Paths_Relativize.java:33)
java.lang.IllegalArgumentException: 'other' is different type of Path
	at sun.nio.fs.UnixPath.relativize(UnixPath.java:416)
	at sun.nio.fs.UnixPath.relativize(UnixPath.java:43)
	at org.j6toj8.fileio.paths.Paths_Relativize.main(Paths_Relativize.java:40)
----
+
All of these combinations may appear on the exam, so understand well how each one behaves. Remember especially that it is not possible to derive an absolute `Path` from a relative, and vice versa.

. It is possible to convert a synthetic `Path`, which does not actually point to a file in the file system, into a real `Path`, which points to a file or directory that exists in the file system.
+
[source,java,indent=0]
.{java-package}/paths/Paths_ToRealPath.java
----
include::{section-java-package}/paths/Paths_ToRealPath.java[tag=code]
----
+
.console output
[source,console]
----
User home: /home/rinaldo
realPath: /home/rinaldo/file1.txt
java.nio.file.NoSuchFileException: /home/rinaldo/fileThatDoesNotExist.txt
	at sun.nio.fs.UnixException.translateToIOException(UnixException.java:86)
	at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:102)
	at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:107)
	at sun.nio.fs.UnixPath.toRealPath(UnixPath.java:837)
	at org.j6toj8.fileio.paths.Paths_ToRealPath.main(Paths_ToRealPath.java:25)
----
+
Note that an exception is thrown if the file does not actually exist in the file system.

.References
****

* Introducing NIO.2
+
Boyarsky, Jeanne; Selikoff, Scott. OCP: Oracle Certified Professional Java SE 8 Programmer II Study Guide (p. 454). Wiley. Kindle Edition.

* https://www.baeldung.com/java-nio-2-path[Java NIO2 Path API.]

* https://docs.oracle.com/javase/7/docs/api/java/nio/file/Paths.html[Class Paths.] Java Plataform SE 7.

* https://docs.oracle.com/javase/tutorial/essential/io/pathOps.html[Path Operations.] The Javaâ„¢ Tutorials.

****
