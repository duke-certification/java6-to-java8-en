:java-package: src/org/j6toj8/fileio
:section-java-package: ../../../{java-package}

=== Files

.Objetivo
--------------------------------------------------
Check, delete, copy, or move a file or directory by using the Files class
-
Checar, deletar, copiar ou mover um arquivo ou diretório utilizando a classe Files
--------------------------------------------------

A classe `Files` contém inúmeros métodos estáticos para lidar com instâncias de ``Path``. A maioria dos métodos recebem instâncias de `Path` para realizar alguma operação no arquivo ou diretório representado pelo ``Path``. Muitos irão lançar uma exceção caso o arquivo ou diretório não exista no sistema de arquivos.

. É possível checar vários atributos de um `Path` utilizando a classe `Files`.
+
[source,java,indent=0]
.{java-package}/files/Files_Checks.java
----
include::{section-java-package}/files/Files_Checks.java[tag=code]
----
+
.Saída no console
[source,console]
----
User home: /home/rinaldo
Path 1: /home/rinaldo/arquivo1.txt
Path 2: /home/rinaldo/arquivos
Path 1 existe? true
Path 2 existe? false
Path 1 NÃO existe? false
Path 2 NÃO existe? true
Path 1 é um diretório? false
Path 1 é um arquivo comum? true
Path 1 é um link simbólico? false
Aplicação possui permissão de leitura no Path 1? true
Aplicação possui permissão de escrita no Path 1? true
Aplicação possui permissão de execução no Path 1? false
Path 1 é oculto? false
Path 1 e Path 1 são iguais? true
----
+
Perceba que algumas chamadas lançam `IOException`. Isso ocorre pois elas irão lançar essa exceção caso o `Path` não exista no sistema de arquivos.

. É possível verificar se dois ``Path``'s são iguais, mesmo que estejam representados de forma diferente.
+
[source,java,indent=0]
.{java-package}/files/Files_SameFile.java
----
include::{section-java-package}/files/Files_SameFile.java[tag=code]
----
+
.Saída no console
[source,console]
----
User home: /home/rinaldo
Path 1 e Path 2 são iguais? true
Path 2 e Path 3 são iguais? true
Path 3 e Path 4 são iguais? true
Path 1 e Path 4 são iguais? true
----
+
Perceba que nesse exemplo todos os `Path` são iguais, pois apontam para o mesmo arquivo. Ou seja, o método realmetne verifica se o arquivo no sistema de arquivos é o mesmo, indepenente da forma como o diretório está sendo representado no `Path`. Isso funcionará inclusive para links simbólicos que apontam para o mesmo arquivo.

. É possível criar arquivos utilizando a classe `Files`.
+
[source,java,indent=0]
.{java-package}/files/Files_CreateFile.java
----
include::{section-java-package}/files/Files_CreateFile.java[tag=code]
----
+
.Saída no console
[source,console]
----
User home: /home/rinaldo
Path: /home/rinaldo/arquivo8481614.txt
Path existe? false
Path existe? true
----

. É possível criar um diretório utilizando a classe `Files`.
+
[source,java,indent=0]
.{java-package}/files/Files_CreateDirectory.java
----
include::{section-java-package}/files/Files_CreateDirectory.java[tag=code]
----
+
.Saída no console
[source,console]
----
User home: /home/rinaldo
Path: /home/rinaldo/arquivo411247666
Path existe? false
Path existe? true
----

. Caso o `Path` possua vários elementos a serem criados, é necessário utilizar o método `createDirectories`, no plural, caso contrário será lançada uma exceção.
+
[source,java,indent=0]
.{java-package}/files/Files_CreateDirectories.java
----
include::{section-java-package}/files/Files_CreateDirectories.java[tag=code]
----
+
.Saída no console
[source,console]
----
User home: /home/rinaldo
Path: /home/rinaldo/arquivo783746545/arquivo248290405/arquivo801162958
java.nio.file.NoSuchFileException: /home/rinaldo/arquivo783746545/arquivo248290405/arquivo801162958
	at sun.nio.fs.UnixException.translateToIOException(UnixException.java:86)
	at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:102)
	at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:107)
	at sun.nio.fs.UnixFileSystemProvider.createDirectory(UnixFileSystemProvider.java:384)
	at java.nio.file.Files.createDirectory(Files.java:674)
	at org.j6toj8.fileio.files.Files_CreateDirectories.main(Files_CreateDirectories.java:26)
Path existe? false
Path existe? true
----

. É possível copiar uma arquivo ou diretório.
+
[source,java,indent=0]
.{java-package}/files/Files_CopyPath.java
----
include::{section-java-package}/files/Files_CopyPath.java[tag=code]
----
+
.Saída no console
[source,console]
----
User home: /home/rinaldo
Path 1: /home/rinaldo/arquivo-1156333590.txt
Path 2: /home/rinaldo/arquivo-1156333590.txt-copia.txt
Path 1 existe? false
Path 1 existe? true
Path 2 existe? false
Path 2 existe? true
----
+
Ao copiar um arquivo, é necessário que os diretórios já existam, caso contrário será lançada uma exceção.
+
Ao copiar um diretório, o conteúdo dele não será copiado.

. É possível copiar a partir de um `FileInputStream` para um `Path`.
+
[source,java,indent=0]
.{java-package}/files/Files_CopyToPath.java
----
include::{section-java-package}/files/Files_CopyToPath.java[tag=code]
----
+
.Saída no console
[source,console]
----
User home: /home/rinaldo
Path 2 existe? false
Path 2 existe? true
----

. É possível copiar para um `FileOutputStream` a partir de `Path`.
+
[source,java,indent=0]
.{java-package}/files/Files_CopyFromPath.java
----
include::{section-java-package}/files/Files_CopyFromPath.java[tag=code]
----
+
.Saída no console
[source,console]
----
User home: /home/rinaldo
Path criado: /home/rinaldo/copia860242436.txt
Path criado existe?: true
----

. Também é possível mover um `Path`, seja ele um diretório ou um arquivo.
+
[source,java,indent=0]
.{java-package}/files/Files_MoveFile.java
----
include::{section-java-package}/files/Files_MoveFile.java[tag=code]
----
+
.Saída no console
[source,console]
----
User home: /home/rinaldo
Path Arquivo Origem: /home/rinaldo/arquivo-2044553267.txt
Path Arquivo Destino: /home/rinaldo/arquivo-2044553267.txt-movido.txt
Arquivo origem existe? false
Arquivo origem existe? true
Arquivo destino existe? false
Arquivo destino existe? true
Arquivo origem existe? false
----
+
Ao mover um diretório, o conteúdo será movido também.
+
Ao mover um `Path` para um diretório que não exista, será lançado exceção.

. É possível apagar um `Path`.
+
[source,java,indent=0]
.{java-package}/files/Files_DeletePath.java
----
include::{section-java-package}/files/Files_DeletePath.java[tag=code]
----
+
.Saída no console
[source,console]
----
User home: /home/rinaldo
Path: /home/rinaldo/arquivo-113782412.txt
Path existe? false
Path existe? true
Path existe? false
Path existe? false
----
+
Perceba que existem dois métodos diferentes para apagar. O primeira irá lançar exceção se o arquivo não existir, o segundo não irá lançar.
+
Ao tentar apagar um diretório com conteúdo será lançada uma exceção.

. É possível escrever e ler arquivos com `Files` e `Path`.
+
[source,java,indent=0]
.{java-package}/files/Files_WriteFile.java
----
include::{section-java-package}/files/Files_WriteFile.java[tag=code]
----
+
.Saída no console
[source,console]
----
User home: /home/rinaldo
Path: /home/rinaldo/arquivo-1467732927.txt
Path existe? false
Path existe? true
123
----
+
Perceba que primeiro foi criado o arquivo. Depois ele foi escrito com um `BufferedWriter`. E depois foi lido com um `BufferedReader`.

. É possível ler todas as linhas de um arquivo com uma única chamada.
+
[source,java,indent=0]
.{java-package}/files/Files_ReadAllLines.java
----
include::{section-java-package}/files/Files_ReadAllLines.java[tag=code]
----
+
.arquivo.txt
[source]
----
1
2
3
4
5
----
+
.Saída no console
[source,console]
----
User home: /home/rinaldo
[1, 2, 3, 4, 5]
----

. É possível verificar e alterar a data de modificação de um `Path`.
+
[source,java,indent=0]
.{java-package}/files/Files_LastModified.java
----
include::{section-java-package}/files/Files_LastModified.java[tag=code]
----
+
.Saída no console
[source,console]
----
User home: /home/rinaldo
Path: /home/rinaldo/arquivo805496635.txt
Data de Modificação: 2019-08-14T18:53:23.710066Z
Data de Modificação: 2019-08-14T18:53:33.724Z
----

. É possível modificar o _Owner_ (autor/dono) do arquivo.
+
[source,java,indent=0]
.{java-package}/files/Files_Owner.java
----
include::{section-java-package}/files/Files_Owner.java[tag=code]
----
+
.Saída no console
[source,console]
----
User home: /home/rinaldo
Path: /home/rinaldo/arquivo-2139809923.txt
rinaldo
rinaldo
----
+
Perceba que é necessário utilizar as classes `UserPrincipalLookupService` e `UserPrincipal` para buscar um usuário no sistema e atribuí-lo como novo _Owner_. Essas operações podem depender da permissão do usuário, e por isso podem lançar exceção caso não possam ser executadas.

. É possível recuperar todos os atributos de um arquivo com uma única chamada, utilizando a classe `BasicFileAttributes`.
+
[source,java,indent=0]
.{java-package}/files/Files_BasicFileAttributes.java
----
include::{section-java-package}/files/Files_BasicFileAttributes.java[tag=code]
----
+
.Saída no console
[source,console]
----
User home: /home/rinaldo
Tamanho: 10
É diretório? false
É link simbólico? false
É um arquivo comum? true
Não é nenhuma das opções acima? false
Data de Criação: 2019-08-14T18:45:44.189475Z
Último acesso: 2019-08-14T18:45:44.205475Z
Última modificação: 2019-08-14T18:45:44.189475Z
----
+
Utilizar a classe `BasicFileAttributes` para recuperar os atributos de um arquivo pode trazer ganhos de performance, já que é necessária apenas uma ida ao sistema operacional para recuperar todos os atributos.

. É possível modificar as datas de criação, modificação e acesso do arquivo com a classe `BasicFileAttributeView`.
+
[source,java,indent=0]
.{java-package}/files/Files_BasicFileAttributeView.java
----
include::{section-java-package}/files/Files_BasicFileAttributeView.java[tag=code]
----
+
.Saída no console
[source,console]
----
User home: /home/rinaldo

Data de Criação original: 2019-08-14T19:24:04.548Z
Último acesso original: 2019-08-14T19:24:04.548Z
Última modificação original: 2019-08-14T19:24:04.548Z

Data de Criação alterada: 2019-08-14T19:24:32.995Z
Último acesso alterada: 2019-08-14T19:24:32.995Z
Última modificação alterada: 2019-08-14T19:24:32.995Z
----
+
Perceba que a partir da classe `BasicFileAttributeView` também é possível ler os atributos do arquivo chamando o método `readAttributes`.

****

* Introducing NIO.2
+
Boyarsky, Jeanne; Selikoff, Scott. OCP: Oracle Certified Professional Java SE 8 Programmer II Study Guide (p. 454). Wiley. Edição do Kindle. 

* https://www.baeldung.com/java-nio-2-file-api[Introduction to the Java NIO2 File API.]

* https://docs.oracle.com/javase/7/docs/api/java/nio/file/Files.html[Class Files.] Java Plataform SE 7.

* https://docs.oracle.com/javase/tutorial/essential/io/pathOps.html[Path Operations.] The Java™ Tutorials.

****