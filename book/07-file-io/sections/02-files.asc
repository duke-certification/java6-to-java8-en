:java-package: src/org/j6toj8/fileio
:section-java-package: ../../../{java-package}

=== Files

.Objective
--------------------------------------------------
Check, delete, copy, or move a file or directory by using the Files class
--------------------------------------------------

The `Files` class contains numerous static methods for handling `Path` instances. Most methods receive instances of `Path` to perform some operation on the file or directory represented by `Path`. Many will throw an exception if the file or directory does not exist in the file system.

. You can check various attributes of a `Path` using the `Files` class.
+
[source,java,indent=0]
.{java-package}/files/Files_Checks.java
----
include::{section-java-package}/files/Files_Checks.java[tag=code]
----
+
.console output
[source,console]
----
User home: /home/rinaldo
Path 1: /home/rinaldo/arquivo1.txt
Path 2: /home/rinaldo/arquivos
Path 1 exist? true
Path 2 exist? false
Path 1 does NOT exist? false
Path 2 does NOT exist? true
Is Path 1 a directory? false
Is Path 1 a common file? true
Is Path 1 a symbolic link? false
Application has read permission on Path 1? true
Application has write permission on Path 1? true
Application has execution permission on Path 1? false
Is Path 1 hidden? false
Are Path 1 and Path 1 the same? true
----
+
Note that some calls throw `IOException`. This is because they will throw this exception if `Path` does not exist in the file system.

. You can verify that two ``Path```s are the same even if they are represented differently.
+
[source,java,indent=0]
.{java-package}/files/Files_SameFile.java
----
include::{section-java-package}/files/Files_SameFile.java[tag=code]
----
+
.console output
[source,console]
----
User home: /home/rinaldo
Are Path 1 and Path 2 the same? true
Are Path 2 and Path 3 the same? true
Are Path 3 and Path 4 the same? true
Are Path 1 and Path 4 the same? true
----
+
Note that in this example all `Path` are the same as they point to the same file. That is, the method actually checks if the file in the file system is the same regardless of how the directory is being represented in `Path`. This will even work for symbolic links that point to the same file.

. You can create files using the `Files` class.
+
[source,java,indent=0]
.{java-package}/files/Files_CreateFile.java
----
include::{section-java-package}/files/Files_CreateFile.java[tag=code]
----
+
.console output
[source,console]
----
User home: /home/rinaldo
Path: /home/rinaldo/file8481614.txt
Path exist? false
Path exist? true
----

. You can create a directory using the `Files` class.
+
[source,java,indent=0]
.{java-package}/files/Files_CreateDirectory.java
----
include::{section-java-package}/files/Files_CreateDirectory.java[tag=code]
----
+
.console output
[source,console]
----
User home: /home/rinaldo
Path: /home/rinaldo/file411247666
Path exist? false
Path exist? true
----

. If `Path` has multiple elements to create, you must use the `createDirectories` method, otherwise an exception will be thrown.
+
[source,java,indent=0]
.{java-package}/files/Files_CreateDirectories.java
----
include::{section-java-package}/files/Files_CreateDirectories.java[tag=code]
----
+
.console output
[source,console]
----
User home: /home/rinaldo
Path: /home/rinaldo/file783746545/file248290405/file801162958
java.nio.file.NoSuchFileException: /home/rinaldo/arquivo783746545/arquivo248290405/file801162958
	at sun.nio.fs.UnixException.translateToIOException(UnixException.java:86)
	at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:102)
	at sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:107)
	at sun.nio.fs.UnixFileSystemProvider.createDirectory(UnixFileSystemProvider.java:384)
	at java.nio.file.Files.createDirectory(Files.java:674)
	at org.j6toj8.fileio.files.Files_CreateDirectories.main(Files_CreateDirectories.java:26)
Path exist? false
Path exist? true
----

. You can copy a file or directory.
+
[source,java,indent=0]
.{java-package}/files/Files_CopyPath.java
----
include::{section-java-package}/files/Files_CopyPath.java[tag=code]
----
+
.console output
[source,console]
----
User home: /home/rinaldo
Path 1: /home/rinaldo/file-1156333590.txt
Path 2: /home/rinaldo/file-1156333590.txt-copy.txt
Path 1 exist? false
Path 1 exist? true
Path 2 exist? false
Path 2 exist? true
----
+
When copying a file, directories must already exist, otherwise an exception will be thrown.
+
When copying a directory, its contents will not be copied.

. It is possible to copy from a `FileInputStream` to a `Path`.
+
[source,java,indent=0]
.{java-package}/files/Files_CopyToPath.java
----
include::{section-java-package}/files/Files_CopyToPath.java[tag=code]
----
+
.console output
[source,console]
----
User home: /home/rinaldo
Path 2 exist? false
Path 2 exist? true
----

. You can copy to a `FileOutputStream` from `Path`.
+
[source,java,indent=0]
.{java-package}/files/Files_CopyFromPath.java
----
include::{section-java-package}/files/Files_CopyFromPath.java[tag=code]
----
+
.console output
[source,console]
----
User home: /home/rinaldo
Created Path: /home/rinaldo/copy860242436.txt
Created Path exist?: true
----

. It is also possible to move a `Path`, either a directory or a file.
+
[source,java,indent=0]
.{java-package}/files/Files_MoveFile.java
----
include::{section-java-package}/files/Files_MoveFile.java[tag=code]
----
+
.console output
[source,console]
----
User home: /home/rinaldo
Path Source File: /home/rinaldo/file-2044553267.txt
Path Destination File: /home/rinaldo/file-2044553267.txt-moved.txt
Source File exist? false
Source File exist? true
Destination File exist? false
Destination File exist? true
Source File exist? false
----
+
When you move a directory, the content will be moved as well.
+
Moving a `Path` to a non-existent directory will throw an exception.

. It is possible to delete a `Path`.
+
[source,java,indent=0]
.{java-package}/files/Files_DeletePath.java
----
include::{section-java-package}/files/Files_DeletePath.java[tag=code]
----
+
.console output
[source,console]
----
User home: /home/rinaldo
Path: /home/rinaldo/file-113782412.txt
Path exist? false
Path exist? true
Path exist? false
Path exist? false
----
+
Note that there are two different methods for erasing. The first will throw exception if the file does not exist, the second will not throw.
+
Attempting to delete a directory with content will throw an exception.

. You can write and read files with `Files` and `Path`.
+
[source,java,indent=0]
.{java-package}/files/Files_WriteFile.java
----
include::{section-java-package}/files/Files_WriteFile.java[tag=code]
----
+
.console output
[source,console]
----
User home: /home/rinaldo
Path: /home/rinaldo/file-1467732927.txt
Path exist? false
Path exist? true
123
----
+
Note that the file was first created. Then it was written with a `BufferedWriter`. And then it was read with a `BufferedReader`.

. You can read all lines of a file with a single call.
+
[source,java,indent=0]
.{java-package}/files/Files_ReadAllLines.java
----
include::{section-java-package}/files/Files_ReadAllLines.java[tag=code]
----
+
.file.txt
[source]
----
1
2
3
4
5
----
+
.console output
[source,console]
----
User home: /home/rinaldo
[1, 2, 3, 4, 5]
----

. You can check and change the modification date of a `Path`.
+
[source,java,indent=0]
.{java-package}/files/Files_LastModified.java
----
include::{section-java-package}/files/Files_LastModified.java[tag=code]
----
+
.console output
[source,console]
----
User home: /home/rinaldo
Path: /home/rinaldo/file805496635.txt
Date Modified: 2019-08-14T18:53:23.710066Z
Date Modified: 2019-08-14T18:53:33.724Z
----

. You can modify the _Owner_ of the file.
+
[source,java,indent=0]
.{java-package}/files/Files_Owner.java
----
include::{section-java-package}/files/Files_Owner.java[tag=code]
----
+
.console output
[source,console]
----
User home: /home/rinaldo
Path: /home/rinaldo/file-2139809923.txt
rinaldo
rinaldo
----
+
Note that you must use the `UserPrincipalLookupService` and `UserPrincipal` classes to fetch a user from the system and assign them as new _Owner_. These operations may depend on the user's permission, and so may throw exceptions if they cannot be performed.

. You can retrieve all attributes of a file with a single call using the `BasicFileAttributes` class.
+
[source,java,indent=0]
.{java-package}/files/Files_BasicFileAttributes.java
----
include::{section-java-package}/files/Files_BasicFileAttributes.java[tag=code]
----
+
.console output
[source,console]
----
User home: /home/rinaldo
Size: 10
Is it directory? false
Is it symbolic link? false
Is it a common file? true
Not any of the above? false
Creation date: 2019-08-14T18:45:44.189475Z
Last acess: 2019-08-14T18:45:44.205475Z
Last Modified: 2019-08-14T18:45:44.189475Z
----
+
Using the `BasicFileAttributes` class to retrieve the attributes of a file can bring performance gains, since only one trip to the operating system is required to retrieve all attributes.

. You can modify file creation, modification, and access dates with the `BasicFileAttributeView` class.
+
[source,java,indent=0]
.{java-package}/files/Files_BasicFileAttributeView.java
----
include::{section-java-package}/files/Files_BasicFileAttributeView.java[tag=code]
----
+
.console output
[source,console]
----
User home: /home/rinaldo

Original creation date: 2019-08-14T19:24:04.548Z
Original last access: 2019-08-14T19:24:04.548Z
Original last modified: 2019-08-14T19:24:04.548Z

Creation date changed: 2019-08-14T19:24:32.995Z
Last access changed: 2019-08-14T19:24:32.995Z
Last modified changed: 2019-08-14T19:24:32.995Z
----
+
Note that from the `BasicFileAttributeView` class you can also read the file attributes by calling the `readAttributes` method.

.References
****

* Introducing NIO.2
+
Boyarsky, Jeanne; Selikoff, Scott. OCP: Oracle Certified Professional Java SE 8 Programmer II Study Guide (p. 454). Wiley. Kindle Edition.

* https://www.baeldung.com/java-nio-2-file-api[Introduction to the Java NIO2 File API.]

* https://docs.oracle.com/javase/7/docs/api/java/nio/file/Files.html[Class Files.] Java Plataform SE 7.

* https://docs.oracle.com/javase/tutorial/essential/io/pathOps.html[Path Operations.] The Java™ Tutorials.

****
