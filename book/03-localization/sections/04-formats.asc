
:java-package: src/org/j6toj8/localization
:section-java-package: ../../../{java-package}

=== Format dates and numbers

.Objective
--------------------------------------------------
Format dates, numbers, and currency values for localization with the NumberFormat and DateFormat classes, including number and date format patterns.
--------------------------------------------------

Still, within the subject of Localization and Internationalization, it is common the need to present dates, numbers and monetary values in different formats.

The certification exam covers five main formatting classes:

* `NumberFormat` -> General formatting of numbers, monetary values, percentages, and rounded integers, possibly based on `Locale`.
* `DecimalFormat` -> Number formatting when more specific or custom format definitions are required.
* `DateFormat` -> Date and time formatting before Java 8 using predefined formats.
* `SimpleDateFormat` -> Date and time formatting before Java 8 using more specific or custom formats.
* `DateTimeFormatter` -> Date and time formatting after Java 8.

==== NumberFormat

. You can get an instance of `NumberFormat` from several static methods, depending on your need.
+
[source,java,indent=0]
.{java-package}/formats/numberformat/NumberFormat_Instance.java
----
include::{section-java-package}/formats/numberformat/NumberFormat_Instance.java[tag=code]
----
+
Remember that if you do not enter `Locale`, the default will be used. Ideally, always inform `Locale`.

. `NumberFormat` can be used to transform numbers into strings.
+
[source,java,indent=0]
.{java-package}/formats/numberformat/NumberFormat_NumberToString.java
----
include::{section-java-package}/formats/numberformat/NumberFormat_NumberToString.java[tag=code]
----
+
.console output
[source,console]
----
pt_BR: 1.000,05
en_US: 1,000.05
fr_FR: 1 000,05
----
+
Note that the representation of the number changes according to `Locale`.

. The `NumberFormat` can be used to transform strings into numbers.
+
[source,java,indent=0]
.{java-package}/formats/numberformat/NumberFormat_StringToNumber.java
----
include::{section-java-package}/formats/numberformat/NumberFormat_StringToNumber.java[tag=code]
----
+
.console output
[source,console]
----
pt_BR: 1000.05
en_US: 100005
fr_FR: 1000.05
----
+
Note that depending on `Locale` we are representing a different number, and this changes the parse result.

. `NumberFormat` can be used to transform strings into monetary values, and vice versa.
+
[source,java,indent=0]
.{java-package}/formats/numberformat/NumberFormat_Currency.java
----
include::{section-java-package}/formats/numberformat/NumberFormat_Currency.java[tag=code]
----
+
.console output
[source,console]
----
pt_BR: R$ 1.000,05
en_US: $1,000.05
fr_FR: 1 000,05 €
pt_BR: 1000.05
Unparseable number: "R$ 1000,05"
Unparseable number: "R$ 1000,05"
----
+
Note again that the result changes according to `Locale`. Also, it is not possible to convert the representation of the Brazilian currency with a `en_US` or `fr_FR` `Locale`.

. `NumberFormat` can be used to transform strings into percentages, and vice versa.
+
[source,java,indent=0]
.{java-package}/formats/numberformat/NumberFormat_Percent.java
----
include::{section-java-package}/formats/numberformat/NumberFormat_Percent.java[tag=code]
----
+
.console output
[source,console]
----
pt_BR: 90%
en_US: 90%
fr_FR: 90 %
pt_BR: 0.8
en_US: 0.8
Unparseable number: "80%"
----
+
Note that when formatting, `100%` is `1`, so `80%` is `0.8`. Also, in `Locale fr_FR`, the `80%` representation is not valid.

. `NumberFormat` can get complicated when dealing with commas.
+
[source,java,indent=0]
.{java-package}/formats/numberformat/NumberFormat_Percent2.java
----
include::{section-java-package}/formats/numberformat/NumberFormat_Percent2.java[tag=code]
----
+
.console output
[source,console]
----
pt_BR: 0.802
en_US: 8.02
----
+
In `pt_BR` `Locale` we have the expected result. However, in `en_US` `Locale`, `80.2%` becomes `802%` because the comma is not used as a decimal separator.

==== DecimalFormat

While `NumberFormat` allows you to use predefined formats, `DecimalFormat` allows for greater customization. An example format for `DecimalFormat` is `\#\##,\###.\###`.

* `#` -> fills the position with a number, or omits if there is nothing.
* `0` -> fills the position with a number, or 0 if there is nothing.
* `.` -> indicates where the position of the decimal separator is.
* `,` -> indicates where the group separator position is.

//-- ASC: force a new list not associated with the bullets above

. You can get an instance of `DecimalFormat` using the constructor.
+
[source,java,indent=0]
.{java-package}/formats/decimalformat/DecimalFormat_Instance.java
----
include::{section-java-package}/formats/decimalformat/DecimalFormat_Instance.java[tag=code]
----
+
.console output
[source,console]
----
###,###.###: 12.345,67
000,000.###: 012.345,67
###,###.000: 12.345,670
000,000.000: 012.345,670
###.##: 12345,67
000000.000: 012345,670
###: 12346
----
+
I'm running code where the default `Locale` is `pt_BR`, so the console output has commas to separate groups and periods to separate decimals.

. To use a specific `Locale` it is necessary to instantiate a `NumberFormat` and _cast_ to `DecimalFormat`.
+
[source,java,indent=0]
.{java-package}/formats/decimalformat/DecimalFormat_Locale.java
----
include::{section-java-package}/formats/decimalformat/DecimalFormat_Locale.java[tag=code]
----
+
.console output
[source,console]
----
12,345.67
----

. You can put other symbols or words in the format of `DecimalFormat`.
+
[source,java,indent=0]
.{java-package}/formats/decimalformat/DecimalFormat_Strings.java
----
include::{section-java-package}/formats/decimalformat/DecimalFormat_Strings.java[tag=code]
----
+
.console output
[source,console]
----
Number 12.345,67 formatted
----

==== DateFormat

To format Date and Time before Java 8, the `DateFormat` and `SimpleDateFormat` classes are used. These classes generally work with the `Date` class and are part of the `java.text` package, unlike `DateTimeFormatter` which is from the new `java.time.format` package.

. Getting instances of `DateFormat` is a lot like `NumberFormat`.
. You can set the instance format to `SHORT`, `MEDIUM`, `LONG` or `FULL`.
. You can define the `Locale` of instances.
+
[source,java,indent=0]
.{java-package}/formats/dateformat/DateFormat_Instance.java
----
include::{section-java-package}/formats/dateformat/DateFormat_Instance.java[tag=code]
----
+
.console output
[source,console]
----
08/09/2001
22:46:40
08/09/2001 22:46:40
8 de Setembro de 2001 22h46min40s BRT
September 8, 2001 10:46:40 PM BRT
----

. It is also possible to transform `String` to `Date` using the `parse` method.
+
[source,java,indent=0]
.{java-package}/formats/dateformat/DateFormat_Parse.java
----
include::{section-java-package}/formats/dateformat/DateFormat_Parse.java[tag=code]
----
+
.console output
[source,console]
----
Sat Sep 08 00:00:00 BRT 2001
Thu Jan 01 22:46:00 BRT 1970
Sat Sep 08 22:46:00 BRT 2001
Unparseable date: "08/09/2001"
----
+
Note that an exception occurred while trying to convert a date using a format that expects Date and Time.

==== SimpleDateFormat

The `SimpleDateFormat` class allows you to create more customized formats for displaying Date and Time, such as `dd/MM/yyyy HH:mm:ss`. The following are the most important letters used for exam formatting:

* `y` -> Year (2019, 19)
* `M` -> Month (8, 08, Aug, August)
* `d` -> Day (06)
* `h` -> Time in AM / PM format
* `H` -> Time in 24H format
* `m` -> Minutes
* `s` -> Seconds

In general (there are exceptions), the more letters are used, the longer the format presented. For example:

* `M` -> 8
* `MM` -> 08
* `MMM` -> Aug
* `MMMM` -> August

//-- ASC: force a new list not associated with the bullets above

. You can create custom formats to format a `Date` using the `SimpleDateFormat` constructor.
+
[source,java,indent=0]
.{java-package}/formats/simpledateformat/SimpleDateFormat_Instance.java
----
include::{section-java-package}/formats/simpledateformat/SimpleDateFormat_Instance.java[tag=code]
----
+
.console output
[source,console]
----
08 09 01 - 22 46 40
08 09 01
22 46 40
----

. You can also create `Date` from `String` using the `parse` method.
+
[source,java,indent=0]
.{java-package}/formats/simpledateformat/SimpleDateFormat_Parse.java
----
include::{section-java-package}/formats/simpledateformat/SimpleDateFormat_Parse.java[tag=code]
----
+
.console output
[source,console]
----
Sat Sep 08 22:46:40 BRT 2001
Sat Sep 08 00:00:00 BRT 2001
Thu Jan 01 22:46:40 BRT 1970
Unparseable date: "22 46 40"
----
+
Note the exception when trying to use the wrong format.

==== DateTimeFormatter

Java 8 brings the `DateTimeFormatter` class which has several ways to format and transform `Date/Time` into `String`, and vice versa.

. You can get predefined instances of `DateTimeFormatter`, which represent `ISO` or `RFC` formats.
+
[source,java,indent=0]
.{java-package}/formats/datetimeformatter/DateTimeFormatter_Predefined.java
----
include::{section-java-package}/formats/datetimeformatter/DateTimeFormatter_Predefined.java[tag=code]
----
+
.console output
[source,console]
----
2019-08-06
11:40:00
2019-08-06T11:40:00
2019-218
2019-W32-2
----

. You can get predefined instances of `DateTimeFormatter`, which represent localized formats, through the `FormatStyle` class.
+
[source,java,indent=0]
.{java-package}/formats/datetimeformatter/DateTimeFormatter_FormatStyle.java
----
include::{section-java-package}/formats/datetimeformatter/DateTimeFormatter_FormatStyle.java[tag=code]
----
+
.console output
[source,console]
----
06/08/19 11:40
06/08/2019 11:40:00
06/08/19
11:40
----
+
The result depends on where the code is being executed. This code was executed in the default `pt_BR` `Locale`.

. You can change the `Locale` used by `DateTimeFormatter`.
+
[source,java,indent=0]
.{java-package}/formats/datetimeformatter/DateTimeFormatter_Locale.java
----
include::{section-java-package}/formats/datetimeformatter/DateTimeFormatter_Locale.java[tag=code]
----
+
.console output
[source,console]
----
8/6/19 11:40 AM
Aug 6, 2019 11:40:00 AM
----

. You can get custom instances of `DateTimeFormatter`.
+
[source,java,indent=0]
.{java-package}/formats/datetimeformatter/DateTimeFormatter_Custom.java
----
include::{section-java-package}/formats/datetimeformatter/DateTimeFormatter_Custom.java[tag=code]
----
+
.console output
[source,console]
----
06 08 19 - 11 40 00
----
+
To create a custom `DateTimeFormatter` you need to know what each letter of the format represents. Return to the `SimpleDateFormat` section if you do not remember.

. You cannot format a Date/Time if the given object does not have the required fields. An example would be to try to present the Date and provide a `LocalTime`.
+
[source,java,indent=0]
.{java-package}/formats/datetimeformatter/DateTimeFormatter_Error.java
----
include::{section-java-package}/formats/datetimeformatter/DateTimeFormatter_Error.java[tag=code]
----
+
.console output
[source,console]
----
2019-08-06
2019-08-06
Exception in thread "main" java.time.temporal.UnsupportedTemporalTypeException: Unsupported field: Year
	at java.time.LocalTime.get0(LocalTime.java:679)
	at java.time.LocalTime.getLong(LocalTime.java:656)
	at java.time.format.DateTimePrintContext$1.getLong(DateTimePrintContext.java:205)
	at java.time.format.DateTimePrintContext.getValue(DateTimePrintContext.java:298)
	at java.time.format.DateTimeFormatterBuilder$NumberPrinterParser.format(DateTimeFormatterBuilder.java:2551)
	at java.time.format.DateTimeFormatterBuilder$CompositePrinterParser.format(DateTimeFormatterBuilder.java:2190)
	at java.time.format.DateTimeFormatter.formatTo(DateTimeFormatter.java:1746)
	at java.time.format.DateTimeFormatter.format(DateTimeFormatter.java:1720)
	at java.time.LocalTime.format(LocalTime.java:1413)
	at org.j6toj8.localization.formats.datetimeformatter.DateTimeFormatter_Error.main(DateTimeFormatter_Error.java:18)
----

. The same error may occur when using a custom format.
+
[source,java,indent=0]
.{java-package}/formats/datetimeformatter/DateTimeFormatter_ErrorCustom.java
----
include::{section-java-package}/formats/datetimeformatter/DateTimeFormatter_ErrorCustom.java[tag=code]
----
+
.console output
[source,console]
----
11 40 00
11 40 00
Exception in thread "main" java.time.temporal.UnsupportedTemporalTypeException: Unsupported field: HourOfDay
	at java.time.LocalDate.get0(LocalDate.java:680)
	at java.time.LocalDate.getLong(LocalDate.java:659)
	at java.time.format.DateTimePrintContext.getValue(DateTimePrintContext.java:298)
	at java.time.format.DateTimeFormatterBuilder$NumberPrinterParser.format(DateTimeFormatterBuilder.java:2551)
	at java.time.format.DateTimeFormatterBuilder$CompositePrinterParser.format(DateTimeFormatterBuilder.java:2190)
	at java.time.format.DateTimeFormatter.formatTo(DateTimeFormatter.java:1746)
	at java.time.format.DateTimeFormatter.format(DateTimeFormatter.java:1720)
	at java.time.LocalDate.format(LocalDate.java:1691)
	at org.j6toj8.localization.formats.datetimeformatter.DateTimeFormatter_ErrorCustom.main(DateTimeFormatter_ErrorCustom.java:20)
----
+
In this case, an exception is thrown because `LocalDate` has no hour, minute, or second.

. You can also do the opposite: convert a `String` to a `Date/Time` class. For this, there are the `parse` methods.
+
[source,java,indent=0]
.{java-package}/formats/datetimeformatter/DateTimeFormatter_Parse.java
----
include::{section-java-package}/formats/datetimeformatter/DateTimeFormatter_Parse.java[tag=code]
----
+
.console output
[source,console]
----
2019-08-06T11:40
2019-08-06T11:40
2019-08-06T11:40
----

. All methods used to `format` and `parse` can also be invoked directly in the `DateTimeFormatter` instance.
+
[source,java,indent=0]
.{java-package}/formats/datetimeformatter/DateTimeFormatter_Inverted.java
----
include::{section-java-package}/formats/datetimeformatter/DateTimeFormatter_Inverted.java[tag=code]
----
+
.console output
[source,console]
----
2019-08-06T11:40
2019-08-06T11:40:00
{},ISO resolved to 2019-08-06T11:40
2019-08-06T11:40
----
+
However, note that when using the `parse` method directly in `DateTimeFormatter`, it is necessary to convert the result to a `LocalDateTime`.


.References
****

* Adding Internationalizationand Localization
+
Boyarsky, Jeanne; Selikoff, Scott. OCP: Oracle Certified Professional Java SE 8 Programmer II Study Guide (p. 255). Wiley. Kindle Edition.

* Formatting and Parsing
+
Boyarsky, Jeanne; Selikoff, Scott. OCP: Oracle Certified Professional Java SE 8 Programmer II Study Guide (p. 603). Wiley. Kindle Edition.

* https://stackoverflow.com/questions/4772425/change-date-format-in-a-java-string[Change date format in a Java string.] BalusC.

* https://www.baeldung.com/java-8-date-time-intro[Introduction to the Java 8 Date/Time API.]

* https://www.baeldung.com/java-datetimeformatter[Guide to DateTimeFormatter.]

* https://www.baeldung.com/java-decimalformat[A Practical Guide to DecimalFormat.]

* https://www.baeldung.com/java-simple-date-format[A Guide to SimpleDateFormat.]

* https://docs.oracle.com/javase/tutorial/i18n/format/index.html[Lesson: Formatting] The Java™ Tutorials.

* https://docs.oracle.com/javase/tutorial/datetime/iso/format.html[Parsing and Formatting.] The Java™ Tutorials.

* https://docs.oracle.com/javase/tutorial/java/data/numberformat.html[Formatting Numeric Print Output] The Java™ Tutorials.

****
