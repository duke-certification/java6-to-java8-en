:java-package: src/org/j6toj8/localization
:section-java-package: ../../../{java-package}

=== Localização (Locale)

.Objetivo
--------------------------------------------------
Describe the advantages of localizing an application and developing code that defines, reads, and sets the locale with a Locale object.
-
Descrever as vantagens de localizar uma aplicação e desenvolver código que defina, leia e aplique a localidade em um objeto Locale.
--------------------------------------------------

É esperado que o candidato saiba compreender e analisar aspectos de Internacionalização e Localização, incluindo o uso da da classe `Locale`.

Alguns aspectos de uma aplicação podem depender do país e da linguagem. Por exemplo:

* Formatos de escrita de data
** O dia 6 de Agosto de 2019 seria representado no Brasil por `06/08/2019`, porém nos EUA seria `08/06/2019`.
* Formatos de escrita de valores monetários
** Dez Reais no Brasil seriam representados por `R$ 10`, enquanto na França Dez Euros seriam `10 €`.
* Formatos de separação de casas decimais ou milhares
** No Brasil utiliza-se vírgula para separar decimais e pontos para milhares: `100.245,03`. Nos EUA, utiliza-se o inverso: `100,245.03`.

Por isso, para que sua aplicação lide corretamente com esses cenários, é necessário compreender dois aspectos: *Internacionalização* (_Internationalization_) e *Localização* (_Localization_).

A *Internacionalização*, também chamada de *_i18n_*, é o ato de projetar sua aplicação para que seja possível facilmente adaptá-la para utilizar novos formatos e idiomas.

A *Localização*, também chamada de *_l10n_*, é o ato de adaptar sua aplicação para de fato utilizar um novo formato específico.

Antes de continuar, entenda a execução do método `main` no exemplo a seguir e o que é apresentado no console após sua execução.

[source,java,indent=0]
.{java-package}/locale/Locale_Complete.java
----
include::{section-java-package}/locale/Locale_Complete.java[tag=code]
----

.Saída no console
[source,console]
----
 - Constantes - 
en_CA
en_GB
 - Construtor - 
pt_BR
pt_PT
ca_ES_VALENCIA
 - Language Tags - 
en_CA
pt_BR
pt_PT
ca_ES
gsw__#u-sd-chzh
 - Builder - 
pt_BR
az_AZ_#Latn
bs_BA_POSIX_#Latn_c-cc
----

No Java, a classe `Locale` no pacote `java.util` nos ajuda a lidar com esses aspectos.

. Geralmente, um `Locale` é representado por um idioma e um país. 
* `pt_BR` - Português do Brasil
* `en_US` - Inglês dos EUA
* `it_CH` - Italiano da Suíça
* `fr_BE` - Francês da Bélgica
+
[source,java,indent=0]
.{java-package}/locale/Locale_LocaleLanguageCountry.java
----
include::{section-java-package}/locale/Locale_LocaleLanguageCountry.java[tag=code]
----

. Um `Locale` pode ter ainda uma Variante, um Script e Extensões.
+
[source,java,indent=0]
.{java-package}/locale/Locale_VarScriptExtension.java
----
include::{section-java-package}/locale/Locale_VarScriptExtension.java[tag=code]
----
+
TIP: No exame da certificação, a Oracle geralmente só utiliza idioma e país.

. É possível construir um Locale com o `Builder`, com construtores, ou por uma _Language Tag_.
+
[source,java,indent=0]
.{java-package}/locale/Locale_LocaleInstantiation.java
----
include::{section-java-package}/locale/Locale_LocaleInstantiation.java[tag=code]
----
+
A diferença entre eles é:
+
* Com os construtores é possível passar apenas o idioma, a região (país) e uma variante.
* Com language tags é possível passar uma `String` no padrão https://en.wikipedia.org/wiki/IETF_language_tag[IETF BCP 47].
* Com o builder é possível criar da forma mais específica possível: idioma, região, variante, script e extensões.

. O `Locale` aceita letras maiúsculas e minúsculas escritas de forma incorreta. 
+
[source,java,indent=0]
.{java-package}/locale/Locale_LocaleCase.java
----
include::{section-java-package}/locale/Locale_LocaleCase.java[tag=code]
----
+
.Saída no console
[source,console]
----
pt_BR
pt_BR
pt_BR
----
+
Nesse exemplo, escrevemos de forma *incorreta*:
+
* O idioma deveria ser minúsculo (pt), mas está maiúsculo (PT).
* A região deveria estar maiúscula (BR), está minúscula (br).
+
Mesmo assim, o `Locale` é criado corretamente. Veja que isso é um código *ruim*. O ideal é sempre escrever respeitando maiúsculas e minúsculas.

. Existem algumas constantes na classe `Locale` para as localizações mais populares.
+
[source,java,indent=0]
.{java-package}/locale/Locale_LocaleCommons.java
----
include::{section-java-package}/locale/Locale_LocaleCommons.java[tag=code]
----
+
.Saída no console
[source,console]
----
en_CA
fr_CA
zh_CN
zh
en
it_IT
zh_CN
zh_TW
----

. É possível recuperar o `Locale` padrão ou alterá-lo programaticamente.
+
[source,java,indent=0]
.{java-package}/locale/Locale_LocaleDefault.java
----
include::{section-java-package}/locale/Locale_LocaleDefault.java[tag=code]
----
+
.Saída no console
[source,console]
----
pt_BR
ko_KR
----

. É possível verificar os `Locale` disponíveis, pois eles variam de acordo com a JVM sendo executada.
+
[source,java,indent=0]
.{java-package}/locale/Locale_LocaleAvailable.java
----
include::{section-java-package}/locale/Locale_LocaleAvailable.java[tag=code]
----
+
.Saída no console
[source,console]
----

nn
ar_JO
bg
kea
nds
zu
am_ET
fr_DZ
ti_ET
----

. Um `Locale` também pode ser representado somente pelo idioma.
+
[source,java,indent=0]
.{java-package}/locale/Locale_LocaleLanguageOnly.java
----
include::{section-java-package}/locale/Locale_LocaleLanguageOnly.java[tag=code]
----
+
.Saída no console
[source,console]
----
pt
en
es
fr
----

.Referências
****

* Adding Internationalization and Localization
+
Boyarsky, Jeanne; Selikoff, Scott. OCP: Oracle Certified Professional Java SE 8 Programmer II Study Guide (p. 255). Wiley. Edição do Kindle. 

* https://www.baeldung.com/java-8-localization[Internationalization and Localization in Java 8.]

* https://docs.oracle.com/javase/tutorial/i18n/intro/index.html[Internationalization.] Java Documentation.

* https://blog.mozilla.org/l10n/2011/12/14/i18n-vs-l10n-whats-the-diff/[i18n vs l10n — what’s the diff?]

* http://www.oracle.com/us/technologies/java/locale-140624.html[Internationalization: Understanding Locale in the Java Platform.]

****