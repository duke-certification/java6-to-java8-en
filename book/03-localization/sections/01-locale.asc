:java-package: src/org/j6toj8/localization
:section-java-package: ../../../{java-package}

=== Locale

.Objective
--------------------------------------------------
Describe the advantages of localizing an application and developing code that defines, reads, and sets the locale with a Locale object.
--------------------------------------------------

The candidate is expected to be able to understand and analyze aspects of Internationalization and Localization, including the use of the `Locale` class.

Some aspects of an application may depend on country and language. For example:

* Date writing formats
** August 6, 2019, would be represented in Brazil by `06/08/2019`, but in the USA would be `08/06/2019`.
* Currency value writing formats
** Ten Reais in Brazil would be represented by `R$ 10`, while in France Ten Euros would be `10 €`.
* Decimal or Thousand Separation Formats
** In Brazil comma is used to separate decimals and points to thousands: `100.245,03`. In the USA, it is the opposite: `100,245.03`.

Therefore, in order for your application to handle these scenarios correctly, you need to understand two aspects: *Internationalization* and *Localization*.

*Internationalization*, also called *_i18n_*, is the act of designing your application so that you can easily adapt it to use new formats and languages.

*Localization*, also called *_l10n_*, is the act of tailoring your application to actually use a new specific format.

Before proceeding, understand the execution of the `main` method in the following example and what is presented on the console after its execution.

[source,java,indent=0]
.{java-package}/locale/Locale_Complete.java
----
include::{section-java-package}/locale/Locale_Complete.java[tag=code]
----

.console output
[source,console]
----
 - Constants -
en_CA
en_GB
 - Construtor - 
pt_BR
pt_PT
ca_ES_VALENCIA
 - Language Tags - 
en_CA
pt_BR
pt_PT
ca_ES
gsw__#u-sd-chzh
 - Builder - 
pt_BR
az_AZ_#Latn
bs_BA_POSIX_#Latn_c-cc
----

In Java, the `Locale` class in the `java.util` package helps us deal with these aspects.

. Generally, a `Locale` is represented by a language and a country.
* `pt_BR` - Brazilian Portuguese
* `en_US` - US English
* `it_CH` - Italian from Switzerland
* `fr_BE` - French from Belgium
+
[source,java,indent=0]
.{java-package}/locale/Locale_LocaleLanguageCountry.java
----
include::{section-java-package}/locale/Locale_LocaleLanguageCountry.java[tag=code]
----

. A `Locale` can also have a Variant, a Script and Extensions.
+
[source,java,indent=0]
.{java-package}/locale/Locale_VarScriptExtension.java
----
include::{section-java-package}/locale/Locale_VarScriptExtension.java[tag=code]
----
+
TIP: In the certification exam, Oracle usually only uses language and country.

. It is possible to build a Locale with `Builder`, with constructors, or by a _Language Tag_.
+
[source,java,indent=0]
.{java-package}/locale/Locale_LocaleInstantiation.java
----
include::{section-java-package}/locale/Locale_LocaleInstantiation.java[tag=code]
----
+
The difference between them is:
+
* With constructors it is possible to pass only the language, the region (country) and a variant.
* With language tags you can pass a `String` in the pattern https://en.wikipedia.org/wiki/IETF_language_tag[IETF BCP 47].
* With the builder you can create as specific as possible: language, region, variant, script and extensions.

. `Locale` accepts incorrectly typed uppercase and lowercase letters.
+
[source,java,indent=0]
.{java-package}/locale/Locale_LocaleCase.java
----
include::{section-java-package}/locale/Locale_LocaleCase.java[tag=code]
----
+
.console output
[source,console]
----
pt_BR
pt_BR
pt_BR
----
+
In this example, we wrote *incorrectly*:
+
* Language should be lowercase (pt), but it is in uppercase (PT).
* Region should be uppercase (BR), but it is in lowercase (br).

+
Even so, `Locale` is created correctly. Note that this is *bad* code. The ideal is always to write respecting the case.

. There are some constants in the `Locale` class for the most popular locations.
+
[source,java,indent=0]
.{java-package}/locale/Locale_LocaleCommons.java
----
include::{section-java-package}/locale/Locale_LocaleCommons.java[tag=code]
----
+
.console output
[source,console]
----
en_CA
fr_CA
zh_CN
zh
en
it_IT
zh_CN
zh_TW
----

. You can retrieve the default `Locale` or change it programmatically.
+
[source,java,indent=0]
.{java-package}/locale/Locale_LocaleDefault.java
----
include::{section-java-package}/locale/Locale_LocaleDefault.java[tag=code]
----
+
.console output
[source,console]
----
en_BR
ko_KR
----

. You can check the available `Locale` as they vary according to the JVM running.
+
[source,java,indent=0]
.{java-package}/locale/Locale_LocaleAvailable.java
----
include::{section-java-package}/locale/Locale_LocaleAvailable.java[tag=code]
----
+
.console output
[source,console]
----
ar_AE
ar_JO
ar_SY
hr_HR
fr_BE
es_PA
mt_MT
es_VE
bg
----

. A `Locale` can also be represented by language only.
+
[source,java,indent=0]
.{java-package}/locale/Locale_LocaleLanguageOnly.java
----
include::{section-java-package}/locale/Locale_LocaleLanguageOnly.java[tag=code]
----
+
.console output
[source,console]
----
pt
en
es
fr
----

.References
****

* Adding Internationalization and Localization
+
Boyarsky, Jeanne; Selikoff, Scott. OCP: Oracle Certified Professional Java SE 8 Programmer II Study Guide (p. 255). Wiley. Kindle Edition.

* https://www.baeldung.com/java-8-localization[Internationalization and Localization in Java 8.]

* https://docs.oracle.com/javase/tutorial/i18n/intro/index.html[Internationalization.] Java Documentation.

* https://blog.mozilla.org/l10n/2011/12/14/i18n-vs-l10n-whats-the-diff/[i18n vs l10n — what’s the diff?]

* http://www.oracle.com/us/technologies/java/locale-140624.html[Internationalization: Understanding Locale in the Java Platform.]

****
