:java-package: src/org/j6toj8/localization
:section-java-package: ../../../{java-package}

=== Date and Time

.Objetivo
--------------------------------------------------
Create and manage date- and time-based events by using LocalDate, LocalTime, LocalDateTime, Instant, Period, and Duration, including a combination of date and time in a single object.
--------------------------------------------------

Java 8 has a whole new way of dealing with date and time. Several new classes have been introduced in the `java.time.*` Package. Here are some examples in the ISO-8601 format.

* `LocalDate` -> Date without time zone, such as `2007-12-03`.
* `LocalTime` -> Time without time zone, such as `10:15:30.125`.
* `LocalDateTime` -> A time date without a time zone, such as `2007-12-03T10:15:30.125`.
* `ZonedDateTime` -> A date with time and time zone, such as `2007-12-03T10:15:30.125+01:00 Europe/Paris`.
* `Instant` -> A point on the timeline, an instant.
* `Period` -> A date-based amount of time, such as "2 years, 3 months and 4 days".
* `Duration` -> A time-based amount of time, such as "34.5 seconds".

These new classes are best designed to handle the concepts of date, hour, and time. The old classes `java.util.Date` and `java.util.Calendar` won't be requested on the certification test.

Almost all of these classes will be presented in this section. The only exception is `ZonedDateTime`, which will be featured in the time zone and daylight saving time section.

All new classes are https://en.wikipedia.org/wiki/Immutable_object[immutable] and https://en.wikipedia.org/wiki/Thread_safety[thread safe]. That is, there is no need to worry about concurrency.

==== LocalDate

A `LocalDate` represents a date without a time zone, such as `2007-12-03`.

. The test will usually use dates in the US format: `month/day/year`.
. You can create a `LocalDate` using the `static` method called `now`.
+
[source,java,indent=0]
.{java-package}/datetime/localdate/LocalDate_Now.java
----
include::{section-java-package}/datetime/localdate/LocalDate_Now.java[tag=code]
----
+
.console output
[source,console]
----
2019-05-20
----
+
The console output will display the current date.

. It is also possible to create a `LocalDate` through the `static` method called `of`.
. You can use `Month` `enum` or an `int` to represent the month.
. Unlike older Java APIs, the month now starts at the number `1`, which is January.
+
[source,java,indent=0]
.{java-package}/datetime/localdate/LocalDate_Of.java
----
include::{section-java-package}/datetime/localdate/LocalDate_Of.java[tag=code]
----
+
.console output
[source,console]
----
2019-05-20
2019-05-20
----

. As with all new datetime classes, it is not possible to create an instance of `LocalDate` using the constructor.
+
[source,java,indent=0]
.{java-package}/datetime/localdate/LocalDate_Constructor.java
----
include::{section-java-package}/datetime/localdate/LocalDate_Constructor.java[tag=code]
----

. The `DateTimeException` exception will be thrown when trying to create an invalid date.
+
[source,java,indent=0]
.{java-package}/datetime/localdate/LocalDate_Invalid.java
----
include::{section-java-package}/datetime/localdate/LocalDate_Invalid.java[tag=code]
----
+
.console output
[source,console]
----
Exception in thread "main" java.time.DateTimeException: Invalid value for DayOfMonth (valid values 1 - 28/31): 33
	at java.time.temporal.ValueRange.checkValidValue(ValueRange.java:311)
	at java.time.temporal.ChronoField.checkValidValue(ChronoField.java:703)
	at java.time.LocalDate.of(LocalDate.java:248)
	at org.j6toj8.localization.datetime.localdate.LocalDate_Invalid.main(LocalDate_Invalid.java:10)
----

. There are several methods for adding and subtracting from `LocalDate`.
+
[source,java,indent=0]
.{java-package}/datetime/localdate/LocalDate_Manipulate.java
----
include::{section-java-package}/datetime/localdate/LocalDate_Manipulate.java[tag=code]
----
+
.console output
[source,console]
----
2019-05-20
+2 days: 2019-05-22
+2 weeks: 2019-06-03
+2 months: 2019-07-20
+2 years: 2021-05-20
+2 years: 2021-05-20
+2 decades: 2039-05-20
-2 days: 2019-05-18
-2 weeks: 2019-05-06
-2 months: 2019-03-20
-2 years: 2017-05-20
-2 decades: 1999-05-20
----

. `LocalDate` is immutable, so you must store the return of a change in a variable.
+
[source,java,indent=0]
.{java-package}/datetime/localdate/LocalDate_Immutability.java
----
include::{section-java-package}/datetime/localdate/LocalDate_Immutability.java[tag=code]
----
+
.console output
[source,console]
----
2019-05-20
2019-05-20
2019-05-21
----

. It is common to use call chaining with these methods.
+
[source,java,indent=0]
.{java-package}/datetime/localdate/LocalDate_Chaining.java
----
include::{section-java-package}/datetime/localdate/LocalDate_Chaining.java[tag=code]
----
+
.console output
[source,console]
----
2019-05-20
2020-06-21
----

. When handling the date, `LocalDate` will handle the months and years as needed.
+
[source,java,indent=0]
.{java-package}/datetime/localdate/LocalDate_AdjustDifferentUnit.java
----
include::{section-java-package}/datetime/localdate/LocalDate_AdjustDifferentUnit.java[tag=code]
----
+
.console output
[source,console]
----
2019-11-30
2019-12-01
2020-01-01
2020-01-30
----

==== LocalTime

A `LocalTime` represents a time with no time zone and no date, such as `10:15:30.125`.

. The time is represented in the format `hour:minute:second.nano`.
. You can create a `LocalTime` using the `static` method called `now`.
+
[source,java,indent=0]
.{java-package}/datetime/localtime/LocalTime_Now.java
----
include::{section-java-package}/datetime/localtime/LocalTime_Now.java[tag=code]
----
+
.console output
[source,console]
----
09:15:23.197
----
+
The console output will display the current time.

. It is also possible to create a `LocalTime` through the `static` method called `of`.
+
[source,java,indent=0]
.{java-package}/datetime/localtime/LocalTime_Of.java
----
include::{section-java-package}/datetime/localtime/LocalTime_Of.java[tag=code]
----
+
.console output
[source,console]
----
09:20:01.135
09:20:01.000000135
09:20:01
09:20
----

. As with all new date and time classes, it is not possible to create an instance of `LocalTime` using the constructor.
+
[source,java,indent=0]
.{java-package}/datetime/localtime/LocalTime_Constructor.java
----
include::{section-java-package}/datetime/localtime/LocalTime_Constructor.java[tag=code]
----

. The `DateTimeException` exception will be thrown when trying to create an invalid time.
+
[source,java,indent=0]
.{java-package}/datetime/localtime/LocalTime_Invalid.java
----
include::{section-java-package}/datetime/localtime/LocalTime_Invalid.java[tag=code]
----
+
.console output
[source,console]
----
Exception in thread "main" java.time.DateTimeException: Invalid value for HourOfDay (valid values 0 - 23): 24
	at java.time.temporal.ValueRange.checkValidValue(ValueRange.java:311)
	at java.time.temporal.ChronoField.checkValidValue(ChronoField.java:703)
	at java.time.LocalTime.of(LocalTime.java:317)
	at org.j6toj8.localization.datetime.localtime.LocalTime_Invalid.main(LocalTime_Invalid.java:9)
----

. There are several methods for adding and subtracting from `LocalTime`.
+
[source,java,indent=0]
.{java-package}/datetime/localtime/LocalTime_Manipulate.java
----
include::{section-java-package}/datetime/localtime/LocalTime_Manipulate.java[tag=code]
----
+
.console output
[source,console]
----
09:26:12
+2 hours: 11:26:12
+2 minutes: 09:28:12
+2 seconds: 09:26:14
+2 nanoseconds: 09:26:12.000000002
+2 microseconds: 09:26:12.000002
+2 milliseconds: 09:26:12.002
-2 hours: 07:26:12
-2 minutes: 09:24:12
-2 seconds: 09:26:10
-2 nanoseconds: 09:26:11.999999998
-2 microseconds: 09:26:11.999998
-2 milliseconds 09:26:11.998
----

. `LocalTime` is immutable, so you must store the return of a change in a variable.
+
[source,java,indent=0]
.{java-package}/datetime/localtime/LocalTime_Immutability.java
----
include::{section-java-package}/datetime/localtime/LocalTime_Immutability.java[tag=code]
----
+
.console output
[source,console]
----
09:31:05
09:31:05
10:31:05
----

. It is common to use call chaining with these methods.
+
[source,java,indent=0]
.{java-package}/datetime/localtime/LocalTime_Chaining.java
----
include::{section-java-package}/datetime/localtime/LocalTime_Chaining.java[tag=code]
----
+
.console output
[source,console]
----
09:32:05
10:33:06.001
----

. When handling the time, `LocalTime` will handle the hours, minutes and seconds as needed.
+
[source,java,indent=0]
.{java-package}/datetime/localtime/LocalTime_AdjustDifferentUnit.java
----
include::{section-java-package}/datetime/localtime/LocalTime_AdjustDifferentUnit.java[tag=code]
----
+
.console output
[source,console]
----
09:59:59
10:00:01
10:01:01
10:01:59
09:59:58
----

==== LocalDateTime

A `LocalDateTime` represents a date with time, but no time zone, such as `2007-12-03T10:15:30.125`.

The rules for `LocalDateTime` are basically the merging of those for `LocalDate` and `LocalTime`.

. The `LocalDateTime` is displayed in the format `year-month-dayThour:minute:second.nano`.
. You can create a `LocalDateTime` using the `static` method called `now`.
+
[source,java,indent=0]
.{java-package}/datetime/localdatetime/LocalDateTime_Now.java
----
include::{section-java-package}/datetime/localdatetime/LocalDateTime_Now.java[tag=code]
----
+
.console output
[source,console]
----
2019-05-24T10:13:58.370
----
+
The console output will display the current date and time.

. It is also possible to create a `LocalDateTime` through the `static` method called `of`.
+
[source,java,indent=0]
.{java-package}/datetime/localdatetime/LocalDateTime_Of.java
----
include::{section-java-package}/datetime/localdatetime/LocalDateTime_Of.java[tag=code]
----
+
.console output
[source,console]
----
2019-05-20T09:20:12
2019-05-20T09:20
2019-05-20T09:20
2019-05-20T09:20:12
2019-05-20T09:20:12
2019-05-20T09:20:12.000000135
2019-05-20T09:20:12.000000135
----

. As with all new date and time classes, you cannot create an instance of `LocalDateTime` using the constructor.
+
[source,java,indent=0]
.{java-package}/datetime/localdatetime/LocalDateTime_Constructor.java
----
include::{section-java-package}/datetime/localdatetime/LocalDateTime_Constructor.java[tag=code]
----

. The `DateTimeException` exception will be thrown when trying to create an invalid date or time.
+
[source,java,indent=0]
.{java-package}/datetime/localdatetime/LocalDateTime_Invalid.java
----
include::{section-java-package}/datetime/localdatetime/LocalDateTime_Invalid.java[tag=code]
----
+
.console output
[source,console]
----
Exception in thread "main" java.time.DateTimeException: Invalid date 'APRIL 31'
	at java.time.LocalDate.create(LocalDate.java:431)
	at java.time.LocalDate.of(LocalDate.java:269)
	at java.time.LocalDateTime.of(LocalDateTime.java:311)
	at org.j6toj8.localization.datetime.localdatetime.LocalDateTime_Invalid.main(LocalDateTime_Invalid.java:10)
----

. There are several methods for adding and subtracting from `LocalDateTime`. These are basically all available for `LocalDate` and `LocalTime`.
+
[source,java,indent=0]
.{java-package}/datetime/localdatetime/LocalDateTime_Manipulate.java
----
include::{section-java-package}/datetime/localdatetime/LocalDateTime_Manipulate.java[tag=code]
----
+
.console output
[source,console]
----
2019-05-20T09:20:12
+2 hours: 2019-05-20T11:20:12
+2 minutes: 2019-05-20T09:22:12
+2 seconds: 2019-05-20T09:20:14
+2 nanoseconds: 2019-05-20T09:20:12.000000002
+2 microseconds: 2019-05-20T09:20:12.000002
+2 milliseconds: 2019-05-20T09:20:12.002
-2 hours: 2019-05-20T07:20:12
-2 minutes: 2019-05-20T09:18:12
-2 seconds: 2019-05-20T09:20:10
-2 nanoseconds: 2019-05-20T09:20:11.999999998
-2 microseconds: 2019-05-20T09:20:11.999998
-2 milliseconds: 2019-05-20T09:20:11.998
+2 days: 2019-05-22T09:20:12
+2 weeks: 2019-06-03T09:20:12
+2 months: 2019-07-20T09:20:12
+2 years: 2021-05-20T09:20:12
+2 decades: 2039-05-20T09:20:12
-2 days: 2019-05-18T09:20:12
-2 weeks: 2019-05-06T09:20:12
-2 months: 2019-03-20T09:20:12
-2 years: 2017-05-20T09:20:12
-2 decades: 1999-05-20T09:20:12
----

. `LocalDateTime` is immutable, so you must store the return of a change in a variable.
+
[source,java,indent=0]
.{java-package}/datetime/localdatetime/LocalDateTime_Immutability.java
----
include::{section-java-package}/datetime/localdatetime/LocalDateTime_Immutability.java[tag=code]
----
+
.console output
[source,console]
----
2019-05-20T09:20
2019-05-20T09:20
2019-05-20T10:20
----

. It is common to use call chaining with these methods.
+
[source,java,indent=0]
.{java-package}/datetime/localdatetime/LocalDateTime_Chaining.java
----
include::{section-java-package}/datetime/localdatetime/LocalDateTime_Chaining.java[tag=code]
----
+
.console output
[source,console]
----
2019-05-20T09:20
2020-05-21T10:20
----

. When handling the date or time, `LocalDateTime` will handle the other fields as needed.
+
[source,java,indent=0]
.{java-package}/datetime/localdatetime/LocalDateTime_AdjustDifferentUnit.java
----
include::{section-java-package}/datetime/localdatetime/LocalDateTime_AdjustDifferentUnit.java[tag=code]
----
+
.console output
[source,console]
----
2019-12-31T23:59:59
2020-01-01T00:00:01
----

==== Instant

An `Instant` represents a moment on the timeline in the https://en.wikipedia.org/wiki/Coordinated_Universal_Time[UTC] time zone (sometimes called https://en.wikipedia.org/wiki/Greenwich_Mean_Time[GMT]), such as `2007-12-03T10:15:30.125Z`.

`Instant` differs from all of the types presented earlier in that it has a time zone (UTC) and represents the same moment on the timeline anywhere in the world.

. `Instant` is presented in the format `year-month-dayThour:minute:second.nanoZ`.
. You can create an `Instant` using the `static` method called `now`.
+
[source,java,indent=0]
.{java-package}/datetime/instant/Instant_Now.java
----
include::{section-java-package}/datetime/instant/Instant_Now.java[tag=code]
----
+
.console output
[source,console]
----
2019-05-27T21:13:10.450Z
----
+
The console output will display the current date and time in the UTC time zone.

. It is also possible to create an `Instant` using `static` methods called `ofEpochMilli` or `ofEpochSecond`. The parameter is the number of milliseconds, or seconds, since `1970-01-01T00:00:00Z`.
+
[source,java,indent=0]
.{java-package}/datetime/instant/Instant_Of.java
----
include::{section-java-package}/datetime/instant/Instant_Of.java[tag=code]
----
+
.console output
[source,console]
----
2001-09-09T01:46:40Z
2001-09-09T01:46:40Z
2001-09-09T01:46:40.123Z
----

. As with all new date and time classes, it is not possible to create an instance of `Instant` using the builder.
+
[source,java,indent=0]
.{java-package}/datetime/instant/Instant_Constructor.java
----
include::{section-java-package}/datetime/instant/Instant_Constructor.java[tag=code]
----

. There are several methods for adding and subtracting from `Instant`. However, it does not support operations with units larger than days.
+
[source,java,indent=0]
.{java-package}/datetime/instant/Instant_Manipulate.java
----
include::{section-java-package}/datetime/instant/Instant_Manipulate.java[tag=code]
----
+
.console output
[source,console]
----
2001-09-09T01:46:40Z
+2 seconds: 2001-09-09T01:46:42Z
+2 nanoseconds: 2001-09-09T01:46:40.000000002Z
+2 microseconds: 2001-09-09T01:46:40.000002Z
+2 milliseconds: 2001-09-09T01:46:40.002Z
-2 seconds: 2001-09-09T01:46:38Z
-2 nanoseconds: 2001-09-09T01:46:39.999999998Z
-2 microseconds: 2001-09-09T01:46:39.999998Z
-2 milliseconds: 2001-09-09T01:46:39.998Z
+2 days: 2001-09-11T01:46:40Z
Exception in thread "main" java.time.temporal.UnsupportedTemporalTypeException: Unsupported unit: Weeks
	at java.time.Instant.plus(Instant.java:862)
	at org.j6toj8.localization.datetime.instant.Instant_Manipulate.main(Instant_Manipulate.java:21)
----

. `Instant` is immutable, so you must store the return of a change in a variable.
. As with other date and time classes, it is common to use call chaining with these methods.
. As with other date and time classes, manipulating `Instant` will handle the other fields as needed.
+
[source,java,indent=0]
.{java-package}/datetime/instant/Instant_Immutability.java
----
include::{section-java-package}/datetime/instant/Instant_Immutability.java[tag=code]
----
+
.console output
[source,console]
----
2001-09-09T01:46:40Z
2001-09-09T01:46:40Z
2001-09-09T01:47:40Z
----

. You can turn a `LocalDateTime` into an `Instant`, and vice versa if you enter a time zone.
+
[source,java,indent=0]
.{java-package}/datetime/instant/Instant_Convert.java
----
include::{section-java-package}/datetime/instant/Instant_Convert.java[tag=code]
----
+
.console output
[source,console]
----
LocalDateTime: 2019-05-27T13:01:01
2019-05-27T13:01:01Z
2019-05-27T16:01:01Z

Instant: 2019-05-27T13:01:01Z
2019-05-27T13:01:01
2019-05-27T10:01:01
----

==== Period

A `Period` is an amount of time based on dates, such as years, months, or days. For example: `2 years, 3 months and 4 days`.

. `Period` is presented in `PxYxMxD` format, where:
* `P` represents a Period.
* `xY` is the number of years. 5 years would be `5Y`.
* `xM` is the number of months. 3 months would be `3M`.
* `xD` is the number of days. 2 days would be `2D`.
. When printing a `Period`, only fields with value are displayed. Empty fields (with zero) are omitted.
. You can create a `Period` using `static` methods called `of *`.
+
[source,java,indent=0]
.{java-package}/datetime/period/Period_Of.java
----
include::{section-java-package}/datetime/period/Period_Of.java[tag=code]
----
+
.console output
[source,console]
----
P2D
P2M
P14D
P2Y
P2Y1M3D
----
+
Note that the 2 week period is displayed as `14D` as `Period` does not store weeks. The `ofWeeks` method is just a facilitator, where each week is the equivalent of 7 days.

. It is also possible to create a `Period` from two `LocalDate`.
+
[source,java,indent=0]
.{java-package}/datetime/period/Period_Between.java
----
include::{section-java-package}/datetime/period/Period_Between.java[tag=code]
----
+
.console output
[source,console]
----
P28Y9M22D
----
+
In the previous example we can see that a person born on `August 6, 1990` was `28 years, 9 months and 22 days` on the day this code was executed: `05/28/2019`.

. `Period` also stores more than one month, and more than one year.
+
[source,java,indent=0]
.{java-package}/datetime/period/Period_BiggerValues.java
----
include::{section-java-package}/datetime/period/Period_BiggerValues.java[tag=code]
----
+
.console output
[source,console]
----
P60M2D
P30M50D
P5Y200M1000D
----
+
Note that `Period` did not convert months to years, or days to months.
+
[NOTE]
.Curiosities!
--
You can normalize a `Period` that is not within the default range by the `normalized` method. But only the years and months will be considered, leaving the days intact.

[source,java,indent=0]
.{java-package}/datetime/period/Period_Curiosities.java
----
include::{section-java-package}/datetime/period/Period_Curiosities.java[tag=code1]
----

It is also possible to work with negative numbers and normalize them.

[source,java,indent=0]
.{java-package}/datetime/period/Period_Curiosities.java
----
include::{section-java-package}/datetime/period/Period_Curiosities.java[tag=code2]
----
--

. You can add a `Period` to an `Instant`, `LocalDate` or `LocalDateTime`.
+
[source,java,indent=0]
.{java-package}/datetime/period/Period_Compatibility.java
----
include::{section-java-package}/datetime/period/Period_Compatibility.java[tag=code]
----
+
.console output
[source,console]
----
Period: P10D

Instant: 2019-05-27T13:01:01Z
Instant + Period: 2019-06-06T13:01:01Z

LocalDate: 2018-05-27
LocalDate + Period: 2018-06-06

LocalDateTime: 2018-05-27T13:01:01
LocalDateTime + Period: 2018-06-06T13:01:01
----

. It is *not* possible to add a `Period` to a `LocalTime` since the former represents time-based on dates, and the latter only stores times.
+
[source,java,indent=0]
.{java-package}/datetime/period/Period_LocalTime.java
----
include::{section-java-package}/datetime/period/Period_LocalTime.java[tag=code]
----
+
.console output
[source,console]
----
Period: P13D
LocalTime: 13:01:01
Exception in thread "main" java.time.temporal.UnsupportedTemporalTypeException: Unsupported unit: Days
	at java.time.LocalTime.plus(LocalTime.java:1055)
	at java.time.LocalTime.plus(LocalTime.java:125)
	at java.time.Period.addTo(Period.java:906)
	at java.time.LocalTime.plus(LocalTime.java:988)
	at org.j6toj8.localization.datetime.period.Period_LocalTime.main(Period_LocalTime.java:15)
----
+
Note that an exception occurred while trying to add a `Period` to a `LocalTime`.

. It is *not* possible to add a `Period` containing months or years to an `Instant`. As we saw in the previous section on `Instant`, it does not support operations with values longer than days.
+
[source,java,indent=0]
.{java-package}/datetime/period/Period_Instant.java
----
include::{section-java-package}/datetime/period/Period_Instant.java[tag=code]
----
+
.console output
[source,console]
----
Period: P1M
Instant: 2019-05-27T13:01:01Z
Exception in thread "main" java.time.temporal.UnsupportedTemporalTypeException: Unsupported unit: Months
	at java.time.Instant.plus(Instant.java:862)
	at java.time.Instant.plus(Instant.java:207)
	at java.time.Period.addTo(Period.java:902)
	at java.time.Instant.plus(Instant.java:788)
	at org.j6toj8.localization.datetime.period.Period_Instant.main(Period_Instant.java:15)
----

==== Duration

A `Duration` is a time-based amount of time, such as seconds, minutes, or hours. For example: `2 hours, 3 minutes and 4 seconds`.

. The `Duration` is presented in `PTxHxMxS` format, where:
* `PT` represents that it is a` Duration`.
* `xH` represents the number of hours.
* `xM` represents the number of minutes.
* `xS` represents the number of seconds.
. Like a `Period`, when printing a` Duration` only fields with value are displayed. Empty fields are omitted.
. You can create a `Duration` using `static` methods called `of*`.
+
[source,java,indent=0]
.{java-package}/datetime/duration/Duration_Of.java
----
include::{section-java-package}/datetime/duration/Duration_Of.java[tag=code]
----
+
.console output
[source,console]
----
PT0.000000002S
PT0.002S
PT2S
PT2M
PT2H
PT48H
PT2.0000002S
PT0.000002S
----
+
Note that `2 days` is stored as 48 hours because `Duration` does not store days.

. You can also create a `Duration` from two `LocalTime`.
+
[source,java,indent=0]
.{java-package}/datetime/duration/Duration_Between.java
----
include::{section-java-package}/datetime/duration/Duration_Between.java[tag=code]
----
+
.console output
[source,console]
----
PT12H
PT-12H
PT0S
----

. `Duration` automatically converts seconds to minutes and minutes to hours.
+
[source,java,indent=0]
.{java-package}/datetime/duration/Duration_BiggerValues.java
----
include::{section-java-package}/datetime/duration/Duration_BiggerValues.java[tag=code]
----
+
.console output
[source,console]
----
PT2H
PT2H1M
PT1H59M
PT2H46M40S
----

. You can add a `Duration` to an `Instant`, `LocalTime` or `LocalDateTime`.
+
[source,java,indent=0]
.{java-package}/datetime/duration/Duration_Compatibility.java
----
include::{section-java-package}/datetime/duration/Duration_Compatibility.java[tag=code]
----
+
.console output
[source,console]
----
Duration: PT2H

Instant: 2019-05-27T13:01:01Z
Instant + Duration: 2019-05-27T15:01:01Z

LocalTime: 12:05:02
LocalTime + Duration: 14:05:02

LocalDateTime: 2018-05-27T13:01:01
LocalDateTime + Duration: 2018-05-27T15:01:01
----

. It is *not* possible to add a `Duration` to a `LocalDate`, since the former represents hour time-based, while the other only store dates.
+
[source,java,indent=0]
.{java-package}/datetime/duration/Duration_LocalDate.java
----
include::{section-java-package}/datetime/duration/Duration_LocalDate.java[tag=code]
----
+
.console output
[source,console]
----
Duration: PT2H
LocalTime: 1990-08-06
Exception in thread "main" java.time.temporal.UnsupportedTemporalTypeException: Unsupported unit: Seconds
	at java.time.LocalDate.plus(LocalDate.java:1247)
	at java.time.LocalDate.plus(LocalDate.java:137)
	at java.time.Duration.addTo(Duration.java:1070)
	at java.time.LocalDate.plus(LocalDate.java:1149)
	at org.j6toj8.localization.datetime.duration.Duration_LocalDate.main(Duration_LocalDate.java:15)
----
+
Note that an exception occurred while trying to add a `Duration` to a `LocalDate`.

.References
****

* Working with Dates and Times
+
Boyarsky, Jeanne; Selikoff, Scott. OCP: Oracle Certified Professional Java SE 8 Programmer II Study Guide (p. 234). Wiley. Kindle Edition.

* https://www.baeldung.com/java-8-date-time-intro[Introduction to the Java 8 Date/Time API.]

* https://docs.oracle.com/javase/tutorial/datetime/TOC.html[Trail: Date Time: Table of Contents.] The Java™ Tutorials.

* https://stackoverflow.com/questions/32437550/whats-the-difference-between-instant-and-localdatetime/32443004[What's the difference between Instant and LocalDateTime?]

****
