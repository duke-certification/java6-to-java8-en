:java-package: src/org/j6toj8/localization
:section-java-package: ../../../{java-package}
:resource-package: ../../../resources

=== Resource Bundle

.Objective
--------------------------------------------------
Build a resource bundle for a locale and call a resource bundle from an application.
--------------------------------------------------

The candidate is expected to understand and analyze the use of _resource bundles_ and its relationship to the `Locale` class.

When coding an internationalized application, it is common to use _resource bundles_. These are files, usually `.properties` or Java classes, that store _Strings_. Each file contains different language _Strings_, or _Locales_.

Before proceeding, understand the execution of the `main` method in the following example and what is presented on the console after its execution.

[source,java,indent=0]
.{java-package}/resourcebundle/ResourceBundle_Complete.java
----
include::{section-java-package}/resourcebundle/ResourceBundle_Complete.java[tag=code]
----

.{resource-package}/Text.properties
----
include::{resource-package}/Text.properties[]
----

.{resource-package}/Text_pt.properties
----
include::{resource-package}/Text_pt.properties[]
----

.{resource-package}/Text_pt_BR.properties
----
include::{resource-package}/Text_pt_BR.properties[]
----

.{resource-package}/Text_es.properties
----
include::{resource-package}/Text_es.properties[]
----

.{resource-package}/Text_es_ES.properties
----
include::{resource-package}/Text_es_ES.properties[]
----

.Saída no console
[source,console]
----
 -- Default Locale (en_US) --
tripod - tripod
keyboard - keyboard
glass - glass
paper - paper
phone - phone
rubber - rubber
sticker - sticker
pen - pen

 -- Locale es_ES -- 
tripod - tripod
keyboard - teclado
glass - 	vaso
paper - paper
phone - phone
rubber - rubber
sticker - sticker
pen - pen

 -- Locale pt_BR -- 
tripod - tripod
keyboard - keyboard
glass - glass
paper - papel   
phone - phone
rubber - rubber
pen - caneta
sticker - sticker
----

. The name of `Locale` is the filename suffix, and the default _resource bundle_ has no suffix. Examples:
* `Text.properties` -> Default Locale
* `Text_pt_BR.properties` -> Locale `pt_BR`
* `Text_pt.properties` -> Locale `pt`
* `Text_es_ES.properties` -> Locale `es_ES`
* `Text_es.properties` -> Locale `es`

. The `.properties` file can be expressed with 3 different separators: `=` (equal), `:` (colon) or a blank space.
+
.{resource-package}/Text.properties
----
include::{resource-package}/Text.properties[]
----
+
The most common is using `=` to separate properties, but all 3 work the same way.

. In `.properties` files, lines that start with `#` or `!` are comments.
+
.{resource-package}/Text_pt_BR.properties
----
include::{resource-package}/Text_pt_BR.properties[]
----
+
.{resource-package}/Text_es_ES.properties
----
include::{resource-package}/Text_es_ES.properties[]
----

. In `.properties` files, only spaces at the end of the line are considered.
+
.{resource-package}/Text_pt.properties
----
include::{resource-package}/Text_pt.properties[]
----
+
In this example, you cannot see, but there are 3 spaces at the end of the line. The result is the same as writing `paper=paper\{sp}\{sp}\{sp}`.

. In `.properties` files, if you end the line with a backslash, you can break the line.
+
.{resource-package}/Text_es.properties
----
include::{resource-package}/Text_es.properties[]
----
+
In this example, it would be the same as typing on a single line: `keyboard=teclado`.

. In `.properties` files, you can also use Java characters such as `\t` and `\n`.
+
.{resource-package}/Text_es_ES.properties
----
include::{resource-package}/Text_es_ES.properties[]
----
+
In this example, there is a tab before the word `vaso`. You can see in the first example of this chapter that the word `vaso` was printed on the console with a left tab.

. You can retrieve all _resource bundle_ keys and values programmatically.
+
[source,java,indent=0]
.{java-package}/resourcebundle/ResourceBundle_KeysProgrammatically.java
----
include::{section-java-package}/resourcebundle/ResourceBundle_KeysProgrammatically.java[tag=code]
----
+
.console output
[source,console]
----
tripod - tripod
keyboard - keyboard
glass - glass
paper - papel   
phone - phone
rubber - rubber
pen - caneta
sticker - sticker
----

. The _resource bundle_ can also be a Java class.
+
[source,java,indent=0]
.resource/Text_fr_CA.java
----
include::{resource-package}/Text_fr_CA.java[]
----
+
[source,java,indent=0]
.{java-package}/resourcebundle/ResourceBundle_JavaBundle.java
----
include::{section-java-package}/resourcebundle/ResourceBundle_JavaBundle.java[tag=code]
----
+
.console output
[source,console]
----
verre
----

. When using Java classes, one advantage is that you can store values other than `String`.
+
[source,java,indent=0]
.resource/Text_fr_FR.java
----
include::{resource-package}/Text_fr_FR.java[]
----

. The file nomenclature is the same for Java classes and `.properties` files, changing only the extension.
+
Note that the `.properties` files are named `Text_xx_XX.properties`, and the `.java` files are named `Text_xx_XX.java`. Programmatically, both are used in the same way.

. If there is a `.properties` file and a Java class for the same `Locale`, the Java class is used.
+
[source,java,indent=0]
.resource/Text_fr_CA.java
----
include::{resource-package}/Text_fr_CA.java[]
----
+
[source,java,indent=0]
.resource/Text_fr_CA.properties
----
include::{resource-package}/Text_fr_CA.properties[]
----
+
[source,java,indent=0]
.{java-package}/resourcebundle/ResourceBundle_JavaClassTakesPrecedence.java
----
include::{section-java-package}/resourcebundle/ResourceBundle_JavaClassTakesPrecedence.java[tag=code]
----
+
.console output
[source,console]
----
stylo
verre
clavier
----
+
Note that the values presented in the console are those defined in the `Text_fr_CA.java` file, showing that the Java class takes precedence over a `.properties` file for the same `Locale`.

. When searching for a _resource bundle_, Java tries to find a file with the exact `Locale`. If not find, search in the following order:
.. A file of the same language, but without the country;
.. A file from the default `Locale`;
.. A standard `Locale` file, but without the country;
.. A file without `Locale`, which is the default _resource bundle_;
.. Throws `MissingResourceException` if not found.
+
For example, when running the application with the default Locale `en_US`, and requesting a Locale `pt_BR`, the _resource bundle_ search order would be as follows:
+
... `Text_pt_BR` -> Exact Locale
... `Text_pt` -> Requested Locale, without country
... `Text_en_US` -> Default Locale
... `Text_en` -> Default Locale, without country
... `Text` -> _Resource Default Bundle_
+
[source,java,indent=0]
.{java-package}/resourcebundle/ResourceBundle_NotExactLocale.java
----
include::{section-java-package}/resourcebundle/ResourceBundle_NotExactLocale.java[tag=code]
----
+
.Saída no console
[source,console]
----
pt_BR
it
----
+
Note that the default `Locale` is `pt_BR`. So it was used when requesting a _resource bundle_ for `zh_CN`, as there is no bundle for this `Locale`.
+
On the other hand, when requesting a _resource bundle_ for `Locale` `it_CH`, he found the closest one, which would be `Locale` `it`, but without a specific country.

. More specific files inherit keys and values from more generic files if they do not have them.
+
[source,java,indent=0]
.{java-package}/resourcebundle/ResourceBundle_Inheritance.java
----
include::{section-java-package}/resourcebundle/ResourceBundle_Inheritance.java[tag=code]
----
+
.{resource-package}/Text.properties
----
include::{resource-package}/Text.properties[]
----
+
.{resource-package}/Text_pt.properties
----
include::{resource-package}/Text_pt.properties[]
----
+
.{resource-package}/Text_pt_BR.properties
----
include::{resource-package}/Text_pt_BR.properties[]
----
+
.console output
[source,console]
----
Locale: pt_BR
caneta
papel   
keyboard
----
+
Note that in this example a _resource bundle_ with the exact `pt_BR` `Locale` was found. However, not all keys were found in this file:
+
* `pen` was found in the `Text_pt_BR.properties` file
* `paper` was found in the `Text_pt.properties` file
* `keyboard` was found in the `Text.properties` file

.References
****

* Using a Resource Bundle
+
Boyarsky, Jeanne; Selikoff, Scott. OCP: Oracle Certified Professional Java SE 8 Programmer II Study Guide (p. 258). Wiley. Kindle Edition.

* https://www.baeldung.com/java-resourcebundle[A Guide to the ResourceBundle.]

* https://docs.oracle.com/javase/7/docs/api/java/util/ResourceBundle.html[Class ResourceBundle.] Java Documentation.

* https://docs.oracle.com/javase/tutorial/i18n/resbundle/concept.html[About the ResourceBundle Class.] Java Documentation.

****
