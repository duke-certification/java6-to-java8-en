:java-package: src/org/j6toj8/localization
:section-java-package: ../../../{java-package}
:resource-package: ../../../resources

=== Pacote de Recursos (Resource Bundle)

.Objetivo
--------------------------------------------------
Build a resource bundle for a locale and call a resource bundle from an application.
-
Construa um resource bundle (conjunto de recursos) para um Locale e invoque um resource bundle a partir de uma aplicação.
--------------------------------------------------

É esperado que o candidato saiba compreender e analisar o uso de _resource bundles_ e sua relação com a classe `Locale`.

Ao codificar uma aplicação com internacionalização é comum o uso de _resource bundles_, ou "conjunto de recursos" em português. São arquivos, geralmente `.properties` ou classes Java, que armazenam _Strings_. Cada arquivo contém _Strings_ em idiomas, ou _Locales_, diferentes.

Antes de continuar, entenda a execução do método `main` no exemplo a seguir e o que é apresentado no console após sua execução.

[source,java,indent=0]
.{java-package}/resourcebundle/ResourceBundle_Complete.java
----
include::{section-java-package}/resourcebundle/ResourceBundle_Complete.java[tag=code]
----

.{resource-package}/Text.properties
----
include::{resource-package}/Text.properties[]
----

.{resource-package}/Text_pt.properties
----
include::{resource-package}/Text_pt.properties[]
----

.{resource-package}/Text_pt_BR.properties
----
include::{resource-package}/Text_pt_BR.properties[]
----

.{resource-package}/Text_es.properties
----
include::{resource-package}/Text_es.properties[]
----

.{resource-package}/Text_es_ES.properties
----
include::{resource-package}/Text_es_ES.properties[]
----

.Saída no console
[source,console]
----

 -- Locale padrão (en_US) -- 
tripod - tripod
keyboard - keyboard
glass - glass
paper - paper
phone - phone
rubber - rubber
sticker - sticker
pen - pen

 -- Locale es_ES -- 
tripod - tripod
keyboard - teclado
glass - 	vaso
paper - paper
phone - phone
rubber - rubber
sticker - sticker
pen - pen

 -- Locale pt_BR -- 
tripod - tripod
keyboard - keyboard
glass - glass
paper - papel   
phone - phone
rubber - rubber
pen - caneta
sticker - sticker
----

. O nome do `Locale` é o sufixo do nome do arquivo, e o _resource bundle_ padrão não tem sufixo. Exemplos:
* `Text.properties` -> Locale padrão
* `Text_pt_BR.properties` -> Locale `pt_BR`
* `Text_pt.properties` -> Locale `pt`
* `Text_es_ES.properties` ->  Locale `es_ES`
* `Text_es.properties` -> Locale `es`

. O arquivo `.properties` pode ser expresso com 3 separadores diferentes: `=` (igual), `:` (dois pontos) ou um espaço em branco.
+
.{resource-package}/Text.properties
----
include::{resource-package}/Text.properties[]
----
+
O mais comum é utilizar o `=` para separar as propriedades, mas as 3 funcionam da mesma forma.

. Em arquivos `.properties`, linhas que começam com `#` ou `!` são comentários.
+
.{resource-package}/Text_pt_BR.properties
----
include::{resource-package}/Text_pt_BR.properties[]
----
+
.{resource-package}/Text_es_ES.properties
----
include::{resource-package}/Text_es_ES.properties[]
----

. Em arquivos `.properties`, apenas espaços no final da linha são considerados.
+
.{resource-package}/Text_pt.properties
----
include::{resource-package}/Text_pt.properties[]
----
+
Neste exemplo, não é possível ver, mas existem 3 espaços no final da linha. O resultado é o mesmo que escrever `paper=papel{sp}{sp}{sp}`.

. Em arquivos `.properties`, se você terminar a linha com uma contrabarra, pode quebrar a linha.
+
.{resource-package}/Text_es.properties
----
include::{resource-package}/Text_es.properties[]
----
+
Neste exemplo, seria o mesmo que escrever em uma única linha: `keyboard=teclado`.

. Em arquivos `.properties`, você também pode usar os caracteres java como `\t` e `\n`.
+
.{resource-package}/Text_es_ES.properties
----
include::{resource-package}/Text_es_ES.properties[]
----
+
Neste exemplo, existe uma tabulação antes da palavra `vaso`. Você pode perceber no primeiro exemplo deste capítulo que a palavra `vaso` foi impressa no console com uma tabulação à esquerda.

. Você pode recuperar todas as chaves e valores do _resource bundle_ programaticamente.
+
[source,java,indent=0]
.{java-package}/resourcebundle/ResourceBundle_KeysProgrammatically.java
----
include::{section-java-package}/resourcebundle/ResourceBundle_KeysProgrammatically.java[tag=code]
----
+
.Saída no console
[source,console]
----
tripod - tripod
keyboard - keyboard
glass - glass
paper - papel   
phone - phone
rubber - rubber
pen - caneta
sticker - sticker
----

. O _resource bundle_ também pode ser uma classe Java.
+
[source,java,indent=0]
.resource/Text_fr_CA.java
----
include::{resource-package}/Text_fr_CA.java[]
----
+
[source,java,indent=0]
.{java-package}/resourcebundle/ResourceBundle_JavaBundle.java
----
include::{section-java-package}/resourcebundle/ResourceBundle_JavaBundle.java[tag=code]
----
+
.Saída no console
[source,console]
----
verre
----

. Ao utilizar classes Java, uma vantagem é poder armazenar valores que não sejam apenas `String`.
+
[source,java,indent=0]
.resource/Text_fr_FR.java
----
include::{resource-package}/Text_fr_FR.java[]
----

. A nomenclatura do arquivo é a mesma para classes Java e arquivos `.properties`, mudando apenas a extensão.
+
Veja que os arquivos `.properties` se chamam `Text_xx_XX.properties`, e os arquivos `.java` se chamam `Text_xx_XX.java`. Programaticamente, ambos são utilizados da mesma forma.

. Se houver um arquivo `.properties` e uma classe Java para o mesmo `Locale`, a classe Java é utilizada.
+
[source,java,indent=0]
.resource/Text_fr_CA.java
----
include::{resource-package}/Text_fr_CA.java[]
----
+
[source,java,indent=0]
.resource/Text_fr_CA.properties
----
include::{resource-package}/Text_fr_CA.properties[]
----
+
[source,java,indent=0]
.{java-package}/resourcebundle/ResourceBundle_JavaClassTakesPrecedence.java
----
include::{section-java-package}/resourcebundle/ResourceBundle_JavaClassTakesPrecedence.java[tag=code]
----
+
.Saída no console
[source,console]
----
stylo
verre
clavier
----
+
Veja que os valores apresentados no console são aqueles definidos no arquivo `Text_fr_CA.java`, mostrando que a classe Java tem precedência sobre um arquivo `.properties` para o mesmo `Locale`.

. Ao buscar por um _resource bundle_, o Java tenta encontrar um arquivo com o `Locale` exato. Se não encontrar, busca na seguinte ordem:
.. Um arquivo do mesmo idioma, mas sem o país;
.. Um arquivo do `Locale` padrão;
.. Um arquivo do `Locale` padrão, mas sem o país;
.. Um arquivo sem `Locale`, que é o _resource bundle_ padrão;
.. Lança `MissingResourceException` caso não encontre.
+
Por exemplo, ao executar a aplicação com o Locale padrão `en_US`, e solicitar um Locale `pt_BR`, a ordem de busca do _resource bundle_ seria a seguinte:
+
... `Text_pt_BR` -> Locale exato
... `Text_pt` -> Locale solicitado, sem o país
... `Text_en_US` -> Locale padrão
... `Text_en` -> Locale padrão, sem o país
... `Text` -> _Resource Bundle_ padrão
+
[source,java,indent=0]
.{java-package}/resourcebundle/ResourceBundle_NotExactLocale.java
----
include::{section-java-package}/resourcebundle/ResourceBundle_NotExactLocale.java[tag=code]
----
+
.Saída no console
[source,console]
----
pt_BR
it
----
+
Veja que o `Locale` padrão é `pt_BR`. Por isso ele foi utilizado ao solicitar um _resource bundle_ para `zh_CN`, pois não existe um bundle para esse `Locale`.
+
Por outro lado, ao solicitar um _resource bundle_ para o `Locale` `it_CH`, ele encontrou o mais próximo, que seria o `Locale` `it`, mas sem um país específico.

. Os arquivos mais específicos herdam as chaves e valores de arquivos mais genéricos, caso eles não as tenham.
+
[source,java,indent=0]
.{java-package}/resourcebundle/ResourceBundle_Inheritance.java
----
include::{section-java-package}/resourcebundle/ResourceBundle_Inheritance.java[tag=code]
----
+
.{resource-package}/Text.properties
----
include::{resource-package}/Text.properties[]
----
+
.{resource-package}/Text_pt.properties
----
include::{resource-package}/Text_pt.properties[]
----
+
.{resource-package}/Text_pt_BR.properties
----
include::{resource-package}/Text_pt_BR.properties[]
----
+
.Saída no console
[source,console]
----
Locale: pt_BR
caneta
papel   
keyboard
----
+
Veja que nesse exemplo foi localizado um _resource bundle_ com o `Locale` exato `pt_BR`. Porém, nem todas as chaves foram encontradas nesse arquivo:
+
* `caneta` foi localizado no arquivo `Text_pt_BR.properties`
* `papel` foi localizado no arquivo `Text_pt.properties`
* `keyboard` foi localizado no arquivo `Text.properties`

.Referências
****

* Using a Resource Bundle
+
Boyarsky, Jeanne; Selikoff, Scott. OCP: Oracle Certified Professional Java SE 8 Programmer II Study Guide (p. 258). Wiley. Edição do Kindle. 

* https://www.baeldung.com/java-resourcebundle[A Guide to the ResourceBundle.]

* https://docs.oracle.com/javase/7/docs/api/java/util/ResourceBundle.html[Class ResourceBundle.] Java Documentation.

* https://docs.oracle.com/javase/tutorial/i18n/resbundle/concept.html[About the ResourceBundle Class.] Java Documentation.

****