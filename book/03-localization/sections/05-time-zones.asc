:java-package: src/org/j6toj8/localization
:section-java-package: ../../../{java-package}

=== Fusos Horários

.Objetivo
--------------------------------------------------
Work with dates and times across time zones and manage changes resulting from daylight savings.
-
Trabalhe com datas e horas entre fusos horários e gerencie alterações resultantes de horários de verão.
--------------------------------------------------

O exame de certificação espera que você consiga lidar com diferentes fusos horários, além de conseguir entender o que ocorre ao realizar operações com datas e horas que passam por um horário de verão.

Nessa seção será apresenta a classe `ZonedDateTime`, que armazena Data, Hora e um fuso horário. Ou seja, é muito parecida com a classe `LocalDateTime`, porém possui um fuso horário.

A representação de um `ZonedDateTime` é `2007-12-03T10:15:30+01:00 Europe/Paris`.

. É possível criar um `ZonedDateTime` através do método `static` chamado `now`.
+
[source,java,indent=0]
.{java-package}/timezones/ZonedDateTime_Now.java
----
include::{section-java-package}/timezones/ZonedDateTime_Now.java[tag=code]
----
+
.Saída no console
[source,console]
----
2019-06-09T18:10:08.863-03:00[America/Sao_Paulo]
----
+
A saída no console irá apresentar a data e hora atual, e o fuso horário de onde o código está sendo executado.

. Também é possível criar um `ZonedDateTime` através do método `static` chamado `of`.
+
[source,java,indent=0]
.{java-package}/timezones/ZonedDateTime_Of.java
----
include::{section-java-package}/timezones/ZonedDateTime_Of.java[tag=code]
----
+
.Saída no console
[source,console]
----
2019-06-09T13:20:03.000001-03:00[America/Sao_Paulo]
2019-06-09T13:20:03.000001-03:00[America/Sao_Paulo]
2019-06-09T13:20:03.000001-03:00[America/Sao_Paulo]
----
+
Perceba que é possível criar um `ZonedDateTime` diretamente, ou através de um `LocalDateTime`, ou com uma junção de um `LocalDate` e um `LocalTime`. Note que em todos os casos é necessário informar o fuso horário.

. Assim como todas a novas classes de data e hora, não é possível criar uma instância de `ZonedDateTime` utilizando o construtor.
+
[source,java,indent=0]
.{java-package}/timezones/ZonedDateTime_Constructor.java
----
include::{section-java-package}/timezones/ZonedDateTime_Constructor.java[tag=code]
----

. Será lançada a exceção `DateTimeException` ao tentar criar uma data inválida.
+
[source,java,indent=0]
.{java-package}/timezones/ZonedDateTime_Invalid.java
----
include::{section-java-package}/timezones/ZonedDateTime_Invalid.java[tag=code]
----
+
.Saída no console
[source,console]
----
Exception in thread "main" java.time.DateTimeException: Invalid date 'APRIL 31'
	at java.time.LocalDate.create(LocalDate.java:431)
	at java.time.LocalDate.of(LocalDate.java:269)
	at java.time.LocalDateTime.of(LocalDateTime.java:361)
	at java.time.ZonedDateTime.of(ZonedDateTime.java:339)
	at org.j6toj8.localization.timezones.ZonedDateTime_Invalid.main(ZonedDateTime_Invalid.java:10)
----

. Existem vários métodos para somar e subtrair de `ZonedDateTime` 
+
[source,java,indent=0]
.{java-package}/timezones/ZonedDateTime_Manipulate.java
----
include::{section-java-package}/timezones/ZonedDateTime_Manipulate.java[tag=code]
----
+
.Saída no console
[source,console]
----
2019-05-20T09:20:12.000001-03:00[America/Sao_Paulo]
+2 horas: 2019-05-20T11:20:12.000001-03:00[America/Sao_Paulo]
+2 minutos: 2019-05-20T09:22:12.000001-03:00[America/Sao_Paulo]
+2 segundos: 2019-05-20T09:20:14.000001-03:00[America/Sao_Paulo]
+2 nanosegundos: 2019-05-20T09:20:12.000001002-03:00[America/Sao_Paulo]
+2 microssegundos: 2019-05-20T09:20:12.000003-03:00[America/Sao_Paulo]
+2 milissegundos: 2019-05-20T09:20:12.002001-03:00[America/Sao_Paulo]
-2 horas: 2019-05-20T07:20:12.000001-03:00[America/Sao_Paulo]
-2 minutos: 2019-05-20T09:18:12.000001-03:00[America/Sao_Paulo]
-2 segundos: 2019-05-20T09:20:10.000001-03:00[America/Sao_Paulo]
-2 nanosegundos: 2019-05-20T09:20:12.000000998-03:00[America/Sao_Paulo]
-2 microssegundos: 2019-05-20T09:20:11.999999-03:00[America/Sao_Paulo]
-2 milissegundos: 2019-05-20T09:20:11.998001-03:00[America/Sao_Paulo]
+2 dias: 2019-05-22T09:20:12.000001-03:00[America/Sao_Paulo]
+2 semanas: 2019-06-03T09:20:12.000001-03:00[America/Sao_Paulo]
+2 meses: 2019-07-20T09:20:12.000001-03:00[America/Sao_Paulo]
+2 anos: 2021-05-20T09:20:12.000001-03:00[America/Sao_Paulo]
+2 anos: 2021-05-20T09:20:12.000001-03:00[America/Sao_Paulo]
+2 décadas: 2039-05-20T09:20:12.000001-03:00[America/Sao_Paulo]
-2 dias: 2019-05-18T09:20:12.000001-03:00[America/Sao_Paulo]
-2 semanas: 2019-05-06T09:20:12.000001-03:00[America/Sao_Paulo]
-2 meses: 2019-03-20T09:20:12.000001-03:00[America/Sao_Paulo]
-2 anos: 2017-05-20T09:20:12.000001-03:00[America/Sao_Paulo]
-2 décadas: 1999-05-20T09:20:12.000001-03:00[America/Sao_Paulo]
----

. `ZonedDateTime` é imutável, então é necessário armazenar o retorno de uma alteração em uma variável.
+
[source,java,indent=0]
.{java-package}/timezones/ZonedDateTime_Immutability.java
----
include::{section-java-package}/timezones/ZonedDateTime_Immutability.java[tag=code]
----
+
.Saída no console
[source,console]
----
2019-05-20T09:20:03.000000300-03:00[America/Sao_Paulo]
2019-05-20T09:20:03.000000300-03:00[America/Sao_Paulo]
2019-05-20T10:20:03.000000300-03:00[America/Sao_Paulo]
----

. É comum utilizar o encadeamento de chamadas com esses métodos.
+
[source,java,indent=0]
.{java-package}/timezones/ZonedDateTime_Chaining.java
----
include::{section-java-package}/timezones/ZonedDateTime_Chaining.java[tag=code]
----
+
.Saída no console
[source,console]
----
2019-05-20T09:20:04.000000300-03:00[America/Sao_Paulo]
2020-05-21T10:20:04.000000300-03:00[America/Sao_Paulo]
----

. Ao manipular um `ZonedDateTime`, será levado em conta o horário de verão daquele fuso horário.
+
[source,java,indent=0]
.{java-package}/timezones/ZonedDateTime_DaylightSavings.java
----
include::{section-java-package}/timezones/ZonedDateTime_DaylightSavings.java[tag=code]
----
+
.Saída no console
[source,console]
----
2018-11-03T23:30-03:00[America/Sao_Paulo]
+2 horas: 2018-11-04T02:30-02:00[America/Sao_Paulo]
----
+
Neste exemplo o fuso horário que era `-03:00` virou `-02:00`, pois esse foi o dia em que teve início o horário de verão no Brasil. Outro detalhe é que por conta do horário de verão, ao somar 2 horas às `23:30` resultou em `02:30` do dia seguinte. Se não houvesse horário de verão, o resultado seria `01:30`.

. É possível recuperar todos os fusos horários disponíveis através da classe `ZoneId`.
+
[source,java,indent=0]
.{java-package}/timezones/ZonedDateTime_Zones.java
----
include::{section-java-package}/timezones/ZonedDateTime_Zones.java[tag=code]
----
+
.Saída no console (parcial)
[source,console]
----
Asia/Aden
America/Cuiaba
Etc/GMT+9
Etc/GMT+8
Africa/Nairobi
America/Marigot
Asia/Aqtau
Pacific/Kwajalein
America/El_Salvador
Asia/Pontianak
Africa/Cairo
Pacific/Pago_Pago
Africa/Mbabane
Asia/Kuching
Pacific/Honolulu
Pacific/Rarotonga
America/Guatemala
...
----
+
A lista do console irá apresentar todos os `ZoneId` disponíveis. O exemplo acima contempla apeanas parte dos `ZoneId`.
+
Além disso, existem muitos `ZoneId` duplicados, pois representam o mesmo fuso horário, como por exemplo `America/Sao_Paulo` e `Brazil/East`.

.Referências
****

* Working with Dates and Times
+
Boyarsky, Jeanne; Selikoff, Scott. OCP: Oracle Certified Professional Java SE 8 Programmer II Study Guide (p. 234). Wiley. Edição do Kindle. 

* https://www.baeldung.com/java-8-date-time-intro[Introduction to the Java 8 Date/Time API.]

* https://docs.oracle.com/javase/tutorial/datetime/TOC.html[Trail: Date Time: Table of Contents.] The Java™ Tutorials.

* https://stackoverflow.com/questions/32437550/whats-the-difference-between-instant-and-localdatetime/32443004[What's the difference between Instant and LocalDateTime?]

****
