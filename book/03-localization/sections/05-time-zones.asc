:java-package: src/org/j6toj8/localization
:section-java-package: ../../../{java-package}

=== Time zones

.Objective
--------------------------------------------------
Work with dates and times across time zones and manage changes resulting from daylight savings.
--------------------------------------------------

The certification exam expects you to be able to cope with different time zones, as well as understanding what happens when you perform operations with dates and times that go through daylight saving time.

This section will introduce the `ZonedDateTime` class, which stores Date, Time and a time zone. That is, it is very similar to the `LocalDateTime` class, but has a time zone.

The representation of a `ZonedDateTime` is `2007-12-03T10:15:30+01:00 Europe/Paris`.

. You can create a `ZonedDateTime` via the `static` method called `now`.
+
[source,java,indent=0]
.{java-package}/timezones/ZonedDateTime_Now.java
----
include::{section-java-package}/timezones/ZonedDateTime_Now.java[tag=code]
----
+
.console output
[source,console]
----
2019-06-09T18:10:08.863-03:00[America/Sao_Paulo]
----
+
The console output will display the current date and time, and the time zone from which the code is being executed.

. It is also possible to create a `ZonedDateTime` through the `static` method called `of`.
+
[source,java,indent=0]
.{java-package}/timezones/ZonedDateTime_Of.java
----
include::{section-java-package}/timezones/ZonedDateTime_Of.java[tag=code]
----
+
.console output
[source,console]
----
2019-06-09T13:20:03.000001-03:00[America/Sao_Paulo]
2019-06-09T13:20:03.000001-03:00[America/Sao_Paulo]
2019-06-09T13:20:03.000001-03:00[America/Sao_Paulo]
----
+
Note that it is possible to create a `ZonedDateTime` directly, either through a `LocalDateTime`, or with a join of a `LocalDate` and a `LocalTime`. Note that in all cases it is necessary to enter the time zone.

. As with all new date and time classes, you cannot create an instance of `ZonedDateTime` using the constructor.
+
[source,java,indent=0]
.{java-package}/timezones/ZonedDateTime_Constructor.java
----
include::{section-java-package}/timezones/ZonedDateTime_Constructor.java[tag=code]
----

. The `DateTimeException` exception will be thrown when trying to create an invalid date.
+
[source,java,indent=0]
.{java-package}/timezones/ZonedDateTime_Invalid.java
----
include::{section-java-package}/timezones/ZonedDateTime_Invalid.java[tag=code]
----
+
.console output
[source,console]
----
Exception in thread "main" java.time.DateTimeException: Invalid date 'APRIL 31'
	at java.time.LocalDate.create(LocalDate.java:431)
	at java.time.LocalDate.of(LocalDate.java:269)
	at java.time.LocalDateTime.of(LocalDateTime.java:361)
	at java.time.ZonedDateTime.of(ZonedDateTime.java:339)
	at org.j6toj8.localization.timezones.ZonedDateTime_Invalid.main(ZonedDateTime_Invalid.java:10)
----

. There are several methods for adding and subtracting from `ZonedDateTime`
+
[source,java,indent=0]
.{java-package}/timezones/ZonedDateTime_Manipulate.java
----
include::{section-java-package}/timezones/ZonedDateTime_Manipulate.java[tag=code]
----
+
.console output
[source,console]
----
2019-05-20T09:20:12.000001-03:00[America/Sao_Paulo]
+2 hours: 2019-05-20T11:20:12.000001-03:00[America/Sao_Paulo]
+2 minutes: 2019-05-20T09:22:12.000001-03:00[America/Sao_Paulo]
+2 seconds: 2019-05-20T09:20:14.000001-03:00[America/Sao_Paulo]
+2 nanoseconds: 2019-05-20T09:20:12.000001002-03:00[America/Sao_Paulo]
+2 microseconds: 2019-05-20T09:20:12.000003-03:00[America/Sao_Paulo]
+2 milliseconds: 2019-05-20T09:20:12.002001-03:00[America/Sao_Paulo]
-2 hours: 2019-05-20T07:20:12.000001-03:00[America/Sao_Paulo]
-2 minutes: 2019-05-20T09:18:12.000001-03:00[America/Sao_Paulo]
-2 seconds: 2019-05-20T09:20:10.000001-03:00[America/Sao_Paulo]
-2 nanoseconds: 2019-05-20T09:20:12.000000998-03:00[America/Sao_Paulo]
-2 microseconds: 2019-05-20T09:20:11.999999-03:00[America/Sao_Paulo]
-2 milliseconds: 2019-05-20T09:20:11.998001-03:00[America/Sao_Paulo]
+2 days: 2019-05-22T09:20:12.000001-03:00[America/Sao_Paulo]
+2 weeks: 2019-06-03T09:20:12.000001-03:00[America/Sao_Paulo]
+2 months: 2019-07-20T09:20:12.000001-03:00[America/Sao_Paulo]
+2 years: 2021-05-20T09:20:12.000001-03:00[America/Sao_Paulo]
+2 decades: 2039-05-20T09:20:12.000001-03:00[America/Sao_Paulo]
-2 days: 2019-05-18T09:20:12.000001-03:00[America/Sao_Paulo]
-2 weeks: 2019-05-06T09:20:12.000001-03:00[America/Sao_Paulo]
-2 months: 2019-03-20T09:20:12.000001-03:00[America/Sao_Paulo]
-2 years: 2017-05-20T09:20:12.000001-03:00[America/Sao_Paulo]
-2 decades: 1999-05-20T09:20:12.000001-03:00[America/Sao_Paulo]
----

. `ZonedDateTime` is immutable, so you must store the return of a change in a variable.
+
[source,java,indent=0]
.{java-package}/timezones/ZonedDateTime_Immutability.java
----
include::{section-java-package}/timezones/ZonedDateTime_Immutability.java[tag=code]
----
+
.console output
[source,console]
----
2019-05-20T09:20:03.000000300-03:00[America/Sao_Paulo]
2019-05-20T09:20:03.000000300-03:00[America/Sao_Paulo]
2019-05-20T10:20:03.000000300-03:00[America/Sao_Paulo]
----

. It is common to use call chaining with these methods.
+
[source,java,indent=0]
.{java-package}/timezones/ZonedDateTime_Chaining.java
----
include::{section-java-package}/timezones/ZonedDateTime_Chaining.java[tag=code]
----
+
.console output
[source,console]
----
2019-05-20T09:20:04.000000300-03:00[America/Sao_Paulo]
2020-05-21T10:20:04.000000300-03:00[America/Sao_Paulo]
----

. When handling a `ZonedDateTime`, the daylight saving time of that time zone will be taken into account.
+
[source,java,indent=0]
.{java-package}/timezones/ZonedDateTime_DaylightSavings.java
----
include::{section-java-package}/timezones/ZonedDateTime_DaylightSavings.java[tag=code]
----
+
.console output
[source,console]
----
2018-11-03T23:30-03:00[America/Sao_Paulo]
+2 hours: 2018-11-04T02:30-02:00[America/Sao_Paulo]
----
+
In this example, the time zone that was `-03:00` became `-02:00`, because that was beginning of the day daylight savings time in Brazil. Another detail is that because of daylight saving time, adding 2 hours at 23:30 resulted in 02:30 the next day. If there was no daylight saving time, the result would be `01: 30`.

. You can retrieve all available time zones through the `ZoneId` class.
+
[source,java,indent=0]
.{java-package}/timezones/ZonedDateTime_Zones.java
----
include::{section-java-package}/timezones/ZonedDateTime_Zones.java[tag=code]
----
+
.console output (parcial)
[source,console]
----
Asia/Aden
America/Cuiaba
Etc/GMT+9
Etc/GMT+8
Africa/Nairobi
America/Marigot
Asia/Aqtau
Pacific/Kwajalein
America/El_Salvador
Asia/Pontianak
Africa/Cairo
Pacific/Pago_Pago
Africa/Mbabane
Asia/Kuching
Pacific/Honolulu
Pacific/Rarotonga
America/Guatemala
...
----
+
The console list will display all available `ZoneId`. The above example only contemplates part of `ZoneId`.
+
Also, there are many duplicate `ZoneId` as they represent the same time zone as for example `America/Sao_Paulo` and `Brazil/East`.

.References
****

* Working with Dates and Times
+
Boyarsky, Jeanne; Selikoff, Scott. OCP: Oracle Certified Professional Java SE 8 Programmer II Study Guide (p. 234). Wiley. Kindle Edition.

* https://www.baeldung.com/java-8-date-time-intro[Introduction to the Java 8 Date/Time API.]

* https://docs.oracle.com/javase/tutorial/datetime/TOC.html[Trail: Date Time: Table of Contents.] The Javaâ„¢ Tutorials.

* https://stackoverflow.com/questions/32437550/whats-the-difference-between-instant-and-localdatetime/32443004[What's the difference between Instant and LocalDateTime?]

****
