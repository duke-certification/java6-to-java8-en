:java-package: src/org/j6toj8/languageenhancements
:section-java-package: ../../../{java-package}

=== Objetos Strings

.Objetivo
----
Develop code that uses String objects in the switch statement, binary literals, and numeric literals, including underscores in literals.
-
Desenvolver código que utilize objetos String em instruções Switch, binários literais, e numéricos literais, incluindo underscore (_) em literais.
----

==== String em instruções Switch

É esperado que o candidato saiba compreender e analisar o uso de Strings em instruções `switch`, como no seguinte exemplo.

[source,java,indent=0]
.{java-package}/stringinswitch/StringInSwitch_Complete.java
----
include::{section-java-package}/stringinswitch/StringInSwitch_Complete.java[tag=code]
----

Apesar da certificação ter foco nas atualizações trazidas pelo Java 7 e 8, é esperado que o candidato entenda também conceitos de versões anteriores do Java. Por isso, serão apresentadas algumas regras que talvez você já conheça sobre `switch`, mas utilizando `String` no `switch`.

. Todo `case` deve ser único, não pode se repetir.

. O `default` pode aparecer em qualquer posição no `switch`.
+
.{java-package}/stringinswitch/StringInSwitch_Default.java
[source,java,indent=0]
----
include::{section-java-package}/stringinswitch/StringInSwitch_Default.java[tag=code]
----

. Tipos suportados em `switch`.
* int e Integer
* byte e Byte
* short e Short
* char e Character
* String
* valores de Enums

. Tipos não suportados em `switch`.
+
.{java-package}/stringinswitch/StringInSwitch_Type.java
[source,java,indent=0]
----
include::{section-java-package}/stringinswitch/StringInSwitch_Type.java[tag=code]
----

. A execução se inicia em um `case` e somente para ao encontrar um `break`.
+
.{java-package}/stringinswitch/StringInSwitch_Break.java
[source,java,indent=0]
----
include::{section-java-package}/stringinswitch/StringInSwitch_Break.java[tag=code]
----
+
.saída no console
[source,console]
----
Janeiro
Não é um mês
Fevereiro
----
+
Nesse caso a execução inicia no `case "jan"`, passar pelo `default` e pelo `case "fev"` até parar no `break`, por isso as 3 strings aparecem no console.

. Um `switch` vazio é válido, mesmo que não tenha utilidade.
+
.{java-package}/stringinswitch/StringInSwitch_Empty.java
[source,java,indent=0]
----
include::{section-java-package}/stringinswitch/StringInSwitch_Empty.java[tag=code]
----

. Todos os valores de `case` precisam ser constantes, ou seja, variáveis finais em tempo de compilação. Se o valor do `case` puder mudar em tempo de execução, o código não compila.
+
.{java-package}/stringinswitch/StringInSwitch_ConstantOnly.java
[source,java,indent=0]
----
include::{section-java-package}/stringinswitch/StringInSwitch_ConstantOnly.java[tag=code]
----

Pronto, essas são as regras de `switch`. Você provavelmente já conheçe algumas referentes à versões anteriores do Java, mas agora você as viu em `switch` que utilizam Strings. Isso não era possível antes do Java 7.

==== Literais Binários e Numéricos, incluindo underscore( _ )

É esperado que o candidato saiba compreender e analisar o uso de literais binários e numéricos, como no seguinte exemplo.

[source,java,indent=0]
.{java-package}/literals/Literals_Complete.java
----
include::{section-java-package}/literals/Literals_Complete.java[tag=code]
----

Apesar da certificação ter foco nas atualizações trazidas pelo Java 7 e 8, é esperado que o candidato entenda também conceitos de versões anteriores do Java. Por isso, serão apresentadas algumas regras que talvez você já conheça sobre literais.

. No Java, _Literal_ é qualquer número escrito diretamente no código, como todos do exemplo acima. 

. Por padrão, o Java interpreta literais como `int`. Ou seja, se não houver um sufixo no número para mudar seu tipo, ele é um `int`.
+
.{java-package}/literals/Literals_Suffix.java
[source,java,indent=0]
----
include::{section-java-package}/literals/Literals_Suffix.java[tag=code]
----

. Por padrão, o Java interpreta literais como sendo decimais. Existem prefixos que mudam o sistema numérico do literal.
+
.{java-package}/literals/Literals_Prefix.java
[source,java,indent=0]
----
include::{section-java-package}/literals/Literals_Prefix.java[tag=code]
----

. A partir do Java 7, é possível utilizar underscore (_) para separar visualmente um número. Isso não muda o valor do número, e serve apenas para tornar o código mais legível.
+
.{java-package}/literals/Literals_Underscore.java
[source,java,indent=0]
----
include::{section-java-package}/literals/Literals_Underscore.java[tag=code]
----

.Referências
****

.Strings em Switch
* Boyarsky, Jeanne; Selikoff, Scott. OCP: Oracle Certified Professional Java SE 8 Programmer II Study Guide (p. 598). Wiley. Edição do Kindle.
* https://docs.oracle.com/javase/8/docs/technotes/guides/language/strings-switch.html[Strings in switch Statements.] Java Documentation.
* https://dzone.com/articles/new-java-7-feature-string[New Java 7 Feature: String in Switch support.] DZone.

.Literais
* Boyarsky, Jeanne; Selikoff, Scott. OCP: Oracle Certified Professional Java SE 8 Programmer II Study Guide (p. 597). Wiley. Edição do Kindle.
* https://pt.wikibooks.org/wiki/Java/Literais[Java/Literais.] Wikibooks.

****
