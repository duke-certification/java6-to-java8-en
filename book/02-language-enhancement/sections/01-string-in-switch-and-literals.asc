:java-package: src/org/j6toj8/languageenhancements
:section-java-package: ../../../{java-package}

=== String objects

.Objective
----
Develop code that uses String objects in the switch statement, binary literals, and numeric literals, including underscores in literals.
----

==== String in the switch statement

The candidate is expected to understand and analyze the use of Strings in `switch` statements, as in the following example.

[source,java,indent=0]
.{java-package}/stringinswitch/StringInSwitch_Complete.java
----
include::{section-java-package}/stringinswitch/StringInSwitch_Complete.java[tag=code]
----

Although certification focuses on updates brought by Java 7 and 8, the candidate is expected to understand concepts from previous versions of Java as well. Therefore, some rules you may already know about `switch` will be presented but using `String` on the `switch`.

. Every `case` must be unique, cannot be repeated.

. The `default` can appear anywhere on the `switch`.
+
.{java-package}/stringinswitch/StringInSwitch_Default.java
[source,java,indent=0]
----
include::{section-java-package}/stringinswitch/StringInSwitch_Default.java[tag=code]
----

. Supported types in `switch`.
* int and Integer
* byte and Byte
* short and Short
* char and Character
* String
* Enums values

. Types not supported in `switch`.
+
.{java-package}/stringinswitch/StringInSwitch_Type.java
[source,java,indent=0]
----
include::{section-java-package}/stringinswitch/StringInSwitch_Type.java[tag=code]
----

. Execution starts in a `case` and only stops when it encounters a `break`.
+
.{java-package}/stringinswitch/StringInSwitch_Break.java
[source,java,indent=0]
----
include::{section-java-package}/stringinswitch/StringInSwitch_Break.java[tag=code]
----
+
.console output
[source,console]
----
January
Not a month
February
----
+
In this case, execution starts in `case "jan "`, goes through `default` and `case "Feb"` until it stops at `break`. So the 3 strings will appear in the console.

. An empty `switch` is valid even if it has no use.
+
.{java-package}/stringinswitch/StringInSwitch_Empty.java
[source,java,indent=0]
----
include::{section-java-package}/stringinswitch/StringInSwitch_Empty.java[tag=code]
----

. All `case` values must be constant, i.e., final variables at compile time. If the value of `case` can change at runtime, the code does not compile.
+
.{java-package}/stringinswitch/StringInSwitch_ConstantOnly.java
[source,java,indent=0]
----
include::{section-java-package}/stringinswitch/StringInSwitch_ConstantOnly.java[tag=code]
----

These are the switch rules. You probably already know some about previous versions of Java, but now you have seen them in `switch` that use Strings. This was not possible before Java 7.

==== Literais Binários e Numéricos, incluindo underscore( _ )

É esperado que o candidato saiba compreender e analisar o uso de literais binários e numéricos, como no seguinte exemplo.

[source,java,indent=0]
.{java-package}/literals/Literals_Complete.java
----
include::{section-java-package}/literals/Literals_Complete.java[tag=code]
----

Apesar da certificação ter foco nas atualizações trazidas pelo Java 7 e 8, é esperado que o candidato entenda também conceitos de versões anteriores do Java. Por isso, serão apresentadas algumas regras que talvez você já conheça sobre literais.

. No Java, _Literal_ é qualquer número escrito diretamente no código, como todos do exemplo acima. 

. Por padrão, o Java interpreta literais como `int`. Ou seja, se não houver um sufixo no número para mudar seu tipo, ele é um `int`.
+
.{java-package}/literals/Literals_Suffix.java
[source,java,indent=0]
----
include::{section-java-package}/literals/Literals_Suffix.java[tag=code]
----

. Por padrão, o Java interpreta literais como sendo decimais. Existem prefixos que mudam o sistema numérico do literal.
+
.{java-package}/literals/Literals_Prefix.java
[source,java,indent=0]
----
include::{section-java-package}/literals/Literals_Prefix.java[tag=code]
----

. A partir do Java 7, é possível utilizar underscore (_) para separar visualmente um número. Isso não muda o valor do número, e serve apenas para tornar o código mais legível.
+
.{java-package}/literals/Literals_Underscore.java
[source,java,indent=0]
----
include::{section-java-package}/literals/Literals_Underscore.java[tag=code]
----

.Referências
****

.Strings em Switch
* Boyarsky, Jeanne; Selikoff, Scott. OCP: Oracle Certified Professional Java SE 8 Programmer II Study Guide (p. 598). Wiley. Edição do Kindle.
* https://docs.oracle.com/javase/8/docs/technotes/guides/language/strings-switch.html[Strings in switch Statements.] Java Documentation.
* https://dzone.com/articles/new-java-7-feature-string[New Java 7 Feature: String in Switch support.] DZone.

.Literais
* Boyarsky, Jeanne; Selikoff, Scott. OCP: Oracle Certified Professional Java SE 8 Programmer II Study Guide (p. 597). Wiley. Edição do Kindle.
* https://pt.wikibooks.org/wiki/Java/Literais[Java/Literais.] Wikibooks.

****
