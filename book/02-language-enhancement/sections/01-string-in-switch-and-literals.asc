:java-package: src/org/j6toj8/languageenhancements
:section-java-package: ../../../{java-package}

=== String objects

.Objective
----
Develop code that uses String objects in the switch statement, binary literals, and numeric literals, including underscores in literals.
----

==== String in the switch statement

The candidate is expected to understand and analyze the use of Strings in `switch` statements, as in the following example.

[source,java,indent=0]
.{java-package}/stringinswitch/StringInSwitch_Complete.java
----
include::{section-java-package}/stringinswitch/StringInSwitch_Complete.java[tag=code]
----

Although certification focuses on updates brought by Java 7 and 8, the candidate is expected to understand concepts from previous versions of Java as well. Therefore, some rules you may already know about `switch` will be presented but using `String` on the `switch`.

. Every `case` must be unique, cannot be repeated.

. The `default` can appear anywhere on the `switch`.
+
.{java-package}/stringinswitch/StringInSwitch_Default.java
[source,java,indent=0]
----
include::{section-java-package}/stringinswitch/StringInSwitch_Default.java[tag=code]
----

. Supported types in `switch`.
* int and Integer
* byte and Byte
* short and Short
* char and Character
* String
* Enums values

. Types not supported in `switch`.
+
.{java-package}/stringinswitch/StringInSwitch_Type.java
[source,java,indent=0]
----
include::{section-java-package}/stringinswitch/StringInSwitch_Type.java[tag=code]
----

. Execution starts in a `case` and only stops when it encounters a `break`.
+
.{java-package}/stringinswitch/StringInSwitch_Break.java
[source,java,indent=0]
----
include::{section-java-package}/stringinswitch/StringInSwitch_Break.java[tag=code]
----
+
.console output
[source,console]
----
January
Not a month
February
----
+
In this case, execution starts in `case "jan "`, goes through `default` and `case "Feb"` until it stops at `break`. So the 3 strings will appear in the console.

. An empty `switch` is valid even if it has no use.
+
.{java-package}/stringinswitch/StringInSwitch_Empty.java
[source,java,indent=0]
----
include::{section-java-package}/stringinswitch/StringInSwitch_Empty.java[tag=code]
----

. All `case` values must be constant, i.e., final variables at compile time. If the value of `case` can change at runtime, the code does not compile.
+
.{java-package}/stringinswitch/StringInSwitch_ConstantOnly.java
[source,java,indent=0]
----
include::{section-java-package}/stringinswitch/StringInSwitch_ConstantOnly.java[tag=code]
----

These are the switch rules. You probably already know some about previous versions of Java, but now you have seen them in `switch` that use Strings. This was not possible before Java 7.

==== Binary and numeric literals, including underscores in literals

The candidate is expected to understand and analyze the use of binary and numeric literals, as in the following example.

[source,java,indent=0]
.{java-package}/literals/Literals_Complete.java
----
include::{section-java-package}/literals/Literals_Complete.java[tag=code]
----

Although certification focuses on updates brought by Java 7 and 8, the candidate is expected to understand concepts from previous versions of Java as well. So here are some rules you may already know about literals.

. In Java, _Literal_ is any number written directly in code, like the previous example.

. By default, Java interprets literals as `int`. That is, if there is no suffix in the number to change its type, it is an `int`.
+
.{java-package}/literals/Literals_Suffix.java
[source,java,indent=0]
----
include::{section-java-package}/literals/Literals_Suffix.java[tag=code]
----

. By default, Java interprets literals to be decimal. There are prefixes that change the numerical system of the literal.
+
.{java-package}/literals/Literals_Prefix.java
[source,java,indent=0]
----
include::{section-java-package}/literals/Literals_Prefix.java[tag=code]
----

. Starting with Java 7, you can use underscore (_) to visually separate a number. This does not change the value of the number, and only serves to make the code more readable.
+
.{java-package}/literals/Literals_Underscore.java
[source,java,indent=0]
----
include::{section-java-package}/literals/Literals_Underscore.java[tag=code]
----

.References
****

.String in the switch statement
* Boyarsky, Jeanne; Selikoff, Scott. OCP: Oracle Certified Professional Java SE 8 Programmer II Study Guide (p. 598). Wiley. Kindle Edition.
* https://docs.oracle.com/javase/8/docs/technotes/guides/language/strings-switch.html[Strings in switch Statements.] Java Documentation.
* https://dzone.com/articles/new-java-7-feature-string[New Java 7 Feature: String in Switch support.] DZone.

.Literals
* Boyarsky, Jeanne; Selikoff, Scott. OCP: Oracle Certified Professional Java SE 8 Programmer II Study Guide (p. 597). Wiley. Kindle Edition.
* https://pt.wikibooks.org/wiki/Java/Literais[Java/Literais.] Wikibooks.

****
