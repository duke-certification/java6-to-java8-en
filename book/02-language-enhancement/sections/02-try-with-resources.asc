:java-package: src/org/j6toj8/languageenhancements
:section-java-package: ../../../{java-package}

=== Try-with-resources

.Objective
----
Develop code that uses try-with-resources statements, including using classes that implement the AutoCloseable interface.
----

The candidate is expected to understand and analyze the use of the _try-with-resources_ statement, including classes that implement the `AutoClosable` interface.

Before proceeding, based on the following example, understand the execution of the `main` method and what is presented on the console after its execution.

[source,java,indent=0]
.{java-package}/trywithresources/TryWithResouces_Complete.java
----
include::{section-java-package}/trywithresources/TryWithResouces_Complete.java[tag=code]
----

The previous code uses two files and reads and writes them. The big news of this code is the declaration of variables within parentheses after the `try` statement. This is the syntax called _try-with-resources_, and it automatically calls the `close ()` method of the resources being used. Until Java 6, you would need to call `close ()` manually, as in the following example.

[source,java,indent=0]
.{java-package}/trywithresources/TryWithResouces_Java6.java
----
include::{section-java-package}/trywithresources/TryWithResouces_Java6.java[tag=code]
----

. The _try-with-resources_ statement automatically closes resources that implement the `AutoCloseable` interface.

. It does not need explicit `catch` or `finally`.
+
[source,java,indent=0]
.{java-package}/trywithresources/TryWithResouces_AutoCloseable.java
----
include::{section-java-package}/trywithresources/TryWithResouces_AutoCloseable.java[tag=code]
----
+
.console output
[source,console]
----
try
Closed door.
----

. The _try-with-resources_ statement can still have `catch` and `finally`, although it is not required. In this case, resources are closed after `try` and before either any `catch` or `finally`.

. The `close` method may throw an exception being caught by `catch`, if any.
+
[source,java,indent=0]
.{java-package}/trywithresources/TryWithResouces_WithCatchFinally.java
----
include::{section-java-package}/trywithresources/TryWithResouces_WithCatchFinally.java[tag=code]
----
+
.console output
[source,console]
----
try
Closed door.
catch
finally
----
+
That is, first the `try` is called. Soon after is called the `close ()` method which at the end throws an exception. `Catch` catches this exception. And finally `finally` is called.

. Resources declared in the _try-with-resources_ statement are closed in the reverse order of the declaration.
+
[source,java,indent=0]
.{java-package}/trywithresources/TryWithResouces_Order.java
----
include::{section-java-package}/trywithresources/TryWithResouces_Order.java[tag=code]
----
+
.console output
[source,console]
----
Hello.
Drawer closed.
Closed door.
----
+
That is, since the declaration order within _try-with-resources_ was `Door` and then `Drawer`, the call order of the `close` method is reversed: `Drawer` and then `Door`.

. Resources declared in _try-with-resources_ are only available within the `try` block.
+
[source,java,indent=0]
.{java-package}/trywithresources/TryWithResouces_ResourceInsideTry.java
----
include::{section-java-package}/trywithresources/TryWithResouces_ResourceInsideTry.java[tag=code]
----

. Only classes that implement `AutoCloseable` can be used within _try-with-resources_.
+
[source,java,indent=0]
.{java-package}/trywithresources/TryWithResouces_NoAutoCloseable.java
----
include::{section-java-package}/trywithresources/TryWithResouces_NoAutoCloseable.java[tag=code]
----

. If the `close ()` method throws a checked exception (i.e., inherits from `Exception`), the code only compiles if there is a `catch` that catches that exception or the method declares `throws`.
+
[source,java,indent=0]
.{java-package}/trywithresources/TryWithResouces_CloseException.java
----
include::{section-java-package}/trywithresources/TryWithResouces_CloseException.java[tag=code]
----

. Java 5 already had an interface called `Closeable`, but it allows only `IOException` to be thrown. The new `AutoCloseable` interface permits you to throw any exceptions. Since `Closeable` meets the implementation of `AutoCloseable`, it now extends `AutoCloseable`. So all classes that already implement `Closeable` can be used inside _try-with-resources_. Here's what the `Closeable` interface was like before and from Java 7:
+
.Before Java 7
[source,java]
----
public interface Closeable {
  public void close() throws IOException;
}
----
+
.From Java 7
[source,java]
----
public interface Closeable extends AutoCloseable {
  public void close() throws IOException;
}
----

. The new behavior is suppressed exceptions. If both the `try` block and the `close` method throw exception, that of `close` is suppressed because that of `try` is thrown first.
+
[source,java,indent=0]
.{java-package}/trywithresources/TryWithResouces_Suppressed.java
----
include::{section-java-package}/trywithresources/TryWithResouces_Suppressed.java[tag=code]
----
+
.Saída no console
[source,console]
----
try
close
error on try
error on close
----
+
That is, the exception that was actually caught was the `try` block because it was thrown first. The exception thrown by the `close` method has been suppressed and is available in an array in the exception `getSuppressed()` method.

. And lastly, it should be remembered that the _"default"_ `try` statement still necessarily needs a `catch` or `finally`.
+
[source,java,indent=0]
.{java-package}/trywithresources/TryWithResouces_CommonTry.java
----
include::{section-java-package}/trywithresources/TryWithResouces_CommonTry.java[tag=code]
----

==== Some types that implement _Closeable_

* `InputStream` and its subclasses (`FileInputStream`, `ObjectInputStream`, etc)
* `OutputStream` and its subclasses (`ByteArrayOutputStream`, `FileOutputStream`, etc)
* `Reader` and its subclasses (`BufferedReader`, `CharSequenceReader`)
* `Writer` and its subclasses (`BufferedWriter`, `PrintWriter`, etc)

.References
****

* Using Try-With-Resources
+
Boyarsky, Jeanne; Selikoff, Scott. OCP: Oracle Certified Professional Java SE 8 Programmer II Study Guide (p. 296). Wiley. Kindle Edition.

* https://www.baeldung.com/java-try-with-resources[Java – Try with Resources.]

* https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html[The try-with-resources Statement.] Java Documentation.

* https://pt.stackoverflow.com/questions/172909/como-funciona-o-try-with-resources/172910#172910[Como funciona o try-with-resources?] (pt-BR)

****