:java-package: src/org/j6toj8/languageenhancements
:section-java-package: ../../../{java-package}

=== Múltiplas `Exception` no mesmo `catch`

.Objetivo
----
Develop code that handles multiple Exception types in a single catch block.
-
Desenvolver código que lide com múltiplos tipos de Exception em um único bloco catch.
----

É esperado que o candidato saiba compreender e analisar o uso da instrução _try-catch_ com múltiplos tipos de `Exception` no mesmo bloco `catch`. 

Antes de continuar, com base no exemplo a seguir, entenda a execução do método `main` e o que é apresentado no console após sua execução.

[source,java,indent=0]
.{java-package}/multipleexception/MultipleException_Complete.java
----
include::{section-java-package}/multipleexception/MultipleException_Complete.java[tag=code]
----

O código anterior possui um bloco _try-catch_ que você provavelmente já conhece. A novidade neste código está no primeiro bloco `catch`, onde várias exceções são declaradas e capturadas ao mesmo tempo.

.Saída no console
[source,console]
----
Exceção capturada: java.lang.NullPointerException
----

. Desde o Java 7, múltiplas exceções podem ser capturadas no mesmo `catch`.

. Apenas uma variável é permitida para um bloco `catch`, e deve estar localizada no final.
+
[source,java,indent=0]
.{java-package}/multipleexception/MultipleException_MultipleSameCatch.java
----
include::{section-java-package}/multipleexception/MultipleException_MultipleSameCatch.java[tag=code]
----

. Não é permitido declarar exceções diferentes, mas que seriam redundantes levando em consideração a herança.

+
[source,java,indent=0]
.{java-package}/multipleexception/MultipleException_Redundant.java
----
include::{section-java-package}/multipleexception/MultipleException_Redundant.java[tag=code]
----

. Ao fazer `catch` de múltiplas `Exception`, não é permitido sobrescrever a variável da exceção. Mas é possível se for apenas uma `Exception` no `catch`.
+
[source,java,indent=0]
.{java-package}/multipleexception/MultipleException_OverrideVar.java
----
include::{section-java-package}/multipleexception/MultipleException_OverrideVar.java[tag=code]
----

. Assim como nas versões anteriores, tipos mais genéricos de `Exception` devem vir depois, mais abaixo nos _catch's_.

+
[source,java,indent=0]
.{java-package}/multipleexception/MultipleException_GenericsLower.java
----
include::{section-java-package}/multipleexception/MultipleException_GenericsLower.java[tag=code]
----

. Assim como nas versões anteriores, Exceções repetidas ainda são proibidas.
+
[source,java,indent=0]
.{java-package}/multipleexception/MultipleException_RepeatException.java
----
include::{section-java-package}/multipleexception/MultipleException_RepeatException.java[tag=code]
----

. Assim como nas versões anterior, Exceções checadas (aquelas que herdam de `Exception`) só podem estar em um `catch` caso algo no `try` lance elas.
+
[source,java,indent=0]
.{java-package}/multipleexception/MultipleException_CheckedException.java
----
include::{section-java-package}/multipleexception/MultipleException_CheckedException.java[tag=code]
----

.Referências
****

* Boyarsky, Jeanne; Selikoff, Scott. OCP: Oracle Certified Professional Java SE 8 Programmer II Study Guide (p. 291). Wiley. Edição do Kindle.

* https://docs.oracle.com/javase/8/docs/technotes/guides/language/catch-multiple.html[Catching Multiple Exception Types and Rethrowing Exceptions with Improved Type Checking.] Java Documentation.

****
