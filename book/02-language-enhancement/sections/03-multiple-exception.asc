:java-package: src/org/j6toj8/languageenhancements
:section-java-package: ../../../{java-package}

=== Handles multiple Exception in a single catch

.Objective
----
Develop code that handles multiple Exception types in a single catch block.
----

The candidate is expected to understand and analyze the use of the _try-catch_ statement with multiple types of `Exception` in the same `catch` block.

Before proceeding, based on the following example, understand the execution of the `main` method and what is presented on the console after its execution.

[source,java,indent=0]
.{java-package}/multipleexception/MultipleException_Complete.java
----
include::{section-java-package}/multipleexception/MultipleException_Complete.java[tag=code]
----

The previous code has a _try-catch_ block that you probably already know. The new about this code is in the first `catch` block, where multiple exceptions are thrown and caught at the same time.

.console output
[source,console]
----
Exception caught: java.lang.NullPointerException
----

. Since Java 7, multiple exceptions can be caught in the same catch.

. Only one variable is allowed for a `catch` block, and must be located at the end.
+
[source,java,indent=0]
.{java-package}/multipleexception/MultipleException_MultipleSameCatch.java
----
include::{section-java-package}/multipleexception/MultipleException_MultipleSameCatch.java[tag=code]
----

. It is not allowed to declare different exceptions, but would be redundant considering inheritance.

+
[source,java,indent=0]
.{java-package}/multipleexception/MultipleException_Redundant.java
----
include::{section-java-package}/multipleexception/MultipleException_Redundant.java[tag=code]
----

. When catching multiple Exceptions, it is not allowed to override the exception variable. But it's possible if it's just an `Exception` in `catch`.
+
[source,java,indent=0]
.{java-package}/multipleexception/MultipleException_OverrideVar.java
----
include::{section-java-package}/multipleexception/MultipleException_OverrideVar.java[tag=code]
----

. As in previous releases, more generic types of `Exception` should come later, lower in the _catch_.

+
[source,java,indent=0]
.{java-package}/multipleexception/MultipleException_GenericsLower.java
----
include::{section-java-package}/multipleexception/MultipleException_GenericsLower.java[tag=code]
----

. As in previous versions, repeated exceptions are still prohibited.
+
[source,java,indent=0]
.{java-package}/multipleexception/MultipleException_RepeatException.java
----
include::{section-java-package}/multipleexception/MultipleException_RepeatException.java[tag=code]
----

. As in previous versions, Checked Exceptions (those that inherit from `Exception`) can only be in a `catch` if something in `try` throws them.
+
[source,java,indent=0]
.{java-package}/multipleexception/MultipleException_CheckedException.java
----
include::{section-java-package}/multipleexception/MultipleException_CheckedException.java[tag=code]
----

.References
****

* Boyarsky, Jeanne; Selikoff, Scott. OCP: Oracle Certified Professional Java SE 8 Programmer II Study Guide (p. 291). Wiley. Kindle Edition.

* https://docs.oracle.com/javase/8/docs/technotes/guides/language/catch-multiple.html[Catching Multiple Exception Types and Rethrowing Exceptions with Improved Type Checking.] Java Documentation.

****
