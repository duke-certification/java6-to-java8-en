:java-package: src/org/j6toj8/languageenhancements
:section-java-package: ../../../{java-package}

=== Métodos `static` e `default` em Interfaces

.Objetivo
----
Use static and default methods of an interface including inheritance rules for a default method.
-
Usar métodos static e default de uma interface, incluindo regras de herança para um método default. 
----

É esperado que o candidato saiba compreender e analisar o uso da dos modificadores `static` e `default` em métodos de interfaces. 

Antes de continuar, com base no exemplo a seguir, entenda a execução do método `main` e o que é apresentado no console após sua execução.

[source,java,indent=0]
.{java-package}/staticdefaultininterfaces/StaticDefaultInInterfaces_Complete.java
----
include::{section-java-package}/staticdefaultininterfaces/StaticDefaultInInterfaces_Complete.java[tag=code]
----

.Saída no console
[source,console]
----
10.0
Correndo
Pessoa Correndo Rápido
----

O código anterior possui dois modificadores novos para interfaces, possíveis desde o Java 8: `default` e `static`. É possível perceber que esses dois métodos possuem corpo, algo que não era possível antes em uma interface. Então, vamos entender quais são as novas possibilidades.

. Desde o Java 8, Interfaces podem ter métodos com o modificador `static`.

. Métodos com o modificador `static` em interfaces são chamados iguais aos de uma classe comum, ou seja, não fazem parte da API da interface. Dessa forma, não são herdados pelas classes que implementam essa interface.
+
[source,java,indent=0]
.{java-package}/staticdefaultininterfaces/StaticDefaultInInterfaces_Static.java
----
include::{section-java-package}/staticdefaultininterfaces/StaticDefaultInInterfaces_Static.java[tag=code]
----

. Desde o Java 8, Interfaces podem ter métodos com o modificador `default`.

. Métodos `default` não precisam, mas podem, ser sobrescritos.

+
[source,java,indent=0]
.{java-package}/staticdefaultininterfaces/StaticDefaultInInterfaces_Default.java
----
include::{section-java-package}/staticdefaultininterfaces/StaticDefaultInInterfaces_Default.java[tag=code]
----
+
Veja que a classe `Pessoa` não sobrescreve o método `correr()`, mantendo o comportamento padrão da implementação feita na interface `Corredor`.
+
A classe `Cavalo`, por outro lado, sobrescreve o método `correr()` para ter sua própria implementação.
+
.Saída no console
[source,console]
----
Correndo
Galopando
----

. Assim como os outros método de uma interface, os métodos `static` e `default` *são sempre `public`*, e não podem ser modificados para `private` ou `protected`.
+
[source,java,indent=0]
.{java-package}/staticdefaultininterfaces/StaticDefaultInInterfaces_AccessModifiers.java
----
include::{section-java-package}/staticdefaultininterfaces/StaticDefaultInInterfaces_AccessModifiers.java[tag=code]
----

. Diferente dos outros método de uma interface, os métodos `static` e `default` não são `abstract`, e também não podem ser. Afinal, eles possuem implementação. Apenas métodos sem implementação são `abstract`.

+
[source,java,indent=0]
.{java-package}/staticdefaultininterfaces/StaticDefaultInInterfaces_Abstract.java
----
include::{section-java-package}/staticdefaultininterfaces/StaticDefaultInInterfaces_Abstract.java[tag=code]
----

. Se uma classe implementa duas interfaces que possuem métodos `default` repetidos, ela obrigatoriamente deve implementar o seu próprio.
+
[source,java,indent=0]
.{java-package}/staticdefaultininterfaces/StaticDefaultInInterfaces_RepeatedDefault.java
----
include::{section-java-package}/staticdefaultininterfaces/StaticDefaultInInterfaces_RepeatedDefault.java[tag=code]
----

. Ao implementar múltiplas interfaces, é possível acessar a implementação `default` de uma delas.
+
[source,java,indent=0]
.{java-package}/staticdefaultininterfaces/StaticDefaultInInterfaces_RepeatedDefaultSuper.java
----
include::{section-java-package}/staticdefaultininterfaces/StaticDefaultInInterfaces_RepeatedDefaultSuper.java[tag=code]
----
+
.Saída no console
[source,console]
----
Correndo
----

. Quando uma interface herda de outra interface métodos `default`, estes podem ser mantidos, transformados em `abstract` ou redefinidos.
+
[source,java,indent=0]
.{java-package}/staticdefaultininterfaces/StaticDefaultInInterfaces_InterfaceInheritance.java
----
include::{section-java-package}/staticdefaultininterfaces/StaticDefaultInInterfaces_InterfaceInheritance.java[tag=code]
----
+
Nesse exemplo, a interface `Piloto` herda de `Corredor` e mostra 3 cenários distintos:

* Mantém o método `correr()` inalterado;
* Altera o método `correrRapido()` para que seja `abstract`, fazendo com que qualquer classe que implemente a interface `Piloto` tenha que implementar esse método;
* Altera o método `correrDevagar()` para que tenha sua própria implementação

.Referências
****

* Designing an Interface
+
Boyarsky, Jeanne; Selikoff, Scott. OCP: Oracle Certified Professional Java SE 8 Programmer II Study Guide (p. 48). Wiley. Edição do Kindle.

* https://www.baeldung.com/java-static-default-methods[Static and Default Methods in Interfaces in Java.]

* https://docs.oracle.com/javase/tutorial/java/IandI/defaultmethods.html[Default Methods.] Java Documentation.

****
