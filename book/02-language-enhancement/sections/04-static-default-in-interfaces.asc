:java-package: src/org/j6toj8/languageenhancements
:section-java-package: ../../../{java-package}

=== Static and default methods of an interface

.Objective
----
Use static and default methods of an interface including inheritance rules for a default method.
----

It is expected that the candidate can understand and analyze the use of `static` and `default` modifiers in interface methods.

Before proceeding, based on the following example, understand the execution of the `main` method and what is presented on the console after its execution.

[source,java,indent=0]
.{java-package}/staticdefaultininterfaces/StaticDefaultInInterfaces_Complete.java
----
include::{section-java-package}/staticdefaultininterfaces/StaticDefaultInInterfaces_Complete.java[tag=code]
----

.console output
[source,console]
----
10.0
Running
Fast Running Person
----

The previous code has two new interface modifiers, possible since Java 8: `default` and `static`. You can see that these two methods have a body, something that was not possible before in an interface. So let's understand what the new possibilities are.

. Since Java 8, Interfaces can have methods with the `static` modifier.

. Methods with the `static` modifier on interfaces are called the same as those of a standard class, i.e., they are not part of the interface API. So, they are not inherited by classes that implement this interface.
+
[source,java,indent=0]
.{java-package}/staticdefaultininterfaces/StaticDefaultInInterfaces_Static.java
----
include::{section-java-package}/staticdefaultininterfaces/StaticDefaultInInterfaces_Static.java[tag=code]
----

. Since Java 8, Interfaces can have methods with the `default` modifier.

. `Default` methods do not need, but can be overridden.
+
[source,java,indent=0]
.{java-package}/staticdefaultininterfaces/StaticDefaultInInterfaces_Default.java
----
include::{section-java-package}/staticdefaultininterfaces/StaticDefaultInInterfaces_Default.java[tag=code]
----
+
Note that the `Person` class does not override the `run()` method, maintaining the default implementation behavior of the `Runner` interface.
+
The `Horse` class, on the other hand, overrides the `run()` method to have its own implementation.
+
.console output
[source,console]
----
Running
Galloping
----

. Like the other methods of an interface, the `static` and `default` *methods are always `public`*, and cannot be changed to `private` or `protected`.
+
[source,java,indent=0]
.{java-package}/staticdefaultininterfaces/StaticDefaultInInterfaces_AccessModifiers.java
----
include::{section-java-package}/staticdefaultininterfaces/StaticDefaultInInterfaces_AccessModifiers.java[tag=code]
----

. Unlike other interface methods, the `static` and `default` methods are not `abstract`, nor can they be. After all, they have implementation. Only methods without implementation are `abstract`.
+
[source,java,indent=0]
.{java-package}/staticdefaultininterfaces/StaticDefaultInInterfaces_Abstract.java
----
include::{section-java-package}/staticdefaultininterfaces/StaticDefaultInInterfaces_Abstract.java[tag=code]
----

. If a class implements two interfaces that have repeated `default` methods, it must implement its own.
+
[source,java,indent=0]
.{java-package}/staticdefaultininterfaces/StaticDefaultInInterfaces_RepeatedDefault.java
----
include::{section-java-package}/staticdefaultininterfaces/StaticDefaultInInterfaces_RepeatedDefault.java[tag=code]
----

. By implementing multiple interfaces, you can access the `default` implementation of one of them.
+
[source,java,indent=0]
.{java-package}/staticdefaultininterfaces/StaticDefaultInInterfaces_RepeatedDefaultSuper.java
----
include::{section-java-package}/staticdefaultininterfaces/StaticDefaultInInterfaces_RepeatedDefaultSuper.java[tag=code]
----
+
.console output
[source,console]
----
Running
----

. When an interface inherits from another interface, `default` methods can be retained, transformed into `abstract` or redefined.
+
[source,java,indent=0]
.{java-package}/staticdefaultininterfaces/StaticDefaultInInterfaces_InterfaceInheritance.java
----
include::{section-java-package}/staticdefaultininterfaces/StaticDefaultInInterfaces_InterfaceInheritance.java[tag=code]
----
+
In this example, the `Pilot` interface inherits from `Runner` and shows 3 distinct scenarios:

* Keep `run()` method unchanged;
* Changes the `runFast()` method to be `abstract`, so any class that implements the `Pilot` interface has to implement this method;
* Change `runSlow()` method to have its own implementation

.References
****

* Designing an Interface
+
Boyarsky, Jeanne; Selikoff, Scott. OCP: Oracle Certified Professional Java SE 8 Programmer II Study Guide (p. 48). Wiley. Kindle Edition.

* https://www.baeldung.com/java-static-default-methods[Static and Default Methods in Interfaces in Java.]

* https://docs.oracle.com/javase/tutorial/java/IandI/defaultmethods.html[Default Methods.] Java Documentation.

****
